<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【mind+ 用户库】FM 收音机模块</title>
    <link href="/post/5143.html"/>
    <url>/post/5143.html</url>
    
    <content type="html"><![CDATA[<h1 id="【Mind-用戶库】FM收音机模块"><a href="#【Mind-用戶库】FM收音机模块" class="headerlink" title="【Mind+用戶库】FM收音机模块"></a>【Mind+用戶库】FM收音机模块</h1><p><img src="https://img-blog.csdnimg.cn/2021030616583847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center"></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p><img src="https://img-blog.csdnimg.cn/20210306165900359.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="RDA5807M-收音机模块简介："><a href="#RDA5807M-收音机模块简介：" class="headerlink" title="RDA5807M 收音机模块简介："></a>RDA5807M 收音机模块简介：</h3><p>频率范围从76-108MHZ自动数字调谐。高稳定性，低噪音，收音模块，高灵敏度(使用低噪声射频输入放大器 ）。高放自动增益控制（AGC）电路，一片低功耗电调谐调频立体声收音机电路，其内部集成了中频选频和解调网络，不需要额外的天线，耳机线或者音箱箱同时FM射频天线，大大简化了电路</p><h3 id="技术规格"><a href="#技术规格" class="headerlink" title="技术规格"></a>技术规格</h3><table><thead><tr><th align="center">尺寸</th><th align="center">26.9*26.9mm</th></tr></thead><tbody><tr><td align="center">电压</td><td align="center">3.3~5V</td></tr><tr><td align="center">环境</td><td align="center">-20~85℃</td></tr><tr><td align="center">输入</td><td align="center">I2C接口</td></tr><tr><td align="center">连线接口</td><td align="center">PH2.54-4</td></tr><tr><td align="center">平台</td><td align="center">Arduino/STM32/51单片机</td></tr></tbody></table><p>购买链接： <a href="https://item.taobao.com/item.htm?spm=a230r.1.14.21.14146000pKANvM&amp;id=608564378218&amp;ns=1&amp;abbucket=8#detail">https://item.taobao.com/item.htm?spm=a230r.1.14.21.14146000pKANvM&amp;id=608564378218&amp;ns=1&amp;abbucket=8#detail</a></p><h2 id="导入用户库"><a href="#导入用户库" class="headerlink" title="导入用户库"></a>导入用户库</h2><p>加载库步骤如下：点击“扩展”选择“用户库”<br>在搜索栏输入：<a href="https://gitee.com/hockel/fm">https://gitee.com/hockel/fm</a><br><img src="https://img-blog.csdnimg.cn/2021030616591685.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center"></p><h2 id="积木列表"><a href="#积木列表" class="headerlink" title="积木列表"></a>积木列表</h2><p><img src="https://img-blog.csdnimg.cn/20210306165935893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center"></p><h3 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a>功能描述</h3><ul><li>支持向上/下换台</li><li>支持音量调节</li><li>支持设计收音机频率</li><li>支持获取当前收音机频率</li></ul><h2 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h2><h2 id="示例一：micro-bit-进行换台操作"><a href="#示例一：micro-bit-进行换台操作" class="headerlink" title="示例一：micro:bit 进行换台操作"></a>示例一：micro:bit 进行换台操作</h2><h3 id="1-1电路连接图"><a href="#1-1电路连接图" class="headerlink" title="1.1电路连接图"></a>1.1电路连接图</h3><p><img src="https://img-blog.csdnimg.cn/20210306165952166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center"></p><h3 id="1-2程序设计"><a href="#1-2程序设计" class="headerlink" title="1.2程序设计"></a>1.2程序设计</h3><p><img src="https://img-blog.csdnimg.cn/20210306170010222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="示例二：arduino-Nano-串口模型进行操作"><a href="#示例二：arduino-Nano-串口模型进行操作" class="headerlink" title="示例二：arduino Nano 串口模型进行操作"></a>示例二：arduino Nano 串口模型进行操作</h2><h3 id="2-1电路连接"><a href="#2-1电路连接" class="headerlink" title="2.1电路连接"></a>2.1电路连接</h3><p><img src="https://img-blog.csdnimg.cn/20210306170025195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="2-2-程序设计"><a href="#2-2-程序设计" class="headerlink" title="2.2 程序设计"></a>2.2 程序设计</h3><p><img src="https://img-blog.csdnimg.cn/20210306170037112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="许可证"><a href="#许可证" class="headerlink" title="许可证"></a>许可证</h2><p>MIT</p><h2 id="支持列表"><a href="#支持列表" class="headerlink" title="支持列表"></a>支持列表</h2><table><thead><tr><th>主板型号</th><th align="center">实时模式</th><th align="center">ArduinoC</th><th align="center">MicroPython</th><th>备注</th></tr></thead><tbody><tr><td>Arduino系列</td><td align="center"></td><td align="center">√</td><td align="center"></td><td></td></tr><tr><td>microbit</td><td align="center"></td><td align="center">√</td><td align="center"></td><td></td></tr></tbody></table><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><ul><li>V0.0.1  基础功能完成</li></ul><p>更多FM收音机模块案例可以关注我的个人博客：<a href="https://www.hockel.club/">www.hockel.club</a></p>]]></content>
    
    
    <categories>
      
      <category>mind+用户库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【一起DIY】吞币机器人</title>
    <link href="/post/62365.html"/>
    <url>/post/62365.html</url>
    
    <content type="html"><![CDATA[<h2 id="项目源起"><a href="#项目源起" class="headerlink" title="项目源起"></a>项目源起</h2><p>一个小小的存钱罐，承载着的是对与童年的回忆。存钱罐也是家庭中用来存放散乱零钱的常用工具。最近有个存钱罐红遍了网络，受到很多人青睐，不仅仅唤起对童年存钱罐的幻想，还纷纷购买，那就是无脸男自动吞币存钱罐。<br><img src="https://img-blog.csdnimg.cn/img_convert/8976affe13762c0aa1cc6f1a78f0b8b2.png#pic_center" alt="在这里插入图片描述"></p><h2 id="项目展示"><a href="#项目展示" class="headerlink" title="项目展示"></a>项目展示</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/1f8006b552cee99092ea61ce4e2f3807.png#pic_center" alt="在这里插入图片描述"></p><p>未放硬币时嘴巴闭合,不工作<br><img src="https://img-blog.csdnimg.cn/img_convert/87b24292ca60a8498b5bbc72587b322e.png#pic_center" alt="在这里插入图片描述"></p><p>放置硬币后，缓缓张开“嘴巴”，吞下硬币</p><h2 id="硬件清单"><a href="#硬件清单" class="headerlink" title="硬件清单"></a>硬件清单</h2><table><thead><tr><th>硬件名称</th><th>数量</th><th>购买链接</th></tr></thead><tbody><tr><td>microbit</td><td>1</td><td><a href="https://www.dfrobot.com.cn/goods-1434.html">链接  </a></td></tr><tr><td>micro:bit 电机驱动扩展板</td><td>1</td><td><a href="https://www.dfrobot.com.cn/goods-1730.html"> 链接 </a></td></tr><tr><td>9G 舵机</td><td>1</td><td><a href="https://www.dfrobot.com.cn/goods-214.html">链接</a></td></tr><tr><td>模拟环境光线传感器</td><td>1</td><td><a href="https://www.dfrobot.com.cn/goods-75.html">链接</a></td></tr><tr><td>吞币机器人切割外形</td><td>1</td><td>无</td></tr></tbody></table><h2 id="制作过程"><a href="#制作过程" class="headerlink" title="制作过程"></a>制作过程</h2><p><strong>1、吞币原理</strong></p><p>连杆结构：又称低副机构，是机械的组成部分中的一类，指由若干（两个以上）有确定相对运动的构件用低副（转动副或移动副）联接组成的机构,如下图<br><img src="https://img-blog.csdnimg.cn/img_convert/534364cb76ea09a0471562aa3ae2ff55.png#pic_center" alt="在这里插入图片描述"></p><p>当硬币放置到“盘子”上时，会遮盖住光线传感器，因此光线传感器检测的亮度会发生变化，当达到一定值时，控制舵机角度变化，即可吞下硬币！<br><strong>2.结构设计</strong><br>吞币机器人结构设计上，采用了Lasermake中的快速造盒功能配合并集、交集等多种指令制作。Microbit和拓展版可以从底部安装<br><img src="https://img-blog.csdnimg.cn/img_convert/43f1becd9d50f9c35f0d28faed526d17.png#pic_center" alt="在这里插入图片描述"></p><p><strong>3.相关设置</strong><br>1）编程环境部署</p><p>程序编写使用的是Mind+编程软件，此项目程序编写涉及到的硬件有microbit 、光线传感器、和9g舵机，因此在编写程序前先将这些拓展指令模块添加上。</p><p>第一步：打开Mind+鼠标点击扩展按钮<br><img src="https://img-blog.csdnimg.cn/img_convert/3fa1d5b3c7a1686d4dca09c54324a7e0.png#pic_center" alt="在这里插入图片描述"></p><p>第二步：切换“主控板”页面，如下图8处，添加microbit<br><img src="https://img-blog.csdnimg.cn/img_convert/761635055dae916f174a77e87622b113.png#pic_center" alt="在这里插入图片描述"></p><p><strong>4.电路连线</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/14591bdea6725f032cdeaf96a40fa734.png#pic_center" alt="在这里插入图片描述"></p><p>** 5.设备组装**<br>第一步：   将盒子的三个面拼接好，注意将底部与前方留出来。<br><img src="https://img-blog.csdnimg.cn/img_convert/0556a061872c601d2577902a19179dc4.png#pic_center" alt="在这里插入图片描述"></p><p>第二步：    将舵机固定在盒子的侧方，并将数据线通过孔放置在盒子下方区域。<br><img src="https://img-blog.csdnimg.cn/img_convert/052f4d67c73f3bd4b8dfbe3737838c7c.png#pic_center" alt="在这里插入图片描述"></p><p>第三步：    将两边的支架通过螺丝以及舵机进行固定。<br><img src="https://img-blog.csdnimg.cn/img_convert/f3f88f83f061a6df7ba15cd41078eb85.png#pic_center" alt="在这里插入图片描述"></p><p>第四步：     用胶枪将光线传感器固定在支架上安装在盒子前方<br><img src="https://img-blog.csdnimg.cn/img_convert/bf7cf956544dd2bcc74ca8ded4d094cc.png#pic_center" alt="在这里插入图片描述"></p><p>第五步：     将microbit与传感器引脚连接好，并固定在下方盒子上<br><a href="https://mc.dfrobot.com.cn/data/attachment/album/202101/05/202946x27k22au6vxz19jl.jpg">https://mc.dfrobot.com.cn/data/attachment/album/202101/05/202946x27k22au6vxz19jl.jpg</a><br>第六步：组装盒子其他部分，若连接松动，可用胶枪固定。完成项目。注意底部的盒子不要固定，方便进行项目调节<br><img src="https://img-blog.csdnimg.cn/img_convert/395f4938e69c741f0ca458220c8dcd98.png#pic_center" alt="在这里插入图片描述"></p><p><strong>6.代码编写</strong></p><p>准备工作：</p><p>代码编写： ① 将角度值设为变量，并设置初始值。<br><img src="https://img-blog.csdnimg.cn/img_convert/79c22d0fb86bd5941406433666ad2815.png#pic_center" alt="在这里插入图片描述"></p><p>② 当角度值为100°时，会以1为幅度增加角度值，直到角度达到150度，同理，当角度值达到150°时，以-1为幅度恢复到100度。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/47ef9736798d1377f2bc1f7f0b5d8f76.png#pic_center" alt="在这里插入图片描述"></p><p>③选择当环境光线值检测到硬币，也就是小于一定值时舵机转一定的角度，随后回复原位。<br><img src="https://img-blog.csdnimg.cn/img_convert/fb1785cc981247cebd67d5f963e9b584.png" alt="在这里插入图片描述"></p><h2 id="改进与提升"><a href="#改进与提升" class="headerlink" title="改进与提升"></a>改进与提升</h2><p>结构上还是初代产品，目前只实现了吞硬币的操作，没有预留取硬币的开口，光线传感器检测有无硬币有些不妥，后面慢慢改进。更多项目制作教程欢迎关注个人博客：<a href="http://www.hockel.club/">www.hockel.club</a></p>]]></content>
    
    
    <categories>
      
      <category>创客项目教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>microbit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【一起DIY】抢十秒器</title>
    <link href="/post/59438.html"/>
    <url>/post/59438.html</url>
    
    <content type="html"><![CDATA[<h1 id="【跟着hockel一起DIY】抢十秒器"><a href="#【跟着hockel一起DIY】抢十秒器" class="headerlink" title="【跟着hockel一起DIY】抢十秒器"></a>【跟着hockel一起DIY】抢十秒器</h1><p><img src="https://img-blog.csdnimg.cn/img_convert/48c84827bc43d948402338cf9cd51b74.png#pic_center" alt="在这里插入图片描述"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们在逛商场的时候，有没有发现：有一些商家买了一台“挑战10秒”的机器，如果你来本店消费，正好按到10秒，就算挑战成功了，只要有一个人挑战成功，那同行的全部免单。在某宝搜了一下价格，不搜不知道，一搜吓一跳！这个小小的“挑战10秒”机器，最便宜的机器也要180大洋。<br><img src="https://img-blog.csdnimg.cn/img_convert/7d58b4a91c72008af7c29f6597074169.png#pic_center" alt="在这里插入图片描述"></p><p>今天呢，陶老师就致敬经典，把‘挑战十秒’机器的价格打下来！让我们一起DIY一个抢十秒机器。</p><h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><ul><li><a href="https://item.taobao.com/item.htm?spm=a1z10.3-c-s.w4002-22712549697.9.a94c546eun5yuh&id=40636065878">arduino nano   * 1</a></li><li><a href="https://item.taobao.com/item.htm?spm=a1z10.3-c-s.w4002-22712549697.15.a94c546eun5yuh&id=42008287852">arduino nano IO扩展板  *1</a></li><li><a href="https://www.dfrobot.com.cn/goods-78.html">数字大按钮（红色、黄色）*2 </a></li><li><a href="https://item.taobao.com/item.htm?spm=a1z10.3-c-s.w4002-22712549697.9.6d67546evyxwct&id=40127496123">TM1637(4位数码管显示模块)</a></li><li>杜邦线 若干</li><li>抢十秒激光切割外壳</li></ul><h2 id="设计抢十秒器图纸"><a href="#设计抢十秒器图纸" class="headerlink" title="设计抢十秒器图纸"></a>设计抢十秒器图纸</h2><p>1、打开LaserMaker-→ 选择”一键造物”功能-→选择“圆角盒子”具体设置如下：<br><img src="https://img-blog.csdnimg.cn/img_convert/9400e81cd16e4c5e36044cfafe228864.png#pic_center" alt="在这里插入图片描述"></p><p>2、将一些传感器的开口预留一下。如下图所示：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/52aea6683570a0783078786d0b7f911a.png#pic_center" alt="在这里插入图片描述"></p><p>3：进行激光切割<br><img src="https://img-blog.csdnimg.cn/img_convert/4b61cae1dce814952884858a0d8f1600.png#pic_center" alt="在这里插入图片描述"></p><h2 id="电路连接"><a href="#电路连接" class="headerlink" title="电路连接"></a>电路连接</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/02323ea19bcdcdb632312877617a9258.png#pic_center" alt="在这里插入图片描述"></p><h2 id="作品搭建"><a href="#作品搭建" class="headerlink" title="作品搭建"></a>作品搭建</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/359a415b867ab6247266990d7ade939e.png#pic_center" alt="在这里插入图片描述"></p><p>①：组装TM1637和数字按钮（这里的TM1637的针脚可能会挡住，我用焊烙铁将针脚反置了一下。）<br><img src="https://img-blog.csdnimg.cn/img_convert/9c60b81c7c9a64063f3f506c38c8e3ec.png#pic_center" alt="在这里插入图片描述"></p><p>②：组装主控板<br><img src="https://img-blog.csdnimg.cn/img_convert/576067ad013ac92cea06cad0d295ba67.png#pic_center" alt="在这里插入图片描述"></p><p>③：按照我们的电路连接图进行传感器的接线<br><img src="https://img-blog.csdnimg.cn/20210105193828232.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>④：完成组装<br><img src="https://img-blog.csdnimg.cn/20210105193842219.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h2><p>我们这里需要用到TM1637模块，mind+中内置的积木块中没有，我们需要进行用户库的添加。选择主控板–“arduino nano ”,选择”用户库”搜索“TM1637”加载即可。具体操作如下：<br><img src="https://img-blog.csdnimg.cn/img_convert/3ba0d8e3ec5afc3585a88acbabe0d44d.png#pic_center" alt="在这里插入图片描述"></p><p><strong>主程序编写：</strong><br><img src="https://img-blog.csdnimg.cn/20210105193938494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20210105193950829.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210105193950847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>代码：</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/*!</span><br><span class="hljs-comment">* MindPlus</span><br><span class="hljs-comment">* nano</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;SevenSegmentTM1637.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;SevenSegmentExtended.h&gt;</span></span><br><br><span class="hljs-comment">// 动态变量</span><br><span class="hljs-keyword">volatile</span> <span class="hljs-keyword">float</span> mind_n__1, mind_n_flag, mind_n__2;<br><span class="hljs-comment">// 函数声明</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DF_KaiShiJiShi</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DF_TingZhiJiShi</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DF_XianShiJieGuo</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 创建对象</span><br><span class="hljs-function">SevenSegmentExtended <span class="hljs-title">tm1637</span><span class="hljs-params">(<span class="hljs-number">9</span>,<span class="hljs-number">8</span>)</span></span>;<br><br><br><span class="hljs-comment">// 主程序开始</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>&#123;<br>        tm1637.<span class="hljs-built_in">begin</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">digitalRead</span>(<span class="hljs-number">2</span>)) &#123;<br>                DF_KaiShiJiShi();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">digitalRead</span>(<span class="hljs-number">3</span>)) &#123;<br>                DF_TingZhiJiShi();<br>        &#125;<br>        DF_XianShiJieGuo();<br>&#125;<br><br><br><span class="hljs-comment">// 自定义函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DF_KaiShiJiShi</span><span class="hljs-params">()</span> </span>&#123;<br>        tm1637.printTime(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>        mind_n__1 = <span class="hljs-built_in">millis</span>();<br>        mind_n_flag = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DF_TingZhiJiShi</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> ((mind_n_flag==<span class="hljs-number">1</span>)) &#123;<br>                mind_n__2 = <span class="hljs-built_in">millis</span>();<br>                mind_n_flag = <span class="hljs-number">2</span>;<br>        &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DF_XianShiJieGuo</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> ((mind_n_flag==<span class="hljs-number">1</span>)) &#123;<br>                tm1637.printTime(((<span class="hljs-built_in">millis</span>() - mind_n__1) / <span class="hljs-number">1000</span>),((((<span class="hljs-keyword">int</span>)(<span class="hljs-built_in">millis</span>() - mind_n__1)) % ((<span class="hljs-keyword">int</span>)<span class="hljs-number">1000</span>)) / <span class="hljs-number">10</span>),<span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>                tm1637.printTime(((mind_n__2 - mind_n__1) / <span class="hljs-number">1000</span>),((((<span class="hljs-keyword">int</span>)(mind_n__2 - mind_n__1)) % ((<span class="hljs-keyword">int</span>)<span class="hljs-number">1000</span>)) / <span class="hljs-number">10</span>),<span class="hljs-number">0</span>);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>作品演示：</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/b482842922caf79c7a0d342ec5ec7e84.gif#pic_center" alt="在这里插入图片描述"></p><p><strong>声明一下：</strong>这里为了减少动图大小，把视频转成GIF图时，减少了一些帧数。原视频中：4位数码的显示还是很流畅的</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>好了，到这里我们的抢十秒机器就制作完成了，是不是很简单呢？更多项目制作教程欢迎浏览个人博客：<a href="http://www.hockel.club/">www.hockel.club</a></p>]]></content>
    
    
    <categories>
      
      <category>创客项目教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>arduino</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【mind+ Maixduino用户库】NES 游戏扩展库</title>
    <link href="/post/5144.html"/>
    <url>/post/5144.html</url>
    
    <content type="html"><![CDATA[<h1 id="NES-游戏扩展库"><a href="#NES-游戏扩展库" class="headerlink" title="NES 游戏扩展库"></a>NES 游戏扩展库</h1><h2 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h2><p>【mind+ maixduino用户库】经典的 FC 红白机 游戏模拟器， 带我们回到小时候！</p><p><img src="https://img-blog.csdnimg.cn/20210105192815678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>加载库步骤如下：点击“扩展”选择“用户库”<br>在搜索栏输入：“<a href="https://gitee.com/hockel/nes_game%E2%80%9D">https://gitee.com/hockel/nes_game”</a><br><img src="https://img-blog.csdnimg.cn/20210105192833680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="积木"><a href="#积木" class="headerlink" title="积木"></a>积木</h2><p><img src="https://img-blog.csdnimg.cn/2021010519293081.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="声音设置"><a href="#声音设置" class="headerlink" title="声音设置"></a>声音设置</h3><p><img src="https://img-blog.csdnimg.cn/20210105192947295.png#pic_center"></p><p>将我们的扬声器设置为[开启/关闭]模式</p><h3 id="PS2手柄初始化"><a href="#PS2手柄初始化" class="headerlink" title="PS2手柄初始化"></a>PS2手柄初始化</h3><p><img src="https://img-blog.csdnimg.cn/20210105193115433.png#pic_center" alt="在这里插入图片描述"></p><p><strong>参数说明</strong></p><ul><li><code>cs</code>： 如果使用 <code>SPI</code> 接口的 <code>PS2</code> 手柄， 传入 <code>cs</code> 外设编号（注意不是引脚号，需要先映射引脚）</li><li><code>mosi</code>： 如果使用 <code>SPI</code> 接口的 <code>PS2</code> 手柄， 传入 <code>mosi</code> 外设编号（注意不是引脚号，需要先映射引脚）</li><li><code>miso</code>： 如果使用 <code>SPI</code> 接口的 <code>PS2</code> 手柄， 传入 <code>miso</code> 外设编号（注意不是引脚号，需要先映射引脚）</li><li><code>clk</code>： 如果使用 <code>SPI</code> 接口的 <code>PS2</code> 手柄， 传入 <code>clk</code> 外设编号（注意不是引脚号，需要先映射引脚）</li></ul><p><strong>快捷键：</strong></p><ul><li><code>移动</code> ： 方向键 <code>&lt;-</code> <code>^</code> <code>V</code> <code>-&gt;</code></li><li><code>A</code> ： <code>□</code></li><li><code>B</code> ： <code>×</code></li><li><code>start</code> ： <code>START</code></li><li><code>select</code>： <code>SELECT</code></li><li><code>退出</code> ： 暂无</li><li><code>音量 -</code> ： <code>R2</code></li><li><code>音量 +</code> ： <code>R1</code></li><li><code>运行速度 -</code> ： <code>L1</code></li><li><code>运行速度 +</code> ： <code>L2</code></li></ul><h3 id="键盘初始化"><a href="#键盘初始化" class="headerlink" title="键盘初始化"></a>键盘初始化</h3><p><img src="https://img-blog.csdnimg.cn/20210105193124913.png#pic_center" alt="在这里插入图片描述"></p><p><strong>快捷键：</strong></p><ul><li><code>移动</code> ： <code>W A S D</code></li><li><code>A</code> ： <code>J</code></li><li><code>B</code> ： <code>K</code></li><li><code>start</code> ： <code>M</code> 或者 <code>Enter</code></li><li><code>option</code>： <code>N</code> 或者 <code>\</code></li><li><code>退出</code> ： <code>ESC</code></li><li><code>音量 -</code> ： <code>-</code></li><li><code>音量 +</code> ： <code>=</code></li><li><code>运行速度 -</code> ： <code>R</code></li><li><code>运行速度 +</code> ： <code>F</code></li></ul><h3 id="加载NES游戏路径"><a href="#加载NES游戏路径" class="headerlink" title="加载NES游戏路径"></a>加载NES游戏路径</h3><p><img src="https://img-blog.csdnimg.cn/20210105193134250.png#pic_center" alt="在这里插入图片描述"></p><p>在根目录下有一个<u><strong>nes游戏全集.rar</strong></u>文件，下载解压到SD卡，之后加载游戏路径就可以畅游在儿时的回忆中去了</p><h3 id="运行游戏"><a href="#运行游戏" class="headerlink" title="运行游戏"></a>运行游戏</h3><p><img src="https://img-blog.csdnimg.cn/2021010519314563.png#pic_center" alt="在这里插入图片描述"></p><p><strong>注：此积木块要放到重复执行积木块中</strong></p><h2 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h2><h3 id="任务一：用键盘玩NES游戏"><a href="#任务一：用键盘玩NES游戏" class="headerlink" title="任务一：用键盘玩NES游戏"></a>任务一：用键盘玩NES游戏</h3><p><img src="https://img-blog.csdnimg.cn/20210105193155193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="任务二：用PS2手柄玩NES游戏"><a href="#任务二：用PS2手柄玩NES游戏" class="headerlink" title="任务二：用PS2手柄玩NES游戏"></a>任务二：用PS2手柄玩NES游戏</h3><p><img src="https://img-blog.csdnimg.cn/20210105193216464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>显示效果如下：</strong></p><p><img src="https://img-blog.csdnimg.cn/20210105193233916.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="支持列表"><a href="#支持列表" class="headerlink" title="支持列表"></a>支持列表</h1><table><thead><tr><th>主板型号</th><th>实时模式</th><th align="center">ArduinoC</th><th align="center">MicroPython</th><th>备注</th></tr></thead><tbody><tr><td>mpython</td><td></td><td align="center"></td><td align="center">√</td><td></td></tr></tbody></table><h1 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h1><p>V0.0.1 基础功能完成</p>]]></content>
    
    
    <categories>
      
      <category>mind+用户库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maixduino</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【mind+ Maixduino 用户库】文字显示</title>
    <link href="/post/60081.html"/>
    <url>/post/60081.html</url>
    
    <content type="html"><![CDATA[<h1 id="【mind-Maixduino-用户库】文字显示"><a href="#【mind-Maixduino-用户库】文字显示" class="headerlink" title="【mind+ Maixduino 用户库】文字显示"></a>【mind+ Maixduino 用户库】文字显示</h1><h2 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h2><p>本用户库可实现让maixduino驱动LCD显示中文字模及以图片的形式显示英文</p><p><img src="https://img-blog.csdnimg.cn/20210105191027196.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>加载库步骤如下：点击“扩展”选择“用户库”<br>在搜索栏输入：“<a href="https://gitee.com/hockel/chinese-display-for-maixduino%E2%80%9D">https://gitee.com/hockel/chinese-display-for-maixduino”</a><br><img src="https://img-blog.csdnimg.cn/20210105191249251.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="积木"><a href="#积木" class="headerlink" title="积木"></a>积木</h2><p><img src="https://img-blog.csdnimg.cn/20210105191319760.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="初始化LCD屏幕显示"><a href="#初始化LCD屏幕显示" class="headerlink" title="初始化LCD屏幕显示"></a>初始化LCD屏幕显示</h3><p><img src="https://img-blog.csdnimg.cn/2021010519133755.png#pic_center" alt="在这里插入图片描述"></p><h3 id="以图形形式显示英文"><a href="#以图形形式显示英文" class="headerlink" title="以图形形式显示英文"></a>以图形形式显示英文</h3><p><img src="https://img-blog.csdnimg.cn/20210105191403420.png#pic_center" alt="在这里插入图片描述"></p><p><strong>参数说明：</strong></p><ul><li>第一个参数： 英文文本</li><li>第二个参数X： 显示字模距离远点的X坐标</li><li>第三个参数Y： 显示字模距离远点的Y坐标</li><li>第四个参数scale: 字体显示大小， 范围在1~4</li><li>第六个参数颜色： 设置字体颜色</li></ul><h3 id="加载字库文件-推荐使用"><a href="#加载字库文件-推荐使用" class="headerlink" title="加载字库文件(推荐使用)"></a>加载字库文件(推荐使用)</h3><p><img src="https://img-blog.csdnimg.cn/20210105191415619.png#pic_center" alt="在这里插入图片描述"></p><p><strong>参数说明：</strong></p><ul><li>第一个参数W：我们用字库工具设置的字体的宽度</li><li>第二个参数H：我们用字库工具设置的字体的高度</li><li>第三个参数路径：加载字库路径</li></ul><p>如何导出一个字库我会在下面详细说明！</p><h3 id="以字库形式显示文字"><a href="#以字库形式显示文字" class="headerlink" title="以字库形式显示文字"></a>以字库形式显示文字</h3><p><img src="https://img-blog.csdnimg.cn/20210105191426490.png#pic_center" alt="在这里插入图片描述"></p><ul><li>第一个参数文字：这里我们用一个变量来引入 变量命名格式为：变量名=b’你想要输入的中文及其他语言’</li><li>第二个参数X：显示文字距离原点的X坐标</li><li>第三个参数Y：显示文字距离原点的Y坐标</li><li>第四个参数间距：显示文字的字符间距</li><li>第五个参数颜色： 显示文字颜色</li></ul><h3 id="释放字库"><a href="#释放字库" class="headerlink" title="释放字库"></a>释放字库</h3><p><img src="https://img-blog.csdnimg.cn/20210105192018870.png#pic_center" alt="在这里插入图片描述"></p><p><strong>释放字库后，如果在使用该字库，需要重现加载。</strong></p><h3 id="以字模形式显示文字"><a href="#以字模形式显示文字" class="headerlink" title="以字模形式显示文字"></a>以字模形式显示文字</h3><p><img src="https://img-blog.csdnimg.cn/20210105192031226.png#pic_center" alt="在这里插入图片描述"></p><p><strong>参数说明</strong></p><ul><li>第一个参数my Variable：字模字符串变量：我们可以开开头声明一个变量= b’ 16进制字符串’</li><li>第二个参数X： 显示字模距离原点的X坐标</li><li>第三个参数Y： 显示字模距离原点的Y坐标</li><li>第四个参数W：字模生成设置字体的宽度</li><li>第五个参数H：字模生成设置字体的高度</li><li>第六个参数scale: 字体显示大小， 范围在1~4</li><li>第七个参数颜色： 设置字体颜色</li></ul><h3 id="显示生效"><a href="#显示生效" class="headerlink" title="显示生效"></a>显示生效</h3><p><img src="https://img-blog.csdnimg.cn/20210105192044226.png#pic_center" alt="在这里插入图片描述"></p><p>将我们设置文字形式显示在LCD屏幕上。</p><h3 id="清屏"><a href="#清屏" class="headerlink" title="清屏"></a>清屏</h3><p><img src="https://img-blog.csdnimg.cn/20210105192159781.png#pic_center" alt="在这里插入图片描述"></p><h2 id="字库工具"><a href="#字库工具" class="headerlink" title="字库工具"></a>字库工具</h2><p>我们将使用tools下的 [FontGenerator.zip]导出字体对应的字库，请看下图完成导出操作。</p><ol><li>选择字库编码类型为 Unicode 编码，这将支持绝大多数国家的语言。<br><img src="https://img-blog.csdnimg.cn/20210105192213407.png#pic_center" alt="在这里插入图片描述"></li></ol><ol start="2"><li><p>选择扫描模式，为 5 横向、先上下后左右的字模的扫描打印方向。</p><p><img src="https://img-blog.csdnimg.cn/20210105192225801.png#pic_center" alt="在这里插入图片描述"></p></li></ol><ol start="3"><li>如下图配置所需要的字体样式后创建字库。</li></ol><p><img src="https://img-blog.csdnimg.cn/20210105192236584.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol start="4"><li>保存成 DZK 格式即可，字模数据访问方法如图文字说明</li></ol><p><img src="https://img-blog.csdnimg.cn/20210105192247890.png#pic_center" alt="在这里插入图片描述"></p><h2 id="字模工具"><a href="#字模工具" class="headerlink" title="字模工具"></a>字模工具</h2><p>使用目录下的 PCtoLCD.rar软件获取字模的字符串。</p><p>1、确认软件为字符模式。</p><p><img src="https://img-blog.csdnimg.cn/20210105192257639.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20210105192312743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>2、点击设置如图即可导出想要的字符串。<br><img src="https://img-blog.csdnimg.cn/2021010519232381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>3、提取字模字符串即可使用。</p><p><img src="https://img-blog.csdnimg.cn/20210105192333891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"> 这(<span class="hljs-number">0</span>) 是(<span class="hljs-number">1</span>) 测(<span class="hljs-number">2</span>) 试(<span class="hljs-number">3</span>)<br><br><span class="hljs-regexp">/x00/</span>x20<span class="hljs-regexp">/x10/</span>x17<span class="hljs-regexp">/x00/</span>x02<span class="hljs-regexp">/xF1/</span>x10<span class="hljs-regexp">/x10/</span>x10<span class="hljs-regexp">/x11/</span>x12<span class="hljs-regexp">/x14/</span>x28<span class="hljs-regexp">/x47/</span>x00<span class="hljs-regexp">/x80/</span>x40<span class="hljs-regexp">/x40/</span>xFC<span class="hljs-regexp">/x10/</span>x10<span class="hljs-regexp">/x20/</span>xA0<span class="hljs-regexp">/x40/</span>xA0<span class="hljs-regexp">/x10/</span>x08<span class="hljs-regexp">/x08/</span>x00<span class="hljs-regexp">/xFE/</span>x00这<span class="hljs-number">0</span><br><span class="hljs-regexp">/x1F/</span>x10<span class="hljs-regexp">/x10/</span>x1F<span class="hljs-regexp">/x10/</span>x10<span class="hljs-regexp">/x1F/</span>x00<span class="hljs-regexp">/xFF/</span>x01<span class="hljs-regexp">/x11/</span>x11<span class="hljs-regexp">/x11/</span>x29<span class="hljs-regexp">/x45/</span>x83<span class="hljs-regexp">/xF0/</span>x10<span class="hljs-regexp">/x10/</span>xF0<span class="hljs-regexp">/x10/</span>x10<span class="hljs-regexp">/xF0/</span>x00<span class="hljs-regexp">/xFE/</span>x00<span class="hljs-regexp">/x00/</span>xF8<span class="hljs-regexp">/x00/</span>x00<span class="hljs-regexp">/x00/</span>xFE是<span class="hljs-number">1</span><br><span class="hljs-regexp">/x00/</span>x27<span class="hljs-regexp">/x14/</span>x14<span class="hljs-regexp">/x85/</span>x45<span class="hljs-regexp">/x45/</span>x15<span class="hljs-regexp">/x15/</span>x25<span class="hljs-regexp">/xE5/</span>x21<span class="hljs-regexp">/x22/</span>x22<span class="hljs-regexp">/x24/</span>x08<span class="hljs-regexp">/x04/</span>xC4<span class="hljs-regexp">/x44/</span>x54<span class="hljs-regexp">/x54/</span>x54<span class="hljs-regexp">/x54/</span>x54<span class="hljs-regexp">/x54/</span>x54<span class="hljs-regexp">/x54/</span>x04<span class="hljs-regexp">/x84/</span>x44<span class="hljs-regexp">/x14/</span>x08测<span class="hljs-number">2</span><br><span class="hljs-regexp">/x00/</span>x20<span class="hljs-regexp">/x10/</span>x10<span class="hljs-regexp">/x07/</span>x00<span class="hljs-regexp">/xF0/</span>x17<span class="hljs-regexp">/x11/</span>x11<span class="hljs-regexp">/x11/</span>x15<span class="hljs-regexp">/x19/</span>x17<span class="hljs-regexp">/x02/</span>x00<span class="hljs-regexp">/x28/</span>x24<span class="hljs-regexp">/x24/</span>x20<span class="hljs-regexp">/xFE/</span>x20<span class="hljs-regexp">/x20/</span>xE0<span class="hljs-regexp">/x20/</span>x10<span class="hljs-regexp">/x10/</span>x10<span class="hljs-regexp">/xCA/</span>x0A<span class="hljs-regexp">/x06/</span>x02试<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>可以使用图形模式绘制自己喜欢的字模图形，支持 32 * 32 的图形。</p><p><img src="https://img-blog.csdnimg.cn/20210105192347723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h2><h3 id="任务一：以图形形式显示英文"><a href="#任务一：以图形形式显示英文" class="headerlink" title="任务一：以图形形式显示英文"></a>任务一：以图形形式显示英文</h3><p><img src="https://img-blog.csdnimg.cn/20210105192416389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>实验效果：</strong><br><img src="https://img-blog.csdnimg.cn/20210105192428105.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="任务二：以字库显示文字"><a href="#任务二：以字库显示文字" class="headerlink" title="任务二：以字库显示文字"></a>任务二：以字库显示文字</h3><p><img src="https://img-blog.csdnimg.cn/20210105192443814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center"></p><p><strong>显示效果如下</strong></p><p><img src="https://img-blog.csdnimg.cn/20210105192504345.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="任务三：以字模显示文字"><a href="#任务三：以字模显示文字" class="headerlink" title="任务三：以字模显示文字"></a>任务三：以字模显示文字</h3><p><img src="https://img-blog.csdnimg.cn/20210105192517566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>显示效果如下：</strong><br><img src="https://img-blog.csdnimg.cn/20210105192533111.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="支持列表"><a href="#支持列表" class="headerlink" title="支持列表"></a>支持列表</h1><table><thead><tr><th>主板型号</th><th>实时模式</th><th align="center">ArduinoC</th><th align="center">MicroPython</th><th>备注</th></tr></thead><tbody><tr><td>mpython</td><td></td><td align="center"></td><td align="center">√</td><td></td></tr></tbody></table><h1 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h1><p>V0.0.1 基础功能完成</p><p>V0.0.2 增加字库操作</p>]]></content>
    
    
    <categories>
      
      <category>mind+用户库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maixduino</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Mind+ 玩转Maixduino系列1】你好，世界</title>
    <link href="/post/34830.html"/>
    <url>/post/34830.html</url>
    
    <content type="html"><![CDATA[<h1 id="【Mind-玩转Maixduino系列1】你好，世界"><a href="#【Mind-玩转Maixduino系列1】你好，世界" class="headerlink" title="【Mind+ 玩转Maixduino系列1】你好，世界"></a>【Mind+ 玩转Maixduino系列1】你好，世界</h1><p><img src="https://img-blog.csdnimg.cn/20201223171458911.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本次课我们就开始学习【mind+ 玩转maixduino系列】的相关教程了，本教程针对有一定开源硬件基础的小伙伴，并且主要偏人工智能方向。对于mind+和arduino操作不太熟悉的，可以先去<a href="https://mc.dfrobot.com.cn/">dfrobot论坛</a>学习相关教程，再来学习本教程。好了废话不多说了，今天我们就从屏幕开始吧！</p><h1 id="课前准备"><a href="#课前准备" class="headerlink" title="课前准备"></a>课前准备</h1><ul><li><a href="https://www.dfrobot.com.cn/goods-2591.html">Maixduino 套件</a></li><li><a href="http://mindplus.cc/download.html">Mind+ 软件（要求1.66版本以上）</a></li></ul><p>在课程开始之前，请确保自己是否已经准备好软硬件。</p><h2 id="硬件连接"><a href="#硬件连接" class="headerlink" title="硬件连接"></a>硬件连接</h2><p><strong>一、LCD液晶屏与maixduino 连接方式如下图：</strong><br><img src="https://img-blog.csdnimg.cn/20201223175418566.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>①：LCD与Maixduio主控板连接的方式<br>②：摄像头与Maiduino主控板连接的方式</p><p><strong>二、Mind+与Maixduino连接</strong><br>首先我们先打开我们的mind+软件：</p><ul><li><p>选择 <strong>“上传模式”</strong><br><img src="https://img-blog.csdnimg.cn/20201223181518288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>点击<strong>扩展</strong>选择相应的主控板-Maixduino,<br><img src="https://img-blog.csdnimg.cn/20201223181643140.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>后点击左上方的返回按钮出现Maixduino的指令界面<br><img src="https://img-blog.csdnimg.cn/20201223181938475.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>点击连接设备，选择Maixduino对应的com口，如果没有连接成功可以【一键安装串口驱动】<br><img src="https://img-blog.csdnimg.cn/20201223182203813.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>终端出现下列代码，就证明Maixduino与Mind+ 连接成功了<br><img src="https://img-blog.csdnimg.cn/2020122318374746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="屏幕显示相关积木说明"><a href="#屏幕显示相关积木说明" class="headerlink" title="屏幕显示相关积木说明"></a>屏幕显示相关积木说明</h2><p><img src="https://img-blog.csdnimg.cn/2020122319275053.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li></ul><p>Maixduino的屏幕是2.4 寸 TFT, 默认使用 st7789驱动芯片的 LCD （24pin接口）， 分辨率为 320x240。<br><img src="https://img-blog.csdnimg.cn/20201223193140800.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>①：初始化 LCD 屏幕显示<img src="https://img-blog.csdnimg.cn/202012231936385.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">lcd.init(freq=<span class="hljs-number">15000000</span>, color=<span class="hljs-number">65535</span>)<br>参数说明：<br>freq： LCD （实际上指 SPI 的通讯速率） 的频率<br>【对于屏幕体质不是很好， 需要降低频率，或者体质很好需要超频：】<br>color： LCD 初始化的颜色， 可以是 <span class="hljs-number">16</span> 位的 RGB565 颜色值，比如 <span class="hljs-number">0xFFFF</span>； 或者 RGB888 元组， 比如 (<span class="hljs-number">236</span>, <span class="hljs-number">36</span>, <span class="hljs-number">36</span>)，<br></code></pre></td></tr></table></figure><p>②：LCD屏幕显示SD卡图片<br><img src="https://img-blog.csdnimg.cn/20201223194355953.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">lcd.display(image.Image(<span class="hljs-string">&quot;/sd/pic.jpg&quot;</span>))<br>显示图像调用的是image函数。<br>图片路径<span class="hljs-string">&quot;/sd/图片名.jpg&quot;</span>,这里屏幕显示的图片像素大小是：<span class="hljs-number">320</span>*<span class="hljs-number">240.</span>格式为:JPG 【bmp/png格式我试了貌似不可以，会报错可能是图片导出格式问题】<br></code></pre></td></tr></table></figure><p>③：屏幕显示图像<img src="https://img-blog.csdnimg.cn/20201223195306540.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">lcd.display(image.Image())<br>LCD屏幕显示图像，display函数中也可以实时显示摄像头图像。<br></code></pre></td></tr></table></figure><p>④：屏幕显示文字【注意这里的文字不能显示汉字，我写了一个用户库用于显示中文字模】<br><img src="https://img-blog.csdnimg.cn/20201223200247432.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">lcd.draw_string(<span class="hljs-number">42</span>, <span class="hljs-number">22</span>, <span class="hljs-built_in">str</span>(<span class="hljs-string">&quot;Mind+&quot;</span>), <span class="hljs-number">0</span>, <span class="hljs-number">65535</span>)<br><br>参数<span class="hljs-number">1</span>： 文字距离坐标原点的X坐标<br>参数<span class="hljs-number">2</span>： 文字距离坐标原点的Y坐标<br>参数<span class="hljs-number">3</span>：需要显示文字（英文字母、标点符号、阿拉伯数字）<br>参数<span class="hljs-number">4</span>：文字颜色<br>参数<span class="hljs-number">5</span>：背景颜色<br></code></pre></td></tr></table></figure><p>⑤：LCD屏幕清屏操作<img src="https://img-blog.csdnimg.cn/20201223200743944.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">lcd.clear()<br>将液晶屏清空为黑色或者指定的颜色。<br>color： LCD 初始化的颜色， 可以是 <span class="hljs-number">16</span> 位的 RGB565 颜色值，比如 <span class="hljs-number">0xFFFF</span>； 或者 RGB888 元组， 比如 (<span class="hljs-number">236</span>, <span class="hljs-number">36</span>, <span class="hljs-number">36</span>)<br></code></pre></td></tr></table></figure><p>⑥：屏幕旋转<br><img src="https://img-blog.csdnimg.cn/20201223200917317.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">lcd.rotation(<span class="hljs-built_in">dir</span>)<br>设置 LCD 屏幕方向<br>参数<br><span class="hljs-built_in">dir</span>: 取值范围 [<span class="hljs-number">0</span>,<span class="hljs-number">3</span>]， 从<span class="hljs-number">0</span>到<span class="hljs-number">3</span>依次顺时针旋转<br></code></pre></td></tr></table></figure><p>⑦：是否开启屏幕镜像<img src="https://img-blog.csdnimg.cn/20201223201149714.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">设置 LCD 是否镜面显示<br>lcd.mirror(invert)<br>invert： 是否镜面显示， <span class="hljs-literal">True</span> 或者 <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>⑧：获取屏幕分辨率（宽度/高度）<br><img src="https://img-blog.csdnimg.cn/20201223201346301.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">lcd.width()<br>返回 LCD 的宽度（水平分辨率）<br>lcd.height()<br>返回 LCD 的高度（垂直分辨率）。<br></code></pre></td></tr></table></figure><p>⑨：颜色设置<br><img src="https://img-blog.csdnimg.cn/2020122320163713.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">RGB888 元组， 比如 (<span class="hljs-number">236</span>, <span class="hljs-number">36</span>, <span class="hljs-number">36</span>)，<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201223201650190.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">可以是 <span class="hljs-number">16</span> 位的 RGB565 颜色值，比如 <span class="hljs-number">0xFFFF</span><br></code></pre></td></tr></table></figure><h2 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h2><h3 id="任务一：初始化屏幕显示"><a href="#任务一：初始化屏幕显示" class="headerlink" title="任务一：初始化屏幕显示"></a>任务一：初始化屏幕显示</h3><p><img src="https://img-blog.csdnimg.cn/20201223202632682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>实验效果：</strong><br><img src="https://img-blog.csdnimg.cn/20201223202738252.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="任务二：显示SD图片"><a href="#任务二：显示SD图片" class="headerlink" title="任务二：显示SD图片"></a>任务二：显示SD图片</h3><p><img src="https://img-blog.csdnimg.cn/2020122320290775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>实验效果：</strong><br><img src="https://img-blog.csdnimg.cn/20201223203336254.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="任务三：显示文字"><a href="#任务三：显示文字" class="headerlink" title="任务三：显示文字"></a>任务三：显示文字</h3><p><img src="https://img-blog.csdnimg.cn/20201223204041491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>实验效果：</strong><br><img src="https://img-blog.csdnimg.cn/20201223204222762.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="任务三：利用显示图片的方式显示英文"><a href="#任务三：利用显示图片的方式显示英文" class="headerlink" title="任务三：利用显示图片的方式显示英文"></a>任务三：利用显示图片的方式显示英文</h3><p>这里我为Maixduino写了一个<a href="https://gitee.com/hockel/chinese-display-for-maixduino">用户库</a>，有需要的小伙伴可以加载一下进行操作。<br>加载库步骤如下：点击“扩展”选择“用户库”<br>在搜索栏输入：“<a href="https://gitee.com/hockel/chinese-display-for-maixduino%E2%80%9D">https://gitee.com/hockel/chinese-display-for-maixduino”</a><br><img src="https://img-blog.csdnimg.cn/20201223215855883.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>具体用户库相关说明，可以查看这<a href="https://gitee.com/hockel/chinese-display-for-maixduino">说明文档</a></p><p><img src="https://img-blog.csdnimg.cn/20201223210812783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>实验效果：</strong><br><img src="https://img-blog.csdnimg.cn/20201223210847252.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="任务四：显示中文"><a href="#任务四：显示中文" class="headerlink" title="任务四：显示中文"></a>任务四：显示中文</h3><p>由于目前mind+还不支持显示中文，可以加载我的用户库进行显示。如果已经加载用户的小伙伴们可以不用加载了，如果没有加载的，可以看<strong>任务三</strong></p><p><strong><em>中文字模转换具体操作可以浏览<a href="https://gitee.com/hockel/chinese-display-for-maixduino">此帮助文档</a></em></strong><br><img src="https://img-blog.csdnimg.cn/20201223212030361.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>实验效果：</strong><br><img src="https://img-blog.csdnimg.cn/20201223212055646.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>通过本教程的学习，相信大家对Maixduino的LCD屏幕显示操作已经有了一定的了解了。如果不熟悉的同学可以反复阅读哈。更多教程欢迎大家浏览我的个人博客：<a href="http://www.hockel.club/">www.hockel.club</a></p>]]></content>
    
    
    <categories>
      
      <category>mind+</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maixduino</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Mind+玩转Maixduino系列0】工欲善其事必先利其器</title>
    <link href="/post/36528.html"/>
    <url>/post/36528.html</url>
    
    <content type="html"><![CDATA[<h1 id="【Mind-玩转Maixduino系列0】工欲善其事必先利其器"><a href="#【Mind-玩转Maixduino系列0】工欲善其事必先利其器" class="headerlink" title="【Mind+ 玩转Maixduino系列0】工欲善其事必先利其器"></a>【Mind+ 玩转Maixduino系列0】工欲善其事必先利其器</h1><p><img src="https://img-blog.csdnimg.cn/img_convert/70a98f2d01ab3736a4bf1546f1c2ed2c.png#pic_center" alt="在这里插入图片描述"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>【喜大普奔】在最新的mind+ 1.6.6版本更新中，我们可以看到了Mind+从1.6.6版本开始支持基于K210主控的Maixduino主控板，可满足对于K210开发有兴趣的用户。<br><img src="https://img-blog.csdnimg.cn/img_convert/be48557a0393eec51f7db705c78da485.png#pic_center" alt="在这里插入图片描述"><br>这里给mind+的研发团队加个鸡腿！之前做了几期【MaixPy 教程】从今天起开始编写有关Maixduino 的相关教程！</p><h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><p>工欲善其事，必先利其器 我们也知道在DF商城或者淘宝上购买的Maixduino套件是这样子的<br><img src="https://img-blog.csdnimg.cn/img_convert/87dc0c345cd72343a9b98a8ea13a4a92.png#pic_center" alt="在这里插入图片描述"><br>在日常学习中，难免会将摄像头、液晶屏的排线弄坏。所以我们在学习Maixduino之前，先给我们的Maixduino 穿上一套防护服。这里就需要用到3D打印机，没有3D打印机的小伙伴当然也可以去某宝3D代打。</p><h2 id="3D打印Maixduino外壳"><a href="#3D打印Maixduino外壳" class="headerlink" title="3D打印Maixduino外壳"></a>3D打印Maixduino外壳</h2><p>感谢komix 在T站发布的模型，如果有需要可以<a href="https://www.thingiverse.com/thing:3768964">在此链接</a>进行下载，模型我也会放置文末的附件中。<br><strong>①：对模型进行切片</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/53611d6277108b3e88524306e821b0a5.png#pic_center" alt="在这里插入图片描述"><br><strong>②：3D打印外壳</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/3539ba72a3317aef0c5da6506567df6c.png#pic_center" alt="在这里插入图片描述"></p><h2 id="开始组装"><a href="#开始组装" class="headerlink" title="开始组装"></a>开始组装</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/c4965e67952490e3ab1017c62654ecae.png#pic_center" alt="在这里插入图片描述"><br>1、开始组装液晶屏（这里组装液晶屏的时候，一定要小心，用力过猛，可能会失去一个屏幕。。。。）<br><img src="https://img-blog.csdnimg.cn/img_convert/aa17c79718351a97f9b5eaf444812105.png#pic_center" alt="在这里插入图片描述"><br>2、安装主控板（因为我手头上没有合适的扬声器，所以就可以打扬声器的结构件）<br><img src="https://img-blog.csdnimg.cn/img_convert/717db9adb3e6d5dce05e44a173062f41.png#pic_center" alt="在这里插入图片描述"><br>3、安装盖板和摄像头<br><img src="https://img-blog.csdnimg.cn/img_convert/415089057a78278df81c606f7b65bd6a.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/img_convert/f481d24e60722c4d7807db8b9a2245c7.png#pic_center" alt="在这里插入图片描述"></p><h2 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h2><p>1、打开Mind+，切换至上传模式，扩展库中选择主控板下的Maixduino后返回主界面<br><img src="https://img-blog.csdnimg.cn/img_convert/217efafedb6935a44e8f8640d42b8f6a.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/img_convert/00d72bfec19dc39da085c7e3c21348cc.png#pic_center" alt="在这里插入图片描述"><br>2、用Maixduino 显示一张图像。<br>首先准备一张TF卡，存一张我们的我们想要显示的照片（格式为：jpg格式，分辨率为：320 *  240，这里用了bmp, 和   png  格式都会报错）<br><strong>程序代码：</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/98eab3783563b28654103b540c276e93.png#pic_center" alt="在这里插入图片描述"><br><strong>实现效果：</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/dfa72ca9590cfadeb6dbbeaaab101eda.png#pic_center" alt="在这里插入图片描述"><br>更多有关Maixduino 的教程，敬请期待。更多教程欢迎访问个人博客：<a href="http://www.hockel.club/">www.hockel.club</a></p>]]></content>
    
    
    <categories>
      
      <category>mind+</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maixduino</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Maixduino】eps32 read adc failed 解决办法</title>
    <link href="/post/43192.html"/>
    <url>/post/43192.html</url>
    
    <content type="html"><![CDATA[<h1 id="【Maixduino】eps32-read-adc-failed-解决办法"><a href="#【Maixduino】eps32-read-adc-failed-解决办法" class="headerlink" title="【Maixduino】eps32 read adc failed 解决办法"></a>【Maixduino】eps32 read adc failed 解决办法</h1><p><img src="https://img-blog.csdnimg.cn/20200728102916830.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近做项目需要用到maixduino中的模拟引脚，但是下载了<a href="https://github.com/sipeed/MaixPy_scripts/blob/master/network/demo_esp32_read_adc.py">官方例程</a>显示报错：<br><img src="https://img-blog.csdnimg.cn/20200728102513971.jpg#pic_center" alt="在这里插入图片描述"><br>查找阅了<a href="https://github.com/sipeed/MaixPy/issues/148">相关资料</a>可能是esp32 固件与k210固件不兼容问题。重新刷新一下固件就可以解决了。</p><h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><p><a href="https://github.com/sipeed/kflash_gui/releases">下载kflash_gui</a><br><a href="https://www.espressif.com/zh-hans/support/download/other-tools">下载flash_download_tools</a><br><a href="https://github.com/sipeed/MaixPy/files/3514633/fixed_adc_fw.tar.gz">下载特定的固件</a></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>一、请使用kflash工具烧录下载后解开的mainxpy.bin：<br><img src="https://img-blog.csdnimg.cn/2020072810434886.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>二、接着再使用flash_download_tools将下载解开的NINA_W102-1.3.1.bin烧录到MaixDuino上一个ESP32：<br><img src="https://img-blog.csdnimg.cn/20200728104423717.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>注意：这里的com口要和之前刷入maixpy固件的com不同</strong><br>完成后，就可以使用以下程式测试ADC（MaixDuino的K210芯片和ESP32之间使用SPI传输资料，相关接脚可参考电路图）<br><img src="https://img-blog.csdnimg.cn/20200728104700786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> network<br><span class="hljs-keyword">import</span> utime<br><span class="hljs-keyword">from</span> Maix <span class="hljs-keyword">import</span> GPIO<br><span class="hljs-keyword">from</span> fpioa_manager <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment">#iomap at MaixDuino</span><br>fm.register(<span class="hljs-number">25</span>,fm.fpioa.GPIOHS10)<span class="hljs-comment">#cs</span><br>fm.register(<span class="hljs-number">8</span>,fm.fpioa.GPIOHS11)<span class="hljs-comment">#rst</span><br>fm.register(<span class="hljs-number">9</span>,fm.fpioa.GPIOHS12)<span class="hljs-comment">#rdy</span><br>fm.register(<span class="hljs-number">28</span>,fm.fpioa.GPIOHS13)<span class="hljs-comment">#mosi</span><br>fm.register(<span class="hljs-number">26</span>,fm.fpioa.GPIOHS14)<span class="hljs-comment">#miso</span><br>fm.register(<span class="hljs-number">27</span>,fm.fpioa.GPIOHS15)<span class="hljs-comment">#sclk</span><br><br>nic = network.ESP32_SPI(cs=fm.fpioa.GPIOHS10,rst=fm.fpioa.GPIOHS11,rdy=fm.fpioa.GPIOHS12,<br>mosi=fm.fpioa.GPIOHS13,miso=fm.fpioa.GPIOHS14,sclk=fm.fpioa.GPIOHS15)<br><br><span class="hljs-comment"># get ADC0 ADC1 ADC2</span><br>adc = nic.adc( (<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>) )<br>print(adc)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># get ADC0~5</span><br>        adc = nic.adc()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        print(e)<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> adc:<br>        print(<span class="hljs-string">&quot;%04d&quot;</span> %(v), end=<span class="hljs-string">&quot; &quot;</span>)<br>    print()<br>    utime.sleep_ms(<span class="hljs-number">50</span>)<br></code></pre></td></tr></table></figure><p>测试结果：<br><img src="https://img-blog.csdnimg.cn/20200728104921526.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这样问题就解决了，更多教程案例欢迎关注个人博客：<a href="https://www.hockel.club/">www.hockel.club</a></p>]]></content>
    
    
    <categories>
      
      <category>Maixduino</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maixduino</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【mind+用户库】模拟USB鼠标键盘扩展使用教程</title>
    <link href="/post/38470.html"/>
    <url>/post/38470.html</url>
    
    <content type="html"><![CDATA[<h1 id="【mind-用户库】模拟USB鼠标键盘扩展使用教程"><a href="#【mind-用户库】模拟USB鼠标键盘扩展使用教程" class="headerlink" title="【mind+用户库】模拟USB鼠标键盘扩展使用教程"></a>【mind+用户库】模拟USB鼠标键盘扩展使用教程</h1><p><img src="https://img-blog.csdnimg.cn/20200707174104330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本扩展仅支持leonardo开发板，原因是它的核心是mega32u4，芯片带了硬件的USB从机外设。而uno的核心mega328，硬件上并不带usb的外设（当然也有牛人用汇编操作IO模拟实现了低速USB通信：v-usb。个人能力有限就不做相关开发了）</p><p>本扩展模拟了usb鼠标和键盘：</p><ul><li>支持了鼠标点击，移动等操作</li><li>支持键盘输入等操作。<h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><h3 id="安装方法："><a href="#安装方法：" class="headerlink" title="安装方法："></a>安装方法：</h3>1、直接搜索导入（推荐）<br>这是最推荐的方式，在用户库中搜索 <strong><em>hockel</em></strong>，即可添加 MouseKeyboard扩展。<br><img src="https://img-blog.csdnimg.cn/20200702214640731.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2、网络加载方式安装：<br>打开mind+ 选择上传模式-&gt;用户库：在搜索栏中输入：<a href="https://gitee.com/hockel/MouseKeyboard">https://gitee.com/hockel/MouseKeyboard</a><br>回车后出现下图，双击导入即可。<br><img src="https://img-blog.csdnimg.cn/20200707175630584.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3、离线包安装<br>4*4矩阵键盘扩展库离线安装包下载地址:链接: 链接: 链接: <a href="https://pan.baidu.com/s/1UHSRUuAB4o6MYFVwV-InAA">https://pan.baidu.com/s/1UHSRUuAB4o6MYFVwV-InAA</a> 提取码: wbn9<br>首先下载离线安装包：hockel-keycoardmouse-thirdex-V0.0.1.mpext，将它保存到电脑任意位置，然后打开 Mind+ 软件，选择用户库，点击“导入文件”，如下图所示：<br><img src="https://img-blog.csdnimg.cn/20200630210051185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择刚刚下载的离线安装包hockel-keycoardmouse-thirdex-V0.0.1.mpext，点击打开即可：</li></ul><p><img src="https://img-blog.csdnimg.cn/2020070717581957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><a href="https://www.dfrobot.com.cn/goods-648.html">leonardo开发板</a></li><li><a href="https://www.dfrobot.com.cn/goods-117.html">JoyStick摇杆</a></li><li><a href="https://www.dfrobot.com.cn/goods-75.html">模拟环境光线传感器</a></li></ul><h2 id="积木列表"><a href="#积木列表" class="headerlink" title="积木列表"></a>积木列表</h2><p><img src="https://img-blog.csdnimg.cn/20200707174203601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h2><h3 id="硬件连接"><a href="#硬件连接" class="headerlink" title="硬件连接"></a>硬件连接</h3><p><img src="https://img-blog.csdnimg.cn/2020070717432594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="示例一：模拟鼠标移动点击操作"><a href="#示例一：模拟鼠标移动点击操作" class="headerlink" title="示例一：模拟鼠标移动点击操作"></a>示例一：模拟鼠标移动点击操作</h3><p><img src="https://img-blog.csdnimg.cn/20200707174225853.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>实验效果：</p><p>[video(video-5pBKKR5G-1594170326881)(type-youku)(url-<a href="https://player.youku.com/embed/XNDc0MTgxNTQ0NA==)(image-https://vthumb.ykimg.com/054804085F0441D500000152850EE89E)(title-%E6%A8%A1%E6%8B%9F%E9%BC%A0%E6%A0%87%E7%A7%BB%E5%8A%A8.mp4)]">https://player.youku.com/embed/XNDc0MTgxNTQ0NA==)(image-https://vthumb.ykimg.com/054804085F0441D500000152850EE89E)(title-模拟鼠标移动.mp4)]</a></p><h3 id="示例二：PPT翻页笔样例程序"><a href="#示例二：PPT翻页笔样例程序" class="headerlink" title="示例二：PPT翻页笔样例程序"></a>示例二：PPT翻页笔样例程序</h3><p><img src="https://img-blog.csdnimg.cn/20200707174353731.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>实验效果：</p><p>[video(video-zMPf7NEr-1594170299728)(type-youku)(url-<a href="https://player.youku.com/embed/XNDc0MTgxNDkxNg==)(image-https://vthumb.ykimg.com/054106015F0441A8000001716E089DFF)(title-PPT%E7%BF%BB%E9%A1%B5%E7%AC%94.mp4)]">https://player.youku.com/embed/XNDc0MTgxNDkxNg==)(image-https://vthumb.ykimg.com/054106015F0441A8000001716E089DFF)(title-PPT翻页笔.mp4)]</a></p><h3 id="硬件连接-1"><a href="#硬件连接-1" class="headerlink" title="硬件连接"></a>硬件连接</h3><p><img src="https://img-blog.csdnimg.cn/20200708104414603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="示例三：小恐龙游戏"><a href="#示例三：小恐龙游戏" class="headerlink" title="示例三：小恐龙游戏"></a>示例三：小恐龙游戏</h3><p>打开Google浏览器输入：chrome://dino 即可开玩啦。（这里只用了一个光线传感器，所以对翼龙那关没有用，需要再加传感器）<br><img src="https://img-blog.csdnimg.cn/20200707174428410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>实验效果：</p><p>[video(video-J6bqTLFk-1594115233332)(type-youku)(url-<a href="https://player.youku.com/embed/XNDc0MTU4MzI3Ng==)(image-https://vthumb.ykimg.com/054806015F0421BE00000140BF04CCA8)(title-mind+%E7%8E%A9%E8%BD%AC%E5%B0%8F%E6%81%90%E9%BE%99.mp4)]">https://player.youku.com/embed/XNDc0MTU4MzI3Ng==)(image-https://vthumb.ykimg.com/054806015F0421BE00000140BF04CCA8)(title-mind+玩转小恐龙.mp4)]</a></p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul><li>本项目加载链接:<code>https://gitee.com/hockel/MouseKeyboard</code></li><li>4*4 矩阵键盘库：<code>https://gitee.com/hockel/keypad</code></li><li>AFMotor电机扩展板库：<code>https://gitee.com/hockel/AFMotor</code></li><li>用户库教程链接: <code>https://mindplus.dfrobot.com.cn/extensions-user</code><h2 id="支持列表"><a href="#支持列表" class="headerlink" title="支持列表"></a>支持列表</h2></li></ul><table><thead><tr><th>主板型号</th><th align="center">实时模式</th><th align="center">ArduinoC</th><th align="center">MicroPython</th><th>备注</th></tr></thead><tbody><tr><td>leonardo</td><td align="center"></td><td align="center">√</td><td align="center"></td><td></td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过本次教程，想必大家对此扩展库有了更深入的了解，期待更多创意更好的创意。更多教程案例欢迎访问个人博客：<a href="https://www.hockel.club/">www.hockel.club</a></p>]]></content>
    
    
    <categories>
      
      <category>mind+</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mind+</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【MaixPY 教程】用mixly玩转k210——条形码、二维码、AprilTag识别</title>
    <link href="/post/35330.html"/>
    <url>/post/35330.html</url>
    
    <content type="html"><![CDATA[<h1 id="【MaixPY-教程】用mixly玩转k210——条形码、二维码、AprilTag识别"><a href="#【MaixPY-教程】用mixly玩转k210——条形码、二维码、AprilTag识别" class="headerlink" title="【MaixPY 教程】用mixly玩转k210——条形码、二维码、AprilTag识别"></a>【MaixPY 教程】用mixly玩转k210——条形码、二维码、AprilTag识别</h1><p><img src="https://img-blog.csdnimg.cn/20200707162605272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>【MaixPy系列教程：】</p><ul><li><a href="https://blog.csdn.net/tonycarson/article/details/105717060">【MaixPy教程】用maixHub训练模型进行开源硬件识别</a></li><li><a href="https://blog.csdn.net/tonycarson/article/details/105744677">【MaixPy 教程】用mixly玩转K210——口罩识别</a></li><li><a href="https://blog.csdn.net/tonycarson/article/details/105756452">【MaixPy教程】用mixly玩转K210——调用AI_OneNET API实现车牌识别</a></li><li><a href="https://blog.csdn.net/tonycarson/article/details/105808550">【MaixPy 教程】用mixly玩转K210——人脸追踪</a></li><li><a href="https://blog.csdn.net/tonycarson/article/details/105833640">【MaixPy 教程】用mixly玩转K210——20类对象检测</a></li><li><a href="https://blog.csdn.net/tonycarson/article/details/105999352">【MaixPy 教程】用mixly玩转K210——一键本地模型训练</a></li><li> <a href="https://blog.csdn.net/tonycarson/article/details/106024259">【MaixPY 教程】用mixly玩转k210——MixNo通过TCP/IP与掌控板进行通讯</a></li><li><a href="https://blog.csdn.net/tonycarson/article/details/107184245">【MaixPY 教程】用mixly玩转k210——条形码、二维码、AprilTag识别</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着科技的发展，移动支付让人们的生活变得越来越便捷，可是与之背后的原理我们又了解多少呢？那么今天就让我带领大家一起用milxy一起去实现：条形码、二维码、AprilTag识别。</p><h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><ul><li><a href="https://www.dfrobot.com.cn/goods-2592.html"> Maixduino</a></li><li>typec 数据线</li><li>条形码、二维码、Apriltag码若干</li></ul><h2 id="条形码"><a href="#条形码" class="headerlink" title="条形码"></a>条形码</h2><h3 id="1：什么是条形码"><a href="#1：什么是条形码" class="headerlink" title="1：什么是条形码"></a>1：什么是条形码</h3><p>条形码(barcode)是将宽度不等的多个黑条和空白，按照一定的编码规则排列，用以表达一组信息的图形标识符。常见的条形码是由反射率相差很大的黑条（简称条）和白条（简称空）排成的平行线图案。条形码可以标出物品的生产国、制造厂家、商品名称、生产日期、图书分类号、邮件起止地点、类别、日期等许多信息，因而在商品流通、图书管理、邮政管理、银行系统等许多领域都得到广泛的应用</p><h3 id="2：条形码识别原理"><a href="#2：条形码识别原理" class="headerlink" title="2：条形码识别原理"></a>2：条形码识别原理</h3><p>条码符号是由反射率不同的“条”、“空”按照一定的编码规则组合起来的一种信息符号。由于条码符号中“条”、“空”对光线具有不同的反射率，从而使条码扫描器接受到强弱不同的反射光信号，相应地产生电位高低不同的电脉冲。而条码符号中“条”、“空”的宽度则决定电位高低不同的电脉冲信号的长短。扫描器接收到的光信号需要经光电转换成电信号并通过放大电路进行放大。由于扫描光点具有一定的尺寸、条码印刷时的边缘模糊性以及一些其他原因，经过电路放大的条码电信号是一种平滑的起伏信号，这种信号被称为“模拟电信号”。“模拟电信号”需经整形变成通常的“数字信号”。根据码制所对应的编码规则，译码器便可将“数字信号”识读译成数字、字符信息</p><h3 id="3-BarCode类"><a href="#3-BarCode类" class="headerlink" title="3:BarCode类"></a>3:BarCode类</h3><p>MaixPy固件中的内置库image库内置了BarCode类，专门用于识别条形码。其中他的方法有：</p><table><thead><tr><th>方法名称</th><th>功能</th></tr></thead><tbody><tr><td>barcode.corners()</td><td>返回一个由该对象的四个角组成的四个元组(x,y)的列表。四个角通常是按照从左上角开始沿顺时针顺序返回的。</td></tr><tr><td>barcode.rect()</td><td>返回一个矩形元组(x, y, w, h)，用于如数据矩阵的边界框的 image.draw_rectangle 等其他的 image 方法。</td></tr><tr><td>barcode.x()</td><td>返回条形码的边界框的x坐标(int)</td></tr><tr><td>barcode.y()</td><td>返回条形码的边界框的y坐标(int)。</td></tr><tr><td>barcode.w()</td><td>返回条形码的边界框的w宽度(int)</td></tr><tr><td>barcode.h()</td><td>返回条形码的边界框的h高度(int)。</td></tr><tr><td>barcode.payload()</td><td>返回条形码的有效载荷的字符串。例：数量。</td></tr><tr><td>barcode.type()</td><td>返回条形码的列举类型 (int)</td></tr><tr><td>barcode.rotation()</td><td>返回以弧度计的条形码的旋度(浮点数)</td></tr><tr><td>barcode.quality()</td><td>返回条形码在图像中被检测到的次数(int)</td></tr><tr><td>mixly中也有相应的条形码识别积木块在机器视觉中维码识别中如下图所示：</td><td></td></tr><tr><td><img src="https://img-blog.csdnimg.cn/20200707163301101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></td><td></td></tr></tbody></table><h3 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h3><p><img src="https://img-blog.csdnimg.cn/20200707163249474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> sensor<br><span class="hljs-attribute">import</span> machine<br><span class="hljs-attribute">import</span> image<br><br><br><span class="hljs-attribute">sensor</span>.reset()<br><span class="hljs-attribute">sensor</span>.set_pixformat(sensor.RGB<span class="hljs-number">565</span>)<br><span class="hljs-attribute">sensor</span>.set_framesize(sensor.QVGA)<br><span class="hljs-attribute">sensor</span>.run(<span class="hljs-number">1</span>)<br><span class="hljs-attribute">sensor</span>.skip_frames(<span class="hljs-number">10</span>)<br><span class="hljs-attribute">while</span> True:<br>    <span class="hljs-attribute">img</span> = sensor.snapshot()<br>    <span class="hljs-attribute">code</span> = img.find_barcodes([<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">320</span>,<span class="hljs-number">240</span>])<br>    <span class="hljs-attribute">for</span> i in code:<br>        <span class="hljs-attribute">code_text</span> = i.payload()<br>        <span class="hljs-attribute">print</span>(code_text)<br><br></code></pre></td></tr></table></figure><p>实验结果：<br><img src="https://img-blog.csdnimg.cn/2020070716332397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h2><h3 id="1：什么是二维码"><a href="#1：什么是二维码" class="headerlink" title="1：什么是二维码"></a>1：什么是二维码</h3><p>二维码又称二维条码，常见的二维码为QR Code，QR全称Quick Response，是一个近几年来移动设备上超流行的一种编码方式，它比传统的Bar Code条形码能存更多的信息，也能表示更多的数据类型。</p><h3 id="2：二维码的分类"><a href="#2：二维码的分类" class="headerlink" title="2：二维码的分类"></a>2：二维码的分类</h3><p>二维码，从字面上看就是用两个维度（水平方向和垂直方向）来进行数据的编码，条形码只利用了一个维度（水平方向）表示信息，在另一个维度(垂直方向)没有意义，所以二维码比条形码有着更高的数据存储容量。</p><p>从形成方式上，二维码可以分为两类，</p><p>1、堆叠式二维码：在一维条形码的基础上，将多个条形码堆积在一起进行编码，常见的编码标准有PDF417等</p><p><img src="https://img-blog.csdnimg.cn/20200707163352964.png#pic_center" alt="在这里插入图片描述"><br>2、矩阵式二维码:在一个矩阵空间中通过黑色和白色的方块进行信息的表示，黑色的方块表示1，白色的方块表示0，相应的组合表示了一系列的信息，常见的编码标准有QR 码，汉信码等<br><img src="https://img-blog.csdnimg.cn/20200707163415378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gauss">PDF417由美国研发，在美国地区使用广泛<br>汉信码由中国自主研发，目前已在政府相关领域得到初步的使用。<br><span class="hljs-built_in">QR</span>码由日本研发，目前很多的应用都是用<span class="hljs-built_in">QR</span>码进行编码，译码（目前使用最广的是<span class="hljs-built_in">QR</span>码，所以接下来的内容会对<span class="hljs-built_in">QR</span>码进行讲解）<br></code></pre></td></tr></table></figure><h3 id="3：二维码的结构"><a href="#3：二维码的结构" class="headerlink" title="3：二维码的结构"></a>3：二维码的结构</h3><p>一个二维码可以分为两个部分，功能图形和编码区域<br><img src="https://img-blog.csdnimg.cn/2020070716342839.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>功能图形起到定位的作用</p><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>位置探测图形</td><td>由三个黑白相间的大正方形嵌套组成，分别位于二维码左上角、右上角、左下角，目的是为了确定二维码的大小和位置。</td></tr><tr><td>定位图形</td><td>由两条黑白相间的直线组成，便于确定二维码的角度，纠正扭曲。</td></tr><tr><td>校正图形</td><td>仅在版本2以上存在，由三个黑白相间的小正方形嵌套组成，便于确定中心，纠正扭曲。</td></tr><tr><td>数据区记录了具体的数据信息，纠错信息与版本信息</td><td></td></tr></tbody></table><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>数据和纠错码</td><td>记录了数据信息和相应的纠错码，纠错码的存在使得当二维码的数据出现允许范围内的错误时，也可以正确解码。</td></tr><tr><td>版本信息</td><td>仅在版本7以上存在，记录具体的版本信息。</td></tr><tr><td>格式信息</td><td>记录使用的掩码和纠错等级。</td></tr><tr><td>此外二维码的外围还留有一圈空白区，主要是为了便于识别而存在。</td><td></td></tr></tbody></table><h2 id="4：QRCode类"><a href="#4：QRCode类" class="headerlink" title="4：QRCode类"></a>4：QRCode类</h2><p>MaixPy固件中的内置库image库内置了QRCode类，专门用于识别二位码。其中它的方法有：</p><table><thead><tr><th>方法名称</th><th>作用</th></tr></thead><tbody><tr><td>qrcode.corners()</td><td>返回一个由该对象的四个角组成的四个元组(x,y)的列表。四个角通常是按照从左上角开始沿顺时针顺序返回的。</td></tr><tr><td>qrcode.rect()</td><td>返回一个矩形元组(x, y, w, h)，用于如二维码的边界框的 image.draw_rectangle 等其他的 image 方法。</td></tr><tr><td>qrcode.x()</td><td>返回二维码的边界框的x坐标(int)</td></tr><tr><td>qrcode.y()</td><td>返回二维码的边界框的y坐标(int)。</td></tr><tr><td>qrcode.w()</td><td>返回二维码的边界框的w坐标(int)。</td></tr><tr><td>qrcode.h()</td><td>返回二维码的边界框的h坐标(int)。</td></tr><tr><td>qrcode.payload()</td><td>返回二维码有效载荷的字符串，例如URL 。</td></tr><tr><td>qrcode.version()</td><td>返回二维码的版本号(int)。</td></tr><tr><td>qrcode.ecc_level()</td><td>返回二维码的ECC水平(int)。</td></tr><tr><td>qrcode.data_type()</td><td>返回二维码的数据类型。</td></tr><tr><td>qrcode.eci()</td><td>返回二维码的ECI。ECI储存了QR码中存储数据字节的编码。若您想要处理包含超过标准ASCII文本的二维码，您需要查看这一数值。</td></tr><tr><td>qrcode.is_numeric()</td><td>若二维码的数据类型为数字式，则返回True</td></tr><tr><td>qrcode.is_alphanumeric()</td><td>若二维码的数据类型为文字数字式，则返回True。</td></tr><tr><td>qrcode.is_binary()</td><td>若二维码的数据类型为二进制式，则返回True</td></tr><tr><td>qrcode.is_kanji()</td><td>若二维码的数据类型为日本汉字，则返回True</td></tr><tr><td>mixly中也有相应的条形码识别积木块在机器视觉中维码识别中如下图所示：</td><td></td></tr><tr><td><img src="https://img-blog.csdnimg.cn/20200707163445998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></td><td></td></tr></tbody></table><h3 id="示例程序-1"><a href="#示例程序-1" class="headerlink" title="示例程序"></a>示例程序</h3><p><img src="https://img-blog.csdnimg.cn/20200707163500188.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>程序代码</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> sensor<br><span class="hljs-attribute">import</span> machine<br><span class="hljs-attribute">import</span> image<br><br><br><span class="hljs-attribute">sensor</span>.reset()<br><span class="hljs-attribute">sensor</span>.set_pixformat(sensor.RGB<span class="hljs-number">565</span>)<br><span class="hljs-attribute">sensor</span>.set_framesize(sensor.QVGA)<br><span class="hljs-attribute">sensor</span>.run(<span class="hljs-number">1</span>)<br><span class="hljs-attribute">sensor</span>.skip_frames(<span class="hljs-number">10</span>)<br><span class="hljs-attribute">sensor</span>.set_hmirror(<span class="hljs-number">0</span>)<br><span class="hljs-attribute">while</span> True:<br>    <span class="hljs-attribute">img</span> = sensor.snapshot()<br>    <span class="hljs-attribute">code</span> = img.find_qrcodes([<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">320</span>,<span class="hljs-number">240</span>])<br>    <span class="hljs-attribute">for</span> i in code:<br>        <span class="hljs-attribute">code_text</span> = i.payload()<br>        <span class="hljs-attribute">print</span>(code_text)<br></code></pre></td></tr></table></figure><p>实验结果：<br>可以用<a href="https://cli.im/">草料二维码生成器</a>在线生成我们想要的内容。<br><img src="https://img-blog.csdnimg.cn/20200707163515294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="AprilTag"><a href="#AprilTag" class="headerlink" title="AprilTag"></a>AprilTag</h2><h3 id="1：什么是AprilTag？"><a href="#1：什么是AprilTag？" class="headerlink" title="1：什么是AprilTag？"></a>1：什么是AprilTag？</h3><p>AprilTags是基准标记的一种流行形式。它在机器人技术中具有广泛的应用，包括对象跟踪，视觉定位，SLAM准确性评估和人机交互。Isaac通过利用GPU加速同时实现高解码鲁棒性来提供实时AprilTag检测。</p><h3 id="2：和条形码二维码的区别"><a href="#2：和条形码二维码的区别" class="headerlink" title="2：和条形码二维码的区别"></a>2：和条形码二维码的区别</h3><p>AprilTag标记在机器视觉中显得比条形码、二维码更加有用，因为它能够通过AprilTag检测程序可以计算相对于相机的精确3D位置，方向和id；真实世界中的3D位置对于机器来说非常有用！AprilTag常用于各种任务，包括AR，机器人和相机校准。</p><h3 id="3：Apriltag生成"><a href="#3：Apriltag生成" class="headerlink" title="3：Apriltag生成"></a>3：Apriltag生成</h3><p>MaixPy IDE 中在工具-》机器视觉选择中有不同码的生成如下图<br><img src="https://img-blog.csdnimg.cn/20200707163605574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如果用的老师用二哈觉得官方给的标签可以用这个生成哦。</p><h3 id="4：AprilTag类"><a href="#4：AprilTag类" class="headerlink" title="4：AprilTag类"></a>4：AprilTag类</h3><table><thead><tr><th>方法名称</th><th>作用</th></tr></thead><tbody><tr><td>apriltag.corners()</td><td>返回一个由该对象的四个角组成的四个元组(x,y)的列表。</td></tr><tr><td>apriltag.rect()</td><td>返回一个矩形元组(x, y, w, h)，用于如AprilTag边界框的 image.draw_rectangle 等其他的 image 方法</td></tr><tr><td>apriltag.x()</td><td>返回AprilTag边界框的x坐标(int)。</td></tr><tr><td>apriltag.y()</td><td>返回AprilTag边界框的y坐标(int)。</td></tr><tr><td>apriltag.w()</td><td>返回AprilTag边界框的w坐标(int)。</td></tr><tr><td>apriltag.h()</td><td>返回AprilTag边界框的h坐标(int)。</td></tr><tr><td>apriltag.id()</td><td>返回AprilTag的数字ID。</td></tr><tr><td>apriltag.family()</td><td>返回AprilTag的数字家庭。</td></tr><tr><td>apriltag.cx()</td><td>返回AprilTag的中心x位置(int)。</td></tr><tr><td>apriltag.cy()</td><td>返回AprilTag的中心y位置(int)。</td></tr><tr><td>apriltag.rotation()</td><td>返回以弧度计的AprilTag的旋度(int)。</td></tr><tr><td>apriltag.decision_margin()</td><td>返回AprilTag匹配的色饱和度（取值0.0 - 1.0），其中1.0为最佳。</td></tr><tr><td>apriltag.hamming()</td><td>返回AprilTag的可接受的数位误差数值。</td></tr><tr><td>apriltag.goodness()</td><td>返回AprilTag图像的色饱和度（取值0.0 - 1.0），其中1.0为最佳。</td></tr><tr><td>apriltag.x_translation()</td><td>返回距离摄像机x方向的变换，距离的单位未知。</td></tr><tr><td>apriltag.y_translation()</td><td>返回距离摄像机y方向的变换，距离的单位未知。</td></tr><tr><td>apriltag.z_translation()</td><td>返回距离摄像机z方向的变换，距离的单位未知。</td></tr><tr><td>apriltag.x_rotation()</td><td>返回以弧度计的AprilTag在X平面上的旋度。例：目视AprilTag，从左至右移动摄像头。</td></tr><tr><td>apriltag.y_rotation()</td><td>返回以弧度计的AprilTag在Y平面上的旋度。例：目视AprilTag，从上至下移动摄像头。</td></tr><tr><td>apriltag.z_rotation()</td><td>返回以弧度计的AprilTag在Z平面上的旋度。例：目视AprilTag，旋转摄像头。</td></tr><tr><td>mixly中也有相应的AprilTag识别积木块在机器视觉中维码识别中如下图所示：</td><td></td></tr><tr><td><img src="https://img-blog.csdnimg.cn/20200707163532581.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></td><td></td></tr></tbody></table><h2 id="示例程序-2"><a href="#示例程序-2" class="headerlink" title="示例程序"></a>示例程序</h2><p><img src="https://img-blog.csdnimg.cn/20200707163621794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>*<strong>考虑到识别性能问题，我们应该设计摄像头的帧大小为：160<em>120，同样ArilTag识别图像区域同样为：0,0,160,120</em></strong><br>程序代码</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> sensor<br><span class="hljs-attribute">import</span> machine<br><span class="hljs-attribute">import</span> image<br><br><br><span class="hljs-attribute">sensor</span>.reset()<br><span class="hljs-attribute">sensor</span>.set_pixformat(sensor.RGB<span class="hljs-number">565</span>)<br><span class="hljs-attribute">sensor</span>.set_framesize(sensor.QQVGA)<br><span class="hljs-attribute">sensor</span>.run(<span class="hljs-number">1</span>)<br><span class="hljs-attribute">sensor</span>.skip_frames(<span class="hljs-number">10</span>)<br><span class="hljs-attribute">sensor</span>.set_hmirror(<span class="hljs-number">0</span>)<br><span class="hljs-attribute">while</span> True:<br>    <span class="hljs-attribute">img</span> = sensor.snapshot()<br>    <span class="hljs-attribute">code</span> = img.find_apriltags([<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">160</span>,<span class="hljs-number">120</span>])<br>    <span class="hljs-attribute">for</span> i in code:<br>        <span class="hljs-attribute">code_text</span> = i.id()<br>        <span class="hljs-attribute">print</span>(code_text)<br><br></code></pre></td></tr></table></figure><p>实验结果：<br><img src="https://img-blog.csdnimg.cn/20200707163638587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过本次的教程，想必大家都对标签识别都有了一定的了解了吧，应用功能请参考下一篇：标签识别音乐播放器。敬请期待！！更多教程欢迎访问个人博客：<a href="http://www.hockel.club/">www.hockel.club</a> 有问题的可以加入【MixNo QQ群：1056344043】</p>]]></content>
    
    
    <categories>
      
      <category>MaixPy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MaixPy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【mind+用户库】AFMotor电机驱动扣展板使用教程</title>
    <link href="/post/31977.html"/>
    <url>/post/31977.html</url>
    
    <content type="html"><![CDATA[<h1 id="【mind-用户库】AFMotor电机驱动扣展板使用教程"><a href="#【mind-用户库】AFMotor电机驱动扣展板使用教程" class="headerlink" title="【mind+用户库】AFMotor电机驱动扣展板使用教程"></a>【mind+用户库】AFMotor电机驱动扣展板使用教程</h1><p><img src="https://img-blog.csdnimg.cn/20200702205455913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>电机扩展板作为Arduino平台最为流行的扩展板之一具有连接便利，功能丰富的特点。之前一直想在mind+平台使用这款电机扩展板，可惜官方一直没用出，学会了怎么编写用户库，只能自给自足了！本教程主要向读者介绍一下：AFMotor用户库的使用方法。</p><h3 id="AFMOTOR电机扩展板主要功能特点"><a href="#AFMOTOR电机扩展板主要功能特点" class="headerlink" title="AFMOTOR电机扩展板主要功能特点"></a>AFMOTOR电机扩展板主要功能特点</h3><ul><li>可最多驱动4个模型直流电机</li><li>可最多驱动2个28BYJ-48步进电机</li><li>可最多驱动2个舵机（Arduino的9号和10号引脚来驱动舵机）</li><li>板载两块L293D芯片负责电机驱动的核心工作</li><li>可配合Arduino Uno/Mega开发板使用（本扩展主要针对Uno开发板进行开发）</li></ul><h3 id="端口介绍"><a href="#端口介绍" class="headerlink" title="端口介绍"></a>端口介绍</h3><p><img src="https://img-blog.csdnimg.cn/20200702213353509.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="外接电源供电"><a href="#外接电源供电" class="headerlink" title="外接电源供电"></a>外接电源供电</h4><p>如下图所示，AFMotor电机扩展板上配有外接电源接口。该接口所连接的直流电源可以为电机和Arduino开发板供电。<br><img src="https://img-blog.csdnimg.cn/20200702213419532.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>使用AFMotor电机扩展板驱动电机时，首要考虑的问题就是如何为扩展板供电。如果电源输出功率达不到驱动电机的要求，那么电机是无法正常工作的。在考虑如何选择电源时，我们需要重点关注两个方面 ，一个是电源电压，一个是电源电流。</p><p><strong><em>注意：外接电源极性千万不要接反，否则会对扩展板造成损坏！</em></strong></p><h4 id="外接电源电压要求"><a href="#外接电源电压要求" class="headerlink" title="外接电源电压要求"></a>外接电源电压要求</h4><p>AFMotor扩展板中起关键作用的芯片是L293D。该芯片所允许的直流电源电压范围是4.5V ～25V。因此AFMotor扩展板外接电源接口允许我们连接的电源也是4.5V ～25V。请注意：这是一个很宽泛的电压指标。具体我们应该连接的电源电压有多大，这是由被驱动的电机工作电压来决定的。</p><h4 id="外接电源电流要求"><a href="#外接电源电流要求" class="headerlink" title="外接电源电流要求"></a>外接电源电流要求</h4><p>与上面提到的电源电压要求相同，外接电源的电流要求也是由被驱动的电机来决定的。通常我们使用AFMotor电机扩展板所驱动的电机就是普通的模型电机（如以上电源讲解中的图片所示）。对于这一类型的电机，它们的工作电流大约是500mA左右，因此我们只要为扩展板配一个500 mA～1000 mA的外接电源就足够了。请注意，假如您所驱动的电机工作电流超过500mA，那么就要考虑为扩展板上的L293D加装芯片了。</p><h3 id="扩展板跳线的作用"><a href="#扩展板跳线的作用" class="headerlink" title="扩展板跳线的作用"></a>扩展板跳线的作用</h3><p>在以上两种工作方式里，我们对电机扩展板上的跳线采取了不同的操作方法。该跳线的作用是控制Arduino开发板是否通过外接电源来供电。当跳线移除的时候，外接电源不会为Arduino开发板供电。相反当跳线安置在插针上，外接电源将会为Arduino供电。</p><p>因此在程序开发过程中，当Arduino与电脑通过USB线连接时，我们需要将跳线从插针上移除。假如我们不移除该跳线，Arduino会有两路供电。而这两路电源同时工作会产生问题，严重的可能会造成开发板以及扩展板的损坏。</p><h3 id="关于直流电机引线"><a href="#关于直流电机引线" class="headerlink" title="关于直流电机引线"></a>关于直流电机引线</h3><p>可能有些朋友会感到好奇，直流电机有两根引线，这两根引线在连接到AFMotor扩展板电机端口时有没有顺序呢？这个问题的答案是“既有顺序也无顺序”。</p><p>如果您只是单纯的想要让电机转起来，那么这两根引线连接到扩展板端口上是没有顺序的。但如果您发现电机旋转的方向与您所期待的相反，您可以将这两根电机引线从扩展板上断开，然后交换顺序再接到扩展板端子上，这时您会看到电机旋转的方向就反过来了。</p><h3 id="未占用的引脚"><a href="#未占用的引脚" class="headerlink" title="未占用的引脚"></a>未占用的引脚</h3><p>Arduino开发板的模拟输入输出引脚(A0~A5)没有被AFMotor扩展板所占用。<br>Arduino引脚2 和引脚13都没有被AFMotor电机扩展板所占用。如果您手中有AFMotor扩展板，您可以在扩展板的正面靠近2号引脚的位置找到一个没有焊接插针的预留孔。这个预留孔就是用于焊接额外插针以便于您使用引脚2的。与上面所提到的模拟引脚一样，引脚2预留孔也没有预先焊好插针。如果要用到此引脚，需要您自行焊接插针。</p><p>引脚13虽然没有被AFMotor扩展板占用，但是扩展板上没有将该引脚引出。使用引脚13需要您自行焊接额外引线才能使用。</p><p>（–转自<a href="http://www.taichi-maker.com/homepage/reference-index/motor-reference-index/arduino-motor-shield/#overview">太极创客网站</a>）</p><h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><h3 id="安装方法："><a href="#安装方法：" class="headerlink" title="安装方法："></a>安装方法：</h3><p>1、直接搜索导入（推荐）<br>这是最推荐的方式，在用户库中搜索“hockel”，即可添加 AFMotor模块。<br><img src="https://img-blog.csdnimg.cn/20200702214640731.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2、网络加载方式安装：<br>打开mind+ 选择上传模式-&gt;用户库：在搜索栏中输入：<a href="https://gitee.com/hockel/AFMotor">https://gitee.com/hockel/AFMotor</a><br>回车后出现下图，双击导入即可。<br><img src="https://img-blog.csdnimg.cn/20200702214614668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3、离线包安装<br>4*4矩阵键盘扩展库离线安装包下载地址:链接: 链接: <a href="https://pan.baidu.com/s/1HAOcWVSSuym-isQ64Qr7RQ">https://pan.baidu.com/s/1HAOcWVSSuym-isQ64Qr7RQ</a> 提取码: 5ie6<br>首先下载离线安装包：hockel-afmotor-thirdex-V0.0.1.mpext，将它保存到电脑任意位置，然后打开 Mind+ 软件，选择用户库，点击“导入文件”，如下图所示：<br><img src="https://img-blog.csdnimg.cn/20200630210051185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择刚刚下载的离线安装包hockel-afmotor-thirdex-V0.0.1.mpext，点击打开即可：<br><img src="https://img-blog.csdnimg.cn/20200702214230386.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><a href="https://detail.tmall.com/item.htm?id=580795238929&ali_refid=a3_430582_1006:1109448581:N:MJSkpcdh8pY2BD45j63tzwjnDNn/ozCN:ffc46a9758d6e460a8a74f9ccf98615c&ali_trackid=1_ffc46a9758d6e460a8a74f9ccf98615c&spm=a230r.1.14.6&skuId=3871792768564">Arduino UNO R3 主控板 </a></li><li><a href="https://detail.tmall.com/item.htm?spm=a230r.1.0.0.6b55e18a7VFbxq&id=608609621983&ns=1">AFMotor电机扩展板</a></li><li><a href="https://detail.tmall.com/item.htm?spm=a230r.1.14.23.3c45467b97EsSw&id=600108071245&ns=1&abbucket=6">TT马达*4</a></li></ul><h2 id="积木列表"><a href="#积木列表" class="headerlink" title="积木列表"></a>积木列表</h2><p><img src="https://img-blog.csdnimg.cn/20200702220641131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="示例程序（驱动4个电机）"><a href="#示例程序（驱动4个电机）" class="headerlink" title="示例程序（驱动4个电机）"></a>示例程序（驱动4个电机）</h2><h2 id="电路连接"><a href="#电路连接" class="headerlink" title="电路连接"></a>电路连接</h2><p><img src="https://img-blog.csdnimg.cn/20200702215514955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><a href="https://detail.tmall.com/item.htm?spm=a230r.1.14.23.3c45467b97EsSw&amp;id=600108071245&amp;ns=1&amp;abbucket=6">https://detail.tmall.com/item.htm?spm=a230r.1.14.23.3c45467b97EsSw&amp;id=600108071245&amp;ns=1&amp;abbucket=6</a></p><p>在开发时，Arduino的电源是由电脑通过USB线提供的。但由于电机运行所需的电源功率远远超过Arduino能提供的电源功率，因此Arduino是无法为电机供电的。要想让电机获得充足的电源供应，我们就需要在扩展板的外接电源端口接上直流电源来为电机供电。在这种情况下，扩展板上的跳线一定要移除。否则可能会损坏Arduino开发板以及电机扩展板！**<em>请务必注意！**</em></p><p>另外，当扩展板上的跳线没有安置插针时，如果我们不给扩展板外接电源，而只是将Arduino开发板连接在电脑USB端口上。由于Arduino开发板输出的电能远远无法满足电机正常运行的要求，所以虽然看到电机也在动，但是动起来很没有力气。要想让电机以正常的方式运行，还是需要给扩展板连接外接直流电源的，这样电机才有充足的动力来运行。</p><h2 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h2><p><img src="https://img-blog.csdnimg.cn/20200702220354838.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="示例程序（驱动2个步进电机）"><a href="#示例程序（驱动2个步进电机）" class="headerlink" title="示例程序（驱动2个步进电机）"></a>示例程序（驱动2个步进电机）</h2><h3 id="电路连接-1"><a href="#电路连接-1" class="headerlink" title="电路连接"></a>电路连接</h3><p><img src="https://img-blog.csdnimg.cn/20200702220534291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="程序代码-1"><a href="#程序代码-1" class="headerlink" title="程序代码"></a>程序代码</h3><p><img src="https://img-blog.csdnimg.cn/20200702220804877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>相关积木介绍：</strong></p><p><strong>步进电机初始化积木块</strong>：后面括号中的两个参数分别代表了步进电机旋转一周的步数以及步进电机连接在扩展板上的端口号。如AF_Stepper motor1(2048, 1)语句中参数2048代表motor1旋转一周需要走2048步。假如您的电机旋转一周需要32步，那么请在第一个参数位置输入32这一数字参数。<br> 括号中第二个参数1代表motor1连接在M1和M2端口。对于motor2对象，它括号中的参数2代表motor2连接在M3和M4端口。<br> 第三个参数：AFMotor的onestep库函数运行模式:</p><ul><li>SINGLE - 全步进模式（单线圈）。电机每走一步，扩展板只给一相线圈供电。</li><li>DOUBLE - 全步进模式（双线圈）。电机每走一步，扩展板会同时给两相线圈供电。<pre><code>   此模式运行的电机比SINGLE模式下的扭矩要更大，但是电机耗电也会更多。</code></pre>INTERLEAVE - 半步进模式。这种模式是SINGLE和DOUBLE的混合。电机每走一步，扩展板对线圈供电方式<pre><code>       在一相和两相之间交替切换。举例来说，电机走第一步时，只有一相线圈通电。       走第二步时，会有两相线圈供电，然后又是一相，再两相......这样交替通电。       这种控制模式的优点是电机运行更流畅，但是缺点是运行速度大打折扣。</code></pre></li><li>MICROSTEP - 微步进模式。此模式下的电机运行更光滑，但缺点是扭矩会打折扣。   </li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>只针对了常用积木块写了简单的教程，更多玩法其他创客老师自行开发。最新教程欢迎关注个人博客：<a href="http://www.hockel.club�www.hockel.club">www.hockel.club�www.hockel.club</a></p>]]></content>
    
    
    <categories>
      
      <category>mind+</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AFmotor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【mind+用户库】4*4矩阵键盘使用教程</title>
    <link href="/post/9043.html"/>
    <url>/post/9043.html</url>
    
    <content type="html"><![CDATA[<h1 id="【mind-用户库编写】4-4矩阵键盘使用教程"><a href="#【mind-用户库编写】4-4矩阵键盘使用教程" class="headerlink" title="【mind+用户库编写】4*4矩阵键盘使用教程"></a>【mind+用户库编写】4*4矩阵键盘使用教程</h1><p><img src="https://img-blog.csdnimg.cn/20200630203736651.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前用mind+做项目一直想用4<em>4矩阵键盘，可惜一直没用出！欣慰的是没有自从mind+1.6.2出来以后，添加了自定义用户库功能，让mind+可扩展性更大了。于是我自己也开始尝试写了一个mind+的用户库：【mind+用户库】4</em>4矩阵键盘，期间遇到了一些问题，感谢df的陈工和李工的技术支持。</p><h2 id="支持列表"><a href="#支持列表" class="headerlink" title="支持列表"></a>支持列表</h2><table><thead><tr><th>主板型号</th><th align="center">实时模式</th><th align="center">ArduinoC</th><th align="center">MicroPython</th><th>备注</th></tr></thead><tbody><tr><td>micro:bit</td><td align="center"></td><td align="center">√</td><td align="center"></td><td></td></tr><tr><td>mpython</td><td align="center"></td><td align="center">√</td><td align="center"></td><td></td></tr></tbody></table><h2 id="准备阶段："><a href="#准备阶段：" class="headerlink" title="准备阶段："></a>准备阶段：</h2><h3 id="安装方法："><a href="#安装方法：" class="headerlink" title="安装方法："></a>安装方法：</h3><p>1、网络加载方式安装：<br>打开mind+ 选择上传模式-&gt;用户库：在搜索栏中输入：<a href="https://gitee.com/hockel/keypad">https://gitee.com/hockel/keypad</a><br><img src="https://img-blog.csdnimg.cn/20200630205211973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>回车后出现下图，双击导入即可。<br><img src="https://img-blog.csdnimg.cn/202006302054550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2、离线包安装<br>4*4矩阵键盘扩展库离线安装包下载地址:链接: <a href="https://pan.baidu.com/s/158XuSa_RYo8PGLzpc4Px2Q">https://pan.baidu.com/s/158XuSa_RYo8PGLzpc4Px2Q</a> 提取码: uxrc<br>首先下载离线安装包：hockel-four_keypad–thirdex-V0.0.1.mpext，将它保存到电脑任意位置，然后打开 Mind+ 软件，选择用户库，点击“导入文件”，如下图所示：<br><img src="https://img-blog.csdnimg.cn/20200630210051185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择刚刚下载的离线安装包hockel-four_keypad–thirdex-V0.0.1.mpext，点击打开即可：<br><img src="https://img-blog.csdnimg.cn/20200630210209902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="积木列表"><a href="#积木列表" class="headerlink" title="积木列表"></a>积木列表</h2><p><img src="https://img-blog.csdnimg.cn/20200630210324802.png#pic_center" alt="在这里插入图片描述"></p><h2 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h2><h3 id="示例一：串口输出按键值"><a href="#示例一：串口输出按键值" class="headerlink" title="示例一：串口输出按键值"></a>示例一：串口输出按键值</h3><p><img src="https://img-blog.csdnimg.cn/2020063021042854.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>实验结果：<br><img src="https://img-blog.csdnimg.cn/20200630210522915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="示例二：验证密码"><a href="#示例二：验证密码" class="headerlink" title="示例二：验证密码"></a>示例二：验证密码</h3><p><img src="https://img-blog.csdnimg.cn/20200630210604498.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>实验结果：<br><img src="https://img-blog.csdnimg.cn/20200630210630650.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>通过上面的实验操作，基本功能还是可以实现的，欢迎广大网友下载进行测试，更多案例教程欢迎关注：<a href="http://www.hockel.club/">www.hockel.club</a></p>]]></content>
    
    
    <categories>
      
      <category>mind+</category>
      
    </categories>
    
    
    <tags>
      
      <tag>4*4矩阵键盘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【掌控板教程】网络编程——古语天地学习器</title>
    <link href="/post/32105.html"/>
    <url>/post/32105.html</url>
    
    <content type="html"><![CDATA[<h1 id="【掌控板教程】网络编程——古语天地学习器"><a href="#【掌控板教程】网络编程——古语天地学习器" class="headerlink" title="【掌控板教程】网络编程——古语天地学习器"></a>【掌控板教程】网络编程——古语天地学习器</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="https://img-blog.csdnimg.cn/20200528223139353.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>中国有着悠久的历史文化，其中就包括流传至今的古代名人大家、经典古籍的传世语录、这些鼓励人们的话语，让我们的生活更加积极向上、让我们更加有奋斗的动力去追求美好的生活。于是我做了这个古语天地学习器来帮助学生学习成语典故。</p><h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><h3 id="一、申请天行数据API"><a href="#一、申请天行数据API" class="headerlink" title="一、申请天行数据API"></a>一、申请天行数据API</h3><p><img src="https://img-blog.csdnimg.cn/20200528210749420.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>为什么选择天行数据呢？</strong><br>正如它主页写的那样：接口标准统一、简单易用。拥有丰富的api接口（eg:微信接口、图文类接口、生活类接口、娱乐类接口、功能类接口、知识类接口等）<br><img src="https://img-blog.csdnimg.cn/20200528212108752.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>首先我们需要在<a href="https://www.tianapi.com/signup.html?source=837687307">天行数据官网</a>注册一个账户（如果有账户的，直接登录即可）。<br><img src="https://img-blog.csdnimg.cn/20200528213134926.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>注册好一个账户后，回到首页，在搜索栏输入：励志古语<br><img src="https://img-blog.csdnimg.cn/20200528213900327.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>我们点击申请接口，这里我已经申请了，就不在演示了<br><img src="https://img-blog.csdnimg.cn/20200528214110893.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>接口调用问题<br><img src="https://img-blog.csdnimg.cn/20200528214400709.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如上图中接入信息，写明了接口地址：<a href="http://api.tianapi.com/txapi/lzmy/index%E5%92%8C%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F%E6%94%AF%E6%8C%81get/post%EF%BC%8Cget%E6%96%B9%E5%BC%8F%E4%BD%A0%E5%8F%AF%E4%BB%A5%E7%90%86%E8%A7%A3%E4%B8%BA%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E5%9C%A8%E6%8E%A5%E5%8F%A3%E5%9C%B0%E5%9D%80%E5%90%8E%E9%9D%A2%E6%8B%BC%E6%8E%A5%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E6%9D%A5%E4%BC%A0%E9%80%92%E4%BF%A1%E6%81%AF%E3%80%82">http://api.tianapi.com/txapi/lzmy/index和请求方式支持get/post，get方式你可以理解为，可以直接在接口地址后面拼接请求参数来传递信息。</a> 第一个参数以英文?号开头，后面的参数以&amp;符号开头。</p><p>如：<a href="http://api.tianapi.com/wxnew/index?key=%E4%BD%A0%E8%87%AA%E5%B7%B1%E7%9A%84apikey">http://api.tianapi.com/wxnew/index?key=你自己的apikey</a></p><p>其中key的参数值，是个人中心顶部的API KEY。<br>我们点击在线测试后、点击测试请求。<br><img src="https://img-blog.csdnimg.cn/20200528215303469.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>就可以看到界面上看到返回了一个json的数据（里面就有我们想要的励志古语信息、解释及出处）。<br><code>天行数据接口默认返回的数据格式为json，字符编码为utf8，传递参数的编码类型content-type为application/x-www-form-urlencoded，在每个接口的接口文档页面在底部，有常见编程编程语言的调用代码可以参考.</code><br><img src="https://img-blog.csdnimg.cn/20200528214720852.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>二、什么是json</strong><br>JSON(JavaScript Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式。采用完全独立于编程语言的文本格式来存储和表示数据，易于人阅读和编写，同时也易于机器解析和生成，所以在互联网应用非常广泛。</p><p>在python中，json和dict非常类似，都是key-value的形式，而且json、dict也可以非常方便的通过 json 模块互转。</p><ul><li>json：是一种数据格式，是纯字符串，本质是一种文件组织方式，比如您熟悉的txt、csv、doc、docx、xls、xlsx文件等。</li><li>dict：是一种数据结构，比如列表list、集合set、字符串str、数组array。</li></ul><h2 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h2><p><strong>任务一、get请求获取天行数据啊api json数据</strong><br>打开mPython编辑器，在扩展-&gt;网络指令栏中找到get请求与相应内容积木块：如下所示：<br><img src="https://img-blog.csdnimg.cn/20200528222742716.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200528223912402.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span>、用网络编程模块时，需要确保掌控板连接到wifi网络。<br><span class="hljs-number">2</span>、添加请求地址（就是刚才我们测试的接口信息），发送get请求，获取网页第三方接口返回的数据:<br><span class="hljs-number">3</span>、运行程序可以看到图显示效果。<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200529083343672.gif#pic_center" alt="在这里插入图片描述"><br>好了现在就是指剩下数据的筛选了，我们可以看到返回的json格式为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;<span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-number">200</span>,<br><span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;success&quot;</span>,<br><span class="hljs-string">&quot;newslist&quot;</span>:[<br>&#123;<span class="hljs-string">&quot;saying&quot;</span>:<span class="hljs-string">&quot;人生自古谁无死，留取丹心照汉青。&quot;</span>,<br><span class="hljs-string">&quot;transl&quot;</span>:<span class="hljs-string">&quot;自古以来，谁都难免会死的，那就把一片爱国的赤胆忠心留在史册上吧！&quot;</span>,<br><span class="hljs-string">&quot;source&quot;</span>:<span class="hljs-string">&quot;过零丁洋&quot;</span>&#125;<br>]<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>任务二、数据的筛选</strong><br>1、先来获取json中newslist所对应的值，返回的是一个列表<br><img src="https://img-blog.csdnimg.cn/20200529101804114.jpg#pic_center"><br>2、定义一个字典赋值列表newslist中的第一项。<br><img src="https://img-blog.csdnimg.cn/20200529101901419.jpg#pic_center" alt="在这里插入图片描述"><br>3、定义一个变量Sayi获取字典msg中saying键所对应的值。（励志古语部分）<br><img src="https://img-blog.csdnimg.cn/20200529103127442.jpg#pic_center" alt="在这里插入图片描述"><br>4、定义一个变量transl来获去获取字典msg中transl键所对应的值。（古语翻译部分）<br><img src="https://img-blog.csdnimg.cn/20200529103433917.jpg#pic_center" alt="在这里插入图片描述"><br>5、定义一个变量Source来获去获取字典msg中source键所对应的值。（古语出处部分）<br><img src="https://img-blog.csdnimg.cn/20200529103655872.jpg#pic_center" alt="在这里插入图片描述"><br>之后键获取的数据打印出来。<br>完成程序如下：<br><img src="https://img-blog.csdnimg.cn/20200529103902181.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>实验效果：<br><img src="https://img-blog.csdnimg.cn/20200529104026945.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>任务三、将筛选出来的数据显示在掌控板上。</strong></p><p><img src="https://img-blog.csdnimg.cn/2020052910443036.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在主程序加入显示部分即可。<code>有个问题：就是如果翻译字数过长它会自动覆盖之前显示的内容，如造成乱码的现象。</code><br>实现效果：<br><img src="https://img-blog.csdnimg.cn/20200529105609195.gif#pic_center" alt="在这里插入图片描述"><br>更多教程歡迎浏览个人博客：<a href="http://www.hockel.club/">www.hockel.club</a>.</p>]]></content>
    
    
    <categories>
      
      <category>掌控板</category>
      
    </categories>
    
    
    <tags>
      
      <tag>掌控板</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【MaixPY 教程】用mixly玩转k210——MixNo通过TCPIP与掌控板进行通讯</title>
    <link href="/post/47274.html"/>
    <url>/post/47274.html</url>
    
    <content type="html"><![CDATA[<h1 id="【MaixPY-教程】用mixly玩转k210——MixNo通过TCP-IP与掌控板进行通讯"><a href="#【MaixPY-教程】用mixly玩转k210——MixNo通过TCP-IP与掌控板进行通讯" class="headerlink" title="【MaixPY 教程】用mixly玩转k210——MixNo通过TCP/IP与掌控板进行通讯"></a>【MaixPY 教程】用mixly玩转k210——MixNo通过TCP/IP与掌控板进行通讯</h1><p><img src="https://img-blog.csdnimg.cn/20200509173231761.gif#pic_center" alt="在这里插入图片描述"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>【MaixPy系列教程：】</p><ul><li><a href="https://blog.csdn.net/tonycarson/article/details/105717060">【MaixPy教程】用maixHub训练模型进行开源硬件识别</a></li><li><a href="https://blog.csdn.net/tonycarson/article/details/105744677">【MaixPy 教程】用mixly玩转K210——口罩识别</a></li><li><a href="https://blog.csdn.net/tonycarson/article/details/105756452">【MaixPy教程】用mixly玩转K210——调用AI_OneNET API实现车牌识别</a></li><li><a href="https://blog.csdn.net/tonycarson/article/details/105808550">【MaixPy 教程】用mixly玩转K210——人脸追踪</a></li><li><a href="https://blog.csdn.net/tonycarson/article/details/105833640">【MaixPy 教程】用mixly玩转K210——20类对象检测</a></li><li><a href="https://blog.csdn.net/tonycarson/article/details/105999352">【MaixPy 教程】用mixly玩转K210——一键本地模型训练</a></li></ul><p>在教程开始之前你需要了解套接字、和tcp协议及编程的原理：<br><strong>什么是套接字？</strong><br><code>Socket </code>是网络编程的一个抽象概念。通常我们用一个Socket表示“打开了一个网络链接”，而打开一个Socket需要知道目标计算机的IP地址和端口号，再指定协议类型即可。<br><strong>TCP协议简介</strong><br>TCP协议，传输控制协议（Transmission Control Protocol，缩写为 TCP）是一种面向连接的、可靠的、基于字节流的传输层通讯协议，由IETF的RFC 793定义。<br>TCP通信需要经过创建连接、数据传送、终止连接三个步骤。TCP通信模型中，在通信开始之前，一定要先创建相关连接，才能发送数据，类似于生活中，”打电话””。<br>套接字在工作时将连接的双方分为服务器端和客户端,即C/S模式,TCP通讯原理如下图:<br><img src="https://img-blog.csdnimg.cn/20200509174319898.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><ul><li>MixNo主控板</li><li>掌控板<h2 id="程序编写"><a href="#程序编写" class="headerlink" title="程序编写"></a>程序编写</h2></li></ul><p><strong><em>整体思路：<br>用掌控板来做TCP服务器，MixNo 来做TCP客户端。（创建TCP连接时，主动发起连接的叫客户端，被动响应连接的叫服务器）首先我们先用<a href="https://www.labplus.cn/handPy-app">mpython</a>编写程序为掌控板写TCP客户端来显示客户端的请求，用mixly【软件关注童芯创悟进行获取】编写MixNo的TCP客户端，向服务端发送消息</em></strong></p><h3 id="TCP服务器的编写"><a href="#TCP服务器的编写" class="headerlink" title="TCP服务器的编写"></a>TCP服务器的编写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pyhton">TCP编程的服务端一般步骤是：<br><br>创建一个socket，用函数socket()<br>设置socket属性，用函数setsockopt() , 可选<br>绑定IP地址、端口等信息到socket上，用函数bind()<br>开启监听和设置最大监听数,用函数listen()<br>等待客户端請求一个连接，用函数accept()<br>收发数据，用函数send()和recv()，或者read()和write()<br>关闭网络连接<br></code></pre></td></tr></table></figure><p>首先打开mpython,先让配置掌控板的网络（可以是sta模式，或者AP模式），然后套接字初始化。：<br><img src="https://img-blog.csdnimg.cn/20200509215707924.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 套接字初始化</span><br>socket(socket_family, socket_type, protocol)<br><span class="hljs-comment"># socket_family 就是指套接字家族可以是AF_UNIX(基于文件的)或AF_INET（基于网络的）（IPV4）AF_INET6(IPV6)</span><br><span class="hljs-comment">#socket_type 就是指套接字类型，即SOCK_STREAM（TCP协议）或SOCK_DGRAM（UDP协议）</span><br><span class="hljs-comment">#protocol 是协议，默认为0，一般不填</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020050922030612.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">mywifi.sta.ifconfig()  用于获得当前链接网络的静态IP地址信息，返回类型为<span class="hljs-number">4</span>元素元组,我們用元组中的第一项来做服务器的IP地址。<br>IP地址：<span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.4</span><br>NETMASK(子网掩码): <span class="hljs-number">255.255</span><span class="hljs-number">.255</span><span class="hljs-number">.0</span><br>GATEWAY(网关):<span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>DNS：类似本地的host文件。公网DNS注册域名。<br>注意：返回的数据是一个<span class="hljs-number">4</span>元组，元组中的每一项都是字符串格式。<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200509220701682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">conn,addr = listenSocket.accept()  <br><span class="hljs-comment"># 阻塞,等待客户端的请求连接,如果有新的客户端来连接服務器，那麼会返回一个新的套接字专门为这个客户端服务</span><br>需要注意的是：在服务器未接收到任何客户端的访问请求时，程序将停留在该位置，只有有新的请求产生时，程序才能向下进行。所以，如果掌控板在这种情况下，需要处理一些实时程序的话，需要建立定时器中断和外部中断，否则无法对自定义程序进行有效处理。<br>ocket.recv()接收客户端发来的数据。最大数据量是<span class="hljs-number">1024</span><br>注意：socket.recv(）接收到的数据是二进制字符串格式（与正常的字符串有些差别，需要使用decode（）函数来将其解码转化为正常的字符串）<br></code></pre></td></tr></table></figure><h3 id="TCP客户端的编写"><a href="#TCP客户端的编写" class="headerlink" title="TCP客户端的编写"></a>TCP客户端的编写</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">TCP编程的客户端一般步骤是：<br><br><span class="hljs-number">1</span>、创建一个socket，用函数socket()<br><span class="hljs-number">2</span>、设置socket属性，用函数setsockopt() , 可选<br><span class="hljs-number">3</span>、绑定IP地址、端口等信息到socket上，用函数bind() , 可选<br><span class="hljs-number">4</span>、设置要连接的对方的IP地址和端口等属性<br><span class="hljs-number">5</span>、连接服务器,用函数connect()<br><span class="hljs-number">6</span>、收发数据,用函数send()和recv(),或者read()和write()<br><span class="hljs-number">7</span>、关闭网络连接<br></code></pre></td></tr></table></figure><p>首先打开mixly,设置MixNo需要连接的wifi网络(和服务器同一网络），初始化套接字:<br><img src="https://img-blog.csdnimg.cn/20200509214345286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>客户端有了套接字后，马上就可以调用connect()函数去连接服务器（ps:以元组或者列表的方式绑定服务器地址，和端口）。<br><img src="https://img-blog.csdnimg.cn/20200509214536281.png#pic_center" alt="在这里插入图片描述"><br>建立连接后，就可以与服务器开始对话。在对话结束后，客户端就可以关闭套接字，结束连接。<br><img src="https://img-blog.csdnimg.cn/20200509215224794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># tcp服务器代码</span><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">from</span> mpython <span class="hljs-keyword">import</span> *<br><br>port=<span class="hljs-number">5001</span>                   <span class="hljs-comment"># TCP服务端的端口,range0~65535</span><br>listenSocket=<span class="hljs-literal">None</span>              <br><br>mywifi=wifi()               <span class="hljs-comment"># 创建wifi类</span><br><br><span class="hljs-comment"># 捕获异常，如果在&quot;try&quot; 代码块中意外中断，则停止关闭套接字</span><br><span class="hljs-keyword">try</span>:<br>    mywifi.connectWiFi(<span class="hljs-string">&quot;ssid&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>)                                   <span class="hljs-comment"># WiFi连接，设置ssid 和password</span><br>    <span class="hljs-comment"># mywifi.enable_APWiFi(&quot;wifi_name&quot;,13)                                  # 还可以开启AP模式,自建wifi网络</span><br>    ip= mywifi.sta.ifconfig()[<span class="hljs-number">0</span>]                                            <span class="hljs-comment"># 获取本机IP地址</span><br>    listenSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)        <span class="hljs-comment"># 创建socket,不给定参数默认为TCP通讯方式</span><br>    listenSocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="hljs-number">1</span>)      <span class="hljs-comment"># 设置套接字属性参数</span><br>    listenSocket.bind((ip,port))                                            <span class="hljs-comment"># 绑定ip和端口</span><br>    listenSocket.listen(<span class="hljs-number">3</span>)                                                  <span class="hljs-comment"># 开始监听并设置最大连接数</span><br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;tcp waiting...&#x27;</span>)<br>    oled.DispChar(<span class="hljs-string">&quot;%s:%s&quot;</span> %(ip,port),<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)                                   <span class="hljs-comment"># oled屏显示本机服务端ip和端口            </span><br>    oled.DispChar(<span class="hljs-string">&#x27;accepting.....&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">16</span>)                                            <br>    oled.show()<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        print(<span class="hljs-string">&quot;accepting.....&quot;</span>)<br>        conn,addr = listenSocket.accept()                                   <span class="hljs-comment"># 阻塞,等待客户端的请求连接,如果有新的客户端来连接服務器，那麼会返回一个新的套接字专门为这个客户端服务</span><br>        print(addr,<span class="hljs-string">&quot;connected&quot;</span>)                                                         <br>    <br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            data = conn.recv(<span class="hljs-number">1024</span>)                                          <span class="hljs-comment"># 接收对方发送过来的数据,读取字节设为1024字节</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(data) == <span class="hljs-number">0</span>):<br>                print(<span class="hljs-string">&quot;close socket&quot;</span>)<br>                conn.close()                                                <span class="hljs-comment"># 如果接收数据为0字节时,关闭套接字</span><br>                <span class="hljs-keyword">break</span><br>            data_utf=data.decode()                                          <span class="hljs-comment"># 接收到的字节流以utf8编码解码字符串</span><br>            print(data_utf)<br>            oled.DispChar(data_utf,<span class="hljs-number">0</span>,<span class="hljs-number">48</span>)                                    <span class="hljs-comment"># 将接收到文本oled显示出来</span><br>            oled.show()<br>            oled.fill_rect(<span class="hljs-number">0</span>,<span class="hljs-number">48</span>,<span class="hljs-number">128</span>,<span class="hljs-number">16</span>,<span class="hljs-number">0</span>)                                   <span class="hljs-comment"># 局部清屏</span><br>            conn.send(data)                                                 <span class="hljs-comment"># 返回数据给客户端</span><br><br><span class="hljs-comment"># 当捕获异常,关闭套接字、网络</span><br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-keyword">if</span>(listenSocket):<br>        listenSocket.close()<br>    mywifi.disconnectWiFi()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># tcp客户端代码程序</span><br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> network_no<br><span class="hljs-keyword">import</span> machine<br><br><span class="hljs-keyword">try</span>:<br>    nic = network_no.wifi_init1()<br>    nic.connect(<span class="hljs-string">&quot;hockel&quot;</span>,<span class="hljs-string">&quot;erised88&quot;</span>)<br>    print(nic.ifconfig())<br>    sock = socket.socket()<br>    sock.settimeout(<span class="hljs-number">5</span>)<br>    sock.connect((<span class="hljs-string">&quot;192.168.43.246&quot;</span>, <span class="hljs-number">5001</span>))<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        sock.send(<span class="hljs-string">&quot;Hello Handbit&quot;</span>)<br>        time.sleep_ms(<span class="hljs-number">1000</span>)<br>        sock.send(<span class="hljs-string">&quot;I&#x27;am MixNo&quot;</span>)<br>        time.sleep_ms(<span class="hljs-number">1000</span>)<br><span class="hljs-keyword">except</span>:<br>    sock.close()<br><br></code></pre></td></tr></table></figure><h2 id="程序演示"><a href="#程序演示" class="headerlink" title="程序演示"></a>程序演示</h2><p><img src="https://img-blog.csdnimg.cn/20200509221308956.gif#pic_center" alt="在这里插入图片描述"><br>小结：<br>有了TCP通讯后，就可以把MixNo识别到的物体发送到掌控板上了，掌控板可以对发来的消息进行处理做出相应的动作（比如：口罩识别门禁，人体追踪、颜色识别等等，当然这些在MixNo中也可以独自完成）。<br>首发个人博客：<a href="http://www.hockel.club,欢迎关注哈.有问题的可以加入【mixno/">www.hockel.club，欢迎关注哈。有问题的可以加入【MixNo</a> QQ群：1056344043】</p>]]></content>
    
    
    <categories>
      
      <category>MaixPy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MaixPy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【MaixPy 教程】用mixly玩转K210——一键本地模型训练</title>
    <link href="/post/48517.html"/>
    <url>/post/48517.html</url>
    
    <content type="html"><![CDATA[<h1 id="【MaixPy-教程】用mixly玩转K210——一键本地模型训练"><a href="#【MaixPy-教程】用mixly玩转K210——一键本地模型训练" class="headerlink" title="【MaixPy 教程】用mixly玩转K210——一键本地模型训练"></a>【MaixPy 教程】用mixly玩转K210——一键本地模型训练</h1><p><img src="https://img-blog.csdnimg.cn/20200508155649295.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>【MaixPy系列教程：】</p><ul><li><a href="https://blog.csdn.net/tonycarson/article/details/105717060">【MaixPy教程】用maixHub训练模型进行开源硬件识别</a></li><li><a href="https://blog.csdn.net/tonycarson/article/details/105744677">【MaixPy 教程】用mixly玩转K210——口罩识别</a></li><li><a href="https://blog.csdn.net/tonycarson/article/details/105756452">【MaixPy教程】用mixly玩转K210——调用AI_OneNET API实现车牌识别</a></li><li><a href="https://blog.csdn.net/tonycarson/article/details/105808550">【MaixPy 教程】用mixly玩转K210——人脸追踪</a></li><li><a href="https://blog.csdn.net/tonycarson/article/details/105833640">【MaixPy 教程】用mixly玩转K210——20类对象检测</a><br><img src="https://img-blog.csdnimg.cn/20200508160146616.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ul><p>首先十分感谢童芯创悟公司赠送的MixNo 旗舰版有：<code>MixNo主板*1、typeC数据线、M12基座摄像头*1、wifi天线*1、喇叭扬声器*1、专用4G内存卡*1、读卡器*1、摄像头延长线*1、可调焦距摄像头*1、摄像头支架*1、等等</code>通用基于mixly【米思齐】二次魔改开发增加了<code>MicroPython[k210_MixPY]</code>重磅推出<code>Mixly4MxiPY_V1.2.0</code>版本，集成丰富图形化指令，完全简单低门槛入门人工智能应用.<br><strong><em>MixNo硬件配置介绍：</em></strong><br><img src="https://img-blog.csdnimg.cn/2020050816113975.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li><p>搭载Kendryte K210，双核64位CPU、双精度FPU，神经网络处理器KPU</p></li><li><p>板载M12基座OV2640摄像头，方便更换不同镜头应用不同场合</p></li><li><p>定制摄像头金属支架，方便摄像头前后置安装，及不同角度旋转</p></li><li><p>板载2.4寸全彩TFT屏，开模金属罩有效保护屏幕</p></li><li><p>依照Arduino Uno造型设计，既可以兼容其拓展板及传感器</p></li><li><p>模拟输入ADC，采用12位PGA可调增益，可方便采集信号</p></li><li><p>板载高灵敏硅麦，可以进行语音控制</p></li><li><p>板载ESP8525，WiFi芯片，及方便进行物联网操作</p></li><li><p>图形化编程，丰富的图形库</p></li><li><p>硬件涵盖：NES黑白游戏、摄像头、WiFi、显示屏、音视频播放、物联网、人工智能、机器听觉、机器视觉等</p></li><li><p>MixNo 不只是单单传感器，而是要当主控编程使的</p></li></ul><p>在<code>Mixly4MxiPY_V1.2.0</code>版本增加AI本地模型训练功能，可以进行一键本地模型训练，让人工智能触手可及。<br><img src="https://img-blog.csdnimg.cn/20200508161532461.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>好了废话不多说了，开始本项目的教程吧！</p><h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><ul><li>四个需要训练的物品（电池、橡皮、订书钉、透明胶带）</li><li>MixNo主控板（如果没有的，可以用其他K210主控代替）</li></ul><h2 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h2><p> 1.准备训练物品并录入名称 (理论数量不限，目前只支持英文名)<br><img src="https://img-blog.csdnimg.cn/20200508162414273.jpg#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200508163046104.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>2.填写总的训练拍照数量（如四个物品，每个训练5张，总共20，并不同角度训练）保存模型下次直接模型加载，不需要再次训练模型<br><img src="https://img-blog.csdnimg.cn/20200508162517866.jpg#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200508163310515.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这个积木块主要调用了<code>Mixly4MxiPY_AIOT_V1.2.5\mpBuild\K210_MixPY\libailocal.py</code>文件进行本地模型的训练：<br><img src="https://img-blog.csdnimg.cn/20200508163509350.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>运行程序后，屏幕提示让我用key键进行模型的录入，MixNo的key键与GPIOHS17引脚相连，如果用的是是sipeed 的maix dock主控板，改成GPIOHS16即可（boot键）。<br><img src="https://img-blog.csdnimg.cn/20200508163942661.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>4.运行模型，在液晶屏上显示返回识别到物品名称及置信度。<br><img src="https://img-blog.csdnimg.cn/20200508164215334.jpg#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200508164332451.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这样一个完整的本地模型训练就完成了。可是如果MixNo重启时，又会进行本地模型的训练。如果调用已经训练好的模型呢？只需要更改一步即可：<br><img src="https://img-blog.csdnimg.cn/20200508164939166.jpg#pic_center" alt="在这里插入图片描述"><br>将模型训练积木块禁止，加上模型加载积木块即可！是不是 VERY EASY啊!!</p><h2 id="程序演示"><a href="#程序演示" class="headerlink" title="程序演示"></a>程序演示</h2><iframe src="//player.bilibili.com/player.html?aid=455556764&bvid=BV1b5411472R&cid=189007431&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="min-height:600px;width:100%;height:100%;"> </iframe>]]></content>
    
    
    <categories>
      
      <category>MaixPy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MaixPy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【MaixPy 教程】用mixly玩转K210——20类对象检测</title>
    <link href="/post/39851.html"/>
    <url>/post/39851.html</url>
    
    <content type="html"><![CDATA[<h1 id="【MaixPy-教程】用mixly玩转K210——20类对象检测"><a href="#【MaixPy-教程】用mixly玩转K210——20类对象检测" class="headerlink" title="【MaixPy 教程】用mixly玩转K210——20类对象检测"></a>【MaixPy 教程】用mixly玩转K210——20类对象检测</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>【MaixPy系列教程：】</p><ul><li><a href="https://blog.csdn.net/tonycarson/article/details/105717060">【MaixPy教程】用maixHub训练模型进行开源硬件识别</a></li><li><a href="https://blog.csdn.net/tonycarson/article/details/105744677">【MaixPy 教程】用mixly玩转K210——口罩识别</a></li><li><a href="https://blog.csdn.net/tonycarson/article/details/105756452">【MaixPy教程】用mixly玩转K210——调用AI_OneNET API实现车牌识别</a></li><li><a href="https://blog.csdn.net/tonycarson/article/details/105808550">【MaixPy 教程】用mixly玩转K210——人脸追踪</a></li></ul><p><img src="https://img-blog.csdnimg.cn/20200429101207189.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>在<a href="https://www.maixhub.com/">maixhub AIoT模型平台</a>中有一个模型是20类对象检测。可以支持检测：<code>&#123;“飞机”，“自行车”，“鸟”，“船”，“瓶”，“公共汽车”，“汽车”，“猫”，“椅子”，“牛”，“餐桌”，“狗”，“马” &#39;，&#39;摩托车&#39;，&#39;人&#39;，&#39;盆栽植物&#39;，&#39;绵羊&#39;，&#39;沙发&#39;，&#39;火车&#39;，&#39;电视监视器&#39;&#125;</code><br><img src="https://img-blog.csdnimg.cn/202004291019148.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>那今天我们结合前面所学的知识，来做一个20类对象检测的案例！好了废话不多说，开干！！！</p><h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><p>从maixhub AIOT模型平台，下载好<a href="https://www.maixhub.com/index.php/index/index/detail/id/4.html">yolo-tinyv2 20类对象检测</a>,然后用kflash_gui刷入模型（如果不知道如何刷入模型的，和软件不知道到哪里下载的，可以看我之前的那篇文章<a href="https://blog.csdn.net/tonycarson/article/details/105717060">【MaixPy教程】用maixHub训练模型进行开源硬件识别</a>）<br><img src="https://img-blog.csdnimg.cn/20200429114219688.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>注：刷入flash地址：0x300000,或者是把模型文件存放到TF卡中</strong></p><h2 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h2><p>1、首先对摄像头，液晶屏，和yolov2初始化后，来获取摄像头检测到数据信息。具体操作如下图所示：<br><img src="https://img-blog.csdnimg.cn/20200429114724134.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c">因为我们之前把模型刷入的地址是<span class="hljs-number">0</span>x300000，所以在KPU加载模型的地址要和刷入模型地址一致！<br>在对摄像头获取到的图像进行yolov2 运行网络运算时，<br>返回的是一个字典&#123;<span class="hljs-string">&quot;x&quot;</span>:<span class="hljs-number">68</span>, <span class="hljs-string">&quot;y&quot;</span>:<span class="hljs-number">0</span>, <span class="hljs-string">&quot;w&quot;</span>:<span class="hljs-number">149</span>, <span class="hljs-string">&quot;h&quot;</span>:<span class="hljs-number">307</span>, <span class="hljs-string">&quot;value&quot;</span>:<span class="hljs-number">0.705325</span>, <span class="hljs-string">&quot;classid&quot;</span>:<span class="hljs-number">14</span>, <span class="hljs-string">&quot;index&quot;</span>:<span class="hljs-number">0</span>, <span class="hljs-string">&quot;objnum&quot;</span>:<span class="hljs-number">1</span>&#125;<br>这里我们需要用到“value”和<span class="hljs-string">&quot;classid&quot;</span>键所对应的值。前者是置信度后者是对象ID。<br></code></pre></td></tr></table></figure><p>2、定义一个列表<code>classid = [&#39;aeroplane&#39;, &#39;bicycle&#39;, &#39;bird&#39;, &#39;boat&#39;, &#39;bottle&#39;, &#39;bus&#39;, &#39;car&#39;, &#39;cat&#39;, &#39;chair&#39;, &#39;cow&#39;, &#39;diningtable&#39;, &#39;dog&#39;, &#39;horse&#39;, &#39;motorbike&#39;, &#39;person&#39;, &#39;pottedplant&#39;, &#39;sheep&#39;, &#39;sofa&#39;, &#39;train&#39;, &#39;tvmonitor&#39;]</code><br><img src="https://img-blog.csdnimg.cn/20200429140934757.jpg#pic_center" alt="在这里插入图片描述"><br>3、通过模型解析<code>i</code>的标识号、和置信度（也就是获取字典中的“classID”与value值）：<br><img src="https://img-blog.csdnimg.cn/20200429141823150.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>4、通过机器视觉指令中的绘制矩形和绘制文本来标记识别对象的位置，对象的名字与置信度：<br><img src="https://img-blog.csdnimg.cn/20200429142106443.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="程序演示"><a href="#程序演示" class="headerlink" title="程序演示"></a>程序演示</h2><iframe src="//player.bilibili.com/player.html?aid=753064564&bvid=BV17k4y1k79y&cid=189012898&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="min-height:600px;width:100%;height:100%;"> </iframe>]]></content>
    
    
    <categories>
      
      <category>MaixPy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MaixPy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/post/1.html"/>
    <url>/post/1.html</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【MaixPy教程】用maixHub训练模型进行开源硬件识别</title>
    <link href="/post/23017.html"/>
    <url>/post/23017.html</url>
    
    <content type="html"><![CDATA[<h1 id="【MaixPy教程】用maixHub训练模型进行开源硬件识别"><a href="#【MaixPy教程】用maixHub训练模型进行开源硬件识别" class="headerlink" title="【MaixPy教程】用maixHub训练模型进行开源硬件识别"></a>【MaixPy教程】用maixHub训练模型进行开源硬件识别</h1><p><img src="https://img-blog.csdnimg.cn/20200423205029980.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>年前参加了dfrobot的活动：<strong>DF冬季AI挑战赛</strong>有幸进入第二轮，大方的木子给了200的优惠券。在逛了DF商城时候无意间发现了一个宝贝：<a href="https://www.dfrobot.com.cn/goods-1993.html">Maix Dock AI开发板</a>！又有液晶屏和摄像头！！<strong>难道它不香吗？现在想想它是真的香</strong><br><img src="https://img-blog.csdnimg.cn/20200423205115962.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200423205115754.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>它是基于k210 AI芯片，作为核心处理单元，k210带独立FPU的双核处理，64位的CPU位宽，8M的片上SRAM，400M的可调标称频率，支持乘法、除法和平方根运算的双精度FPU，在AI处理方面k210可进行卷积、批归一化、激活、池化等运算。也可以进行语音方向扫描和语音数据输出的前置处理工作，可实现人脸检测，语音识别，颜色、物体识别，MNIST手写数字识别，Feature map显示，tiny yolov2 20分类等多种功能。<br><strong>什么是K210 AI芯片呢？</strong>可以看一下大神稚辉君的帖子：<a href="https://mc.dfrobot.com.cn/thread-299778-1-1.html">嵌入式AI从入门到放肆【K210篇】– 硬件与环境 </a>想要详细了解MaixPy的资料可以查看：<a href="https://www.sipeed.com/">矽速科技官网</a><br><strong>好了废话不多说了，开始本次的教程</strong></p><h2 id="硬件准备"><a href="#硬件准备" class="headerlink" title="硬件准备"></a>硬件准备</h2><ul><li>刷入MaixPy的最新固件的K210开发板这里推荐<a href="https://www.dfrobot.com.cn/goods-1993.html">Maix Dock</a></li><li>一根TypeC数据线</li><li>TF卡及读卡器</li></ul><h2 id="准备数据集"><a href="#准备数据集" class="headerlink" title="准备数据集"></a>准备数据集</h2><p>1、用手机拍摄我们的arduino、microbit、掌控板、树莓派的图片（ps:识别的准确定和我们的数据集的大小有关）：<br><img src="https://img-blog.csdnimg.cn/20200423205152467.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="数据集处理"><a href="#数据集处理" class="headerlink" title="数据集处理"></a>数据集处理</h2><p>将图片数据集按分类保存为单独的文件夹, 子目录的名字为最后生成label的名字。<br><strong>注意：分类文件夹数量要大于 2个！</strong><br>例如:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs 1c">数据集文件目录结构<br>   <span class="hljs-string">|-Dir_name</span><br>     <span class="hljs-string">|-Class_1</span><br>       <span class="hljs-string">|- pic01.jpg</span><br>       <span class="hljs-string">|- pic02.jpg</span><br>       <span class="hljs-string">|- pic03.jpg</span><br>      <span class="hljs-string">|-Class_2</span><br>       <span class="hljs-string">|- pic01.jpg</span><br>       <span class="hljs-string">|- pic02.jpg</span><br>       <span class="hljs-string">|- pic03.jpg</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200423205218210.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>2、使用转换工具处理文件夹<br>工具下载地址:<a href="https://cdn.sipeed.com/donwload/12kj346465hjkv68g7c/DataAssitantV1.0.zip?attname=">预处理软件</a><br>1.将预处理软件下载完成之后，解压后点击.exe文件即可使用<br><img src="https://img-blog.csdnimg.cn/20200423205317166.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>选择文件夹确定即可<br><img src="https://img-blog.csdnimg.cn/20200423205341390.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>选择我们准备好的数据集<br><img src="https://img-blog.csdnimg.cn/20200423205402106.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>执行完成后会生成zip文件(这个之后我们在模型训练的网站上会有用到)<br><img src="https://img-blog.csdnimg.cn/20200423205424737.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>*<em>注意:<br>建议的图片分辨率 224</em>224, 上传之前可以使用工具批量转换一下<br>每个分类不要低于40张图片，否则无法开始训练<br>数据集压缩后大小不超过20M<br>子目录名不能使用汉字， 否则生成的label无法显示**</p><h2 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h2><h3 id="获取机器码"><a href="#获取机器码" class="headerlink" title="获取机器码"></a>获取机器码</h3><p>1、下载key_gen固件 <a href="https://en.bbs.sipeed.com/uploads/default/original/1X/bca0832bed92a1ada63bd05327688784e2ef14d1.zip">key_gen_v1.2.zip </a><br>2、下载kflash-gui<a href="https://github.com/Sipeed/kflash_gui/releases"> kflash-gui</a><br>3、使用kflash-gui 烧录 key_gen 固件<br><img src="https://img-blog.csdnimg.cn/20200423205504469.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>4、打开串口终端（Xcom）， 重启开发板， 可以看到打印出的机器码。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Please Send Bellow Data to Sipeed --&gt; support@sipeed.com:<br><br>6f80dccbe29<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**cc7e9d69f92</span><br><span class="hljs-strong"></span><br><span class="hljs-strong">Generate key end</span><br><span class="hljs-strong"></span><br><span class="hljs-strong">其中 6f80dccbe29**</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>cc7e9d69f92 就是对应开发板的机器码<br></code></pre></td></tr></table></figure><p><strong><em>警告：由于需要进行模型加密，key_gen.bin将永远关闭JTAG端口，并写入一次性AES KEY，请确认后再进行烧录。</em></strong></p><h2 id="提交训练任务"><a href="#提交训练任务" class="headerlink" title="提交训练任务"></a>提交训练任务</h2><p>1、打开<a href="https://www.maixhub.com/index.php/index/mtrain/index.html">Maixhub模型训练平台</a>并创建一个任务<br><img src="https://img-blog.csdnimg.cn/20200423205532975.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>在填写邮箱处填写接受模型的邮箱在填写机器码处填写机器码</strong><br>2、上传数据集，选择我们前面准备好的数据集<br><img src="https://img-blog.csdnimg.cn/20200423205551677.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>3、进行数据训练，训练的时间和我们的数据集大小有关<br><img src="https://img-blog.csdnimg.cn/20200423205618133.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>训练好后，我们的邮箱会接受的我们的训练模型：<br><img src="https://img-blog.csdnimg.cn/20200423205638578.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>这里可以看到我的准确度还是比较低的。我们下载并解压下来可以看到下面这个文件：<br><img src="https://img-blog.csdnimg.cn/20200423205657120.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>里面有我们的的数据模型，和我们模式的一些准确度、损失度等信息<br><img src="https://img-blog.csdnimg.cn/20200423205736151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200423205751911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200423205751209.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="烧录模型到flash"><a href="#烧录模型到flash" class="headerlink" title="烧录模型到flash"></a>烧录模型到flash</h2><p>模型有两种使用方式， 可以使用sd卡或烧录flash的方式来运行模型脚本。</p><h3 id="使用sd卡"><a href="#使用sd卡" class="headerlink" title="使用sd卡"></a>使用sd卡</h3><figure class="highlight stan"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stan"><span class="hljs-number">1</span>、烧录最新Maixpy固件<br><span class="hljs-number">2</span>、将邮件中的zip 解压<br><span class="hljs-number">3</span>、将所有文件放到<span class="hljs-built_in">sd</span>卡根目录<br><span class="hljs-number">4</span>、将<span class="hljs-built_in">sd</span>卡插到开发板上， 重启开发板<br></code></pre></td></tr></table></figure><h3 id="烧录模型到flash-1"><a href="#烧录模型到flash-1" class="headerlink" title="烧录模型到flash"></a>烧录模型到flash</h3><p>1、打开 kflash-gui, 选择解压出的kfpkg文件（模型内自带maixpy 固件，不需要单独烧录）<br><img src="https://img-blog.csdnimg.cn/20200423205809526.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="程序的编写"><a href="#程序的编写" class="headerlink" title="程序的编写"></a>程序的编写</h2><p>在邮件中的训练模型解压文件中，有boot.py，就是我们的识别模型程序了，我们现在用<a href="http://dl.sipeed.com/MAIX/MaixPy/ide/">MaixPY IDE</a>打开（具体使用操作及相关API文档可以<a href="https://maixpy.sipeed.com/zh/">参考官方wiki</a>）：<br><img src="https://img-blog.csdnimg.cn/20200423205838819.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># refer to http://blog.sipeed.com/p/680.html</span><br><span class="hljs-attribute">import</span> sensor, image, lcd, time<br><span class="hljs-attribute">import</span> KPU as kpu<br><span class="hljs-attribute">lcd</span>.init()<br><span class="hljs-attribute">lcd</span>.clear()<br><span class="hljs-comment">#lcd.mirror(1)</span><br><span class="hljs-attribute">try</span>:<br>    <span class="hljs-attribute">img</span> = image.Image(<span class="hljs-string">&quot;/sd/startup.jpg&quot;</span>)<br>    <span class="hljs-attribute">lcd</span>.display(img)<br><span class="hljs-attribute">except</span>:<br>    <span class="hljs-attribute">lcd</span>.draw_string(lcd.width()//<span class="hljs-number">2</span>-<span class="hljs-number">100</span>,lcd.height()//<span class="hljs-number">2</span>-<span class="hljs-number">4</span>, <span class="hljs-string">&quot;Error: Cannot find startup.jpg&quot;</span>, lcd.WHITE, lcd.RED)<br><br><span class="hljs-attribute">sensor</span>.reset()<br><span class="hljs-attribute">sensor</span>.set_pixformat(sensor.RGB<span class="hljs-number">565</span>)<br><span class="hljs-attribute">sensor</span>.set_framesize(sensor.QVGA)<br><span class="hljs-attribute">sensor</span>.set_windowing((<span class="hljs-number">224</span>, <span class="hljs-number">224</span>))<br><span class="hljs-attribute">sensor</span>.set_vflip(<span class="hljs-number">0</span>)<br><span class="hljs-attribute">sensor</span>.set_hmirror(<span class="hljs-number">0</span>)<br><br><span class="hljs-attribute">sensor</span>.run(<span class="hljs-number">1</span>)<br><span class="hljs-attribute">f</span>=open(&#x27;/sd/labels.txt&#x27;,&#x27;r&#x27;)<br><span class="hljs-attribute">labels</span>=f.readlines()<br><span class="hljs-attribute">f</span>.close()<br><span class="hljs-attribute">task</span> = kpu.load(&#x27;/sd/f<span class="hljs-number">1</span>ba<span class="hljs-number">58</span>e<span class="hljs-number">5</span>f<span class="hljs-number">3</span>d<span class="hljs-number">2011</span>d<span class="hljs-number">3320</span>a<span class="hljs-number">4</span>fd<span class="hljs-number">0</span>cd<span class="hljs-number">2</span>ca<span class="hljs-number">69</span>_<span class="hljs-number">813835</span>c<span class="hljs-number">56</span>cbfc<span class="hljs-number">4</span>cfaf<span class="hljs-number">63052</span>b<span class="hljs-number">70</span>ba<span class="hljs-number">2</span>c<span class="hljs-number">6</span>e.smodel&#x27;)<br><span class="hljs-attribute">lcd</span>.clear(<span class="hljs-number">0</span>xFFFF)<br><span class="hljs-attribute">clock</span> = time.clock()<br><span class="hljs-attribute">while</span>(True):<br>    <span class="hljs-attribute">img</span> = sensor.snapshot()<br>    <span class="hljs-attribute">clock</span>.tick()<br>    <span class="hljs-attribute">fmap</span> = kpu.forward(task, img)<br>    <span class="hljs-attribute">fps</span>=clock.fps()<br>    <span class="hljs-attribute">plist</span>=fmap[:]<br>    <span class="hljs-attribute">pmax</span>=max(plist)<br>    <span class="hljs-attribute">max_index</span>=plist.index(pmax)<br>    <span class="hljs-attribute">a</span> = lcd.display(img, oft=(<span class="hljs-number">48</span>,<span class="hljs-number">0</span>))<br>    <span class="hljs-attribute">lcd</span>.draw_string(<span class="hljs-number">48</span>, <span class="hljs-number">224</span>, <span class="hljs-string">&quot;%.2f:%s                            &quot;</span>%(pmax, labels[max_index].strip()))<br>    <span class="hljs-attribute">print</span>(fps)<br><span class="hljs-attribute">a</span> = kpu.deinit(task)<br><br></code></pre></td></tr></table></figure><h2 id="程序演示"><a href="#程序演示" class="headerlink" title="程序演示"></a>程序演示</h2><iframe src="//player.bilibili.com/player.html?aid=795563096&bvid=BV12C4y1W7e8&cid=189013858&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="min-height:600px;width:100%;height:100%;"> </iframe>]]></content>
    
    
    <categories>
      
      <category>MaixPy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MaixPy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【MaixPy 教程】用mixly玩转K210——人脸追踪</title>
    <link href="/post/41282.html"/>
    <url>/post/41282.html</url>
    
    <content type="html"><![CDATA[<h1 id="【MaixPy-教程】用mixly玩转K210——人脸追踪"><a href="#【MaixPy-教程】用mixly玩转K210——人脸追踪" class="headerlink" title="【MaixPy 教程】用mixly玩转K210——人脸追踪"></a>【MaixPy 教程】用mixly玩转K210——人脸追踪</h1><p><img src="https://img-blog.csdnimg.cn/2020042816195735.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>【MaixPy系列教程：】</p><ul><li><a href="https://blog.csdn.net/tonycarson/article/details/105717060">【MaixPy教程】用maixHub训练模型进行开源硬件识别</a></li><li><a href="https://blog.csdn.net/tonycarson/article/details/105744677">【MaixPy 教程】用mixly玩转K210——口罩识别</a></li><li><a href="https://blog.csdn.net/tonycarson/article/details/105756452">【MaixPy教程】用mixly玩转K210——调用AI-OneNET API实现车牌识别</a></li></ul><p>之前在sipeed blog 看到一篇教程：<a href="https://blog.sipeed.com/p/233.html">【MaixPy 人脸追踪云台教程】</a>里面用到了代码编程和pid算法！但对于小朋友或者初学者入门比较难，今天就让我带领大家用图形化编程编写一个 人脸追踪案例！好了废话不多说！Let’s Go!!!</p><h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><h3 id="所需要材料"><a href="#所需要材料" class="headerlink" title="所需要材料"></a>所需要材料</h3><p><img src="https://img-blog.csdnimg.cn/20200428114942565.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>1、需要一个舵机云台（可以3D打印<a href="https://www.thingiverse.com/thing:708819">mini 舵机云台</a>或者在某宝买一个<br>）<br>2、MaixPy dock 一个<br>3、9克舵机（sg90）两个<br>4、杜邦线若干</p><h3 id="云台组装"><a href="#云台组装" class="headerlink" title="云台组装"></a>云台组装</h3><p>1、组装X轴舵机（ps:控制摄像头水平方面的移动）<br><img src="https://img-blog.csdnimg.cn/20200428115557201.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>2、组装y轴方面的舵机（ps:可以控制摄像头竖直方向的移动）<br><img src="https://img-blog.csdnimg.cn/20200428115948129.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>3、使用 公对母 杜邦线连接 舵机信号线 与dock。</p><p><code>舵机线定义为：红色：5V；褐色：GND；黄色：信号线。</code></p><p>我们将底部舵机的信号线连接至dock的16脚，第二个舵机的信号线连接至17脚。（如果连接反，后面的动作会异常，交换两根线即可【mixly中自己重新写入了io-17、io-16】）<br><img src="https://img-blog.csdnimg.cn/20200428140842435.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="程序编写"><a href="#程序编写" class="headerlink" title="程序编写"></a>程序编写</h2><h3 id="1、刷入人脸检测模型"><a href="#1、刷入人脸检测模型" class="headerlink" title="1、刷入人脸检测模型"></a>1、刷入人脸检测模型</h3><p>人脸模型可以在<a href="https://www.maixhub.com/">maixhub下载</a>或者百度网盘下载（链接: <a href="https://pan.baidu.com/s/1007krAq_oZspySxmnAVPkw">https://pan.baidu.com/s/1007krAq_oZspySxmnAVPkw</a> 提取码: caeg 复制这段内容后打开百度网盘手机App，操作更方便哦）<br><img src="https://img-blog.csdnimg.cn/20200428141835790.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>下載好模型，用kflash_gui把人脸检测模型刷入到dock的flash的地址：0x300000。（或者是将模型文件保存到TF卡中）<br><img src="https://img-blog.csdnimg.cn/20200428142221426.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="人脸检测"><a href="#人脸检测" class="headerlink" title="人脸检测"></a>人脸检测</h3><p>1、首先将我们的摄像头、显示屏、和KPU进行初始化后，获取摄像头的图片，用yolo2运行网络积木块，获取图像的信息,返回一个字典（我们需要用到的是”x”,”y”,”w”,”h”等键所对应的值）。具体操作如下：<br><img src="https://img-blog.csdnimg.cn/202004281436538.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>2、标记人脸部分，在机器视觉指令中找到绘制矩形和绘制十字积木块、用矩形解析积木块将<code>code</code>中<code>i</code>数据解析后的<code>&quot;x&quot;,&quot;y&quot;,&quot;w&quot;,&quot;h&quot;</code>显示在屏幕上,具体操作如下：<br><img src="https://img-blog.csdnimg.cn/20200428145543467.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200428145903564.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="人脸追踪"><a href="#人脸追踪" class="headerlink" title="人脸追踪"></a>人脸追踪</h3><p>首先我们需要定义两个定时器和初始化兩個舵機。</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">PWM： 脉宽调制模块， 硬件支持的PWM， 可以指定任意引脚（0到47引脚）<br>每个 PWM 依赖于一个定时器， 即当定时器与 PWM 功能绑定后， 不能作为普通定时器使用了。 <br>因为有<span class="hljs-number"> 3 </span>个定时器， 每个定时器有<span class="hljs-number"> 4 </span>个通道， 即最大可以同时产生<span class="hljs-number"> 12 </span>路 PWM 波形<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200428150202298.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>我们的摄像头的帧大小是320 * 240，我们需要对检测的摄像头检测到不同位置的脸，采取不同的操作：看下图：<br><img src="https://img-blog.csdnimg.cn/20200428151856879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如果人脸的中心x位置小于150，让水平舵机 变量<code>X轴 = X轴 -2</code>,如果人脸中心的x位置大于170，让水平舵机 变量<code>Y轴 = Y轴 + 2</code>.如果人脸中心的Y位置小于110，让水平舵机 变量<code>Y轴 = Y轴 +2</code>,如果人脸中心的Y位置大于130，让水平舵机 变量<code>Y轴 = Y轴 - 2</code>,再结合舵机角度的范围进行判断。具体程序如下：<br><img src="https://img-blog.csdnimg.cn/202004281524155.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>注：</strong><br>1、由于人距离摄像的远近会改变人脸中心，x,y的变化，为了更好的演示效果，我将检测到的人脸大小規定在一定的範圍内。<br>2、可以加入PID算法，让舵机转动更加精准。</p><h2 id="程序演示"><a href="#程序演示" class="headerlink" title="程序演示"></a>程序演示</h2><iframe src="//player.bilibili.com/player.html?aid=710617765&bvid=BV1oQ4y1N7wK&cid=189015686&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="min-height:600px;width:100%;height:100%;"> </iframe>]]></content>
    
    
    <categories>
      
      <category>MaixPy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MaixPy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【MaixPy教程】用mixly玩转K210——口罩识别</title>
    <link href="/post/16146.html"/>
    <url>/post/16146.html</url>
    
    <content type="html"><![CDATA[<h1 id="【MaixPy-教程】用mixly玩转口罩识别"><a href="#【MaixPy-教程】用mixly玩转口罩识别" class="headerlink" title="【MaixPy 教程】用mixly玩转口罩识别"></a>【MaixPy 教程】用mixly玩转口罩识别</h1><p><img src="https://img-blog.csdnimg.cn/20200425085711773.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="top"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前写了写了一篇文章<a href="https://blog.csdn.net/tonycarson/article/details/105717060">【MaixPy教程】用maixHub训练模型进行开源硬件识别</a>，自己是教少儿编程的老师，如何把代码转出图型化积木方式教授小孩子呢？首先感谢<strong>童芯悟创</strong>为mixly专门写的K210库，让积木编程成为可能！疫情期间口罩已经成为了一种必须品，出入公共场合要求佩戴口罩。那我们怎么用开源硬件来辨别人们是否有戴口罩呢？接下来本篇文章将带领读者用mixly编写一个口罩识别的程序！</p><h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><p>1、通过<a href="https://www.maixhub.com/">maxihub在线训练</a><br>一个口罩模型，如果不知道怎么操作的读者可以看一下我的<a href="https://blog.csdn.net/tonycarson/article/details/105717060">上篇文章</a><br>。<img src="https://img-blog.csdnimg.cn/20200425091243205.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>2、下载好mixly for MaixPy文件（链接：<a href="https://pan.baidu.com/s/1rkmGThNKL3UR93YSZUWcxQ">https://pan.baidu.com/s/1rkmGThNKL3UR93YSZUWcxQ</a><br>提取码：alzk ）<br>3、用读卡器将口罩识别模型导入TF卡</p><h2 id="编程环节"><a href="#编程环节" class="headerlink" title="编程环节"></a>编程环节</h2><p>好了！万事俱备，开始本节最重要的环境编写程序，首先打开我们的mixly，选择k210_maixpy开发板如下图所示：。<br><img src="https://img-blog.csdnimg.cn/20200425092959921.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>1、先对我们的摄像头和屏幕进行初始化后让屏幕显示摄像头画面：<br><img src="https://img-blog.csdnimg.cn/2020042509341114.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>2、由于我们用DataAssitantV1.0图像处理软件处理后的照片格式是：<strong>224<em>224**,使用口罩识别模型我们需要将摄像头窗口设置为**224</em>224</strong><br>如下图所示：<br><img src="https://img-blog.csdnimg.cn/20200425093857327.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>3、用人工智能模块：初始yolo2,并加载口罩识别模型（模型的加载有两种方式：一种是flash加载，另一种是文件路径加载，这里用到的是第二种）：<br><img src="https://img-blog.csdnimg.cn/202004250942225.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>4、开始对摄像获取的照片进行yolo2向前运算并打印出来：<br><img src="https://img-blog.csdnimg.cn/20200425094926569.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>注：</strong><br>在图像yolo2向前运算过程中，返回的是一个元组，第一个是mask的置信度，第二个是unmask的置信度。两个相加等于1.<br>5、对yolo2向前运算返回的数据进行数据处理，处理过程如下：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">1、先定义一个变量：pmasx获取元组中最大的的那个值<br>2、然后定义一个变量：max_index获取最大值所在元组中的索引<br>3、之后将最大置信度（pmasx）和我们事先定义好的mylist列表中(max_index)数据显示在屏幕上面<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200425095936430.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="结果演示："><a href="#结果演示：" class="headerlink" title="结果演示："></a>结果演示：</h2><p><img src="https://img-blog.csdnimg.cn/20200425100022672.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="视频演示"><a href="#视频演示" class="headerlink" title="视频演示"></a>视频演示</h2><iframe src="//player.bilibili.com/player.html?aid=925502457&bvid=BV17T4y137rz&cid=189016199&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="min-height:600px;width:100%;height:100%;"> </iframe><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>通过本教程的学习，可以很轻松的掌握一个口罩模型的使用方法和使用规则，之后可以结合arduino做一个口罩识别门禁系统项目。</p>]]></content>
    
    
    <categories>
      
      <category>MaixPy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MaixPy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【MaixPy教程】用mixly玩转K210——调用AI_OneNET API实现车牌识别</title>
    <link href="/post/9233.html"/>
    <url>/post/9233.html</url>
    
    <content type="html"><![CDATA[<h1 id="【MaixPy教程】用mixly玩转K210——调用AI-OneNET-API实现车牌识别"><a href="#【MaixPy教程】用mixly玩转K210——调用AI-OneNET-API实现车牌识别" class="headerlink" title="【MaixPy教程】用mixly玩转K210——调用AI-OneNET API实现车牌识别"></a>【MaixPy教程】用mixly玩转K210——调用AI-OneNET API实现车牌识别</h1><p><img src="https://img-blog.csdnimg.cn/20200425205306654.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>【MaixPy系列教程：】</p><ul><li><a href="https://blog.csdn.net/tonycarson/article/details/105717060">【MaixPy教程】用maixHub训练模型进行开源硬件识别</a></li><li><a href="https://blog.csdn.net/tonycarson/article/details/105744677">【MaixPy 教程】用mixly玩转K210——口罩识别</a></li><li><a href="https://blog.csdn.net/tonycarson/article/details/105808550">【MaixPy 教程】用mixly玩转K210——人脸追踪</a><h3 id="什么是oneNET-AI，他可以做什么？"><a href="#什么是oneNET-AI，他可以做什么？" class="headerlink" title="什么是oneNET  AI，他可以做什么？"></a>什么是oneNET  AI，他可以做什么？</h3>人工智能与物联网的融合带来的是一个全新的时代。这个时代，人与人的连接、人与物的连接、物与物的连接都将被全面赋能，人工智能+物联网的化学反应，将深度赋能时代。<br>作为国内三大运营商物联网开放平台中首个上线的人工智能开放平台，中国移动OneNET AI将解锁更多行业、更多场景的物联网应用，让应用智能化“无处不在”。<br>OneNET AI 提供人脸识别、图像识别、图像处理和视频处理等全方位的AI能力，同时通过应用封装，提供更贴近用户的解决方案.<br><img src="https://img-blog.csdnimg.cn/20200425210746825.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><h3 id="如何申请OneNET账户？"><a href="#如何申请OneNET账户？" class="headerlink" title="如何申请OneNET账户？"></a>如何申请OneNET账户？</h3>流程如下：<br><img src="https://img-blog.csdnimg.cn/2020042521251219.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ul><p>1.用户注册登录<br>进入<a href="https://open.iot.10086.cn/ai/index.html">OneNET AI平台首页</a><br>，点击顶部导航栏右侧注册，将跳转到OneNET平台注册界面，填写相关信息完成用户注册。<br><img src="https://img-blog.csdnimg.cn/20200425212713670.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200425212725298.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>首次使用，注册成功后即可登录平台。在OneNET AI平台首页，点击顶部导航栏右侧登录，进入登录页面，输入账号、密码、验证码进行登录。<br><img src="https://img-blog.csdnimg.cn/20200425212823871.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200425212845878.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>2.实名认证<br>通过实名认证的新用户即可申请使用API调用权限。<br>完成账号注册后，需登录OneNET平台，点击头像下拉菜单“实名认证”进入实名认证页面，进行实名认证操作。<br>温馨提示：实名认证方式分为企业和个人两种类型，可根据自己的需要选择认证方式；已经认证为个人的用户可升级成为企业；<br>3.API调用权限申请<br>完成实名认证的用户可根据页面提示，进行API调用权限开通。您可以提交申请单等待客服人员的审核；或者按照页面提供的联系方式主动联系客服人员，快速开通API调用权限。<br><img src="https://img-blog.csdnimg.cn/20200425213101388.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200425213101218.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200425213101146.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020042521310199.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>4.API调用<br>目前AI产品主要开放了REST API形式的服务，你可以点击平台主页「帮助文档」-「技术文档」目录下的各技术服务文档，查看具体使用方法及参数。<br>在您正式调用AI能力之前，请先通过用户鉴权方法获取Login Token，便于后续调用各项AI能力，方法详见用户鉴权文档。<br>温馨提示：Login Token的有效期为24小时，请您调用时注意在程序中定期请求新的token。</p><h2 id="编写程序"><a href="#编写程序" class="headerlink" title="编写程序"></a>编写程序</h2><p>打开我们的mixly找到人工智能模块可以看到有关AI_OneNET的积木块：<br><img src="https://img-blog.csdnimg.cn/20200425213637573.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在阅读OneNET AI平台的帮助文档，要用人工智能的API首先要获得用户鉴定权（也就是token）<br><img src="https://img-blog.csdnimg.cn/20200425214141527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如果用python来写一个请求示例代码要这么多代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleEncode</span>():</span><br>    keyStr = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopqrstuvwxyz~!@#$%^&amp;*()_+-=&#123;&#125;[]:;&lt;,&gt;.?/|&quot;</span><br>    keyLength = <span class="hljs-built_in">len</span>(keyStr)<br>    encryptionA = <span class="hljs-number">17</span><br>    encryptionB = <span class="hljs-number">8</span><br>    decodeA = <span class="hljs-number">0</span><br>    preCountMax = <span class="hljs-number">15</span><br>    postCount = <span class="hljs-number">5</span><br>    randomChar = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnop&quot;</span><br>    randomCharLength = <span class="hljs-built_in">len</span>(randomChar)<br>    <span class="hljs-comment">#base64字符</span><br>    ALPHABET = <span class="hljs-string">&quot;ABCDEFGHIJKLMN0123456789OPQRSTUVWXYZ+/abcdefghijklmnopqrstuvwxyz&quot;</span><br>    STANDARD = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>  <span class="hljs-comment"># 标准的字符串索引</span><br><br>    <span class="hljs-comment">#找到密钥</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,keyLength):<br>            <span class="hljs-keyword">if</span> (encryptionA * i) % keyLength == <span class="hljs-number">1</span>:<br>                decodeA = i<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">base64Encode</span>(<span class="hljs-params">self,sourceStr</span>):</span><br>        encode = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> base64.b64encode(sourceStr.encode()).decode():<br>            <span class="hljs-keyword">if</span> ch == <span class="hljs-string">&#x27;=&#x27;</span>:<br>                encode += <span class="hljs-string">&#x27;=&#x27;</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>                    <span class="hljs-keyword">if</span> ch == self.STANDARD[i]:<br>                        encode += self.ALPHABET[i]<br>        <span class="hljs-keyword">return</span> encode<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encrpyt</span>(<span class="hljs-params">self,sourceStr</span>):</span><br>        srcLength = <span class="hljs-built_in">len</span>(sourceStr)<br>        <span class="hljs-comment">#先加入干扰字符的数量</span><br>        addCharCount = random.randint(<span class="hljs-number">1</span>,self.preCountMax) <span class="hljs-keyword">if</span> srcLength &lt; self.preCountMax <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>        <span class="hljs-comment">#随机字符</span><br>        sb = <span class="hljs-built_in">str</span>(addCharCount)+<span class="hljs-string">&quot;|&quot;</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(addCharCount):<br>            sb += self.randomChar[random.randint(<span class="hljs-number">0</span>,self.randomCharLength-<span class="hljs-number">1</span>)]<br><br>        sb += sourceStr<br>        <span class="hljs-comment">#尾部固定增加x个字符</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.postCount):<br>            sb += self.randomChar[random.randint(<span class="hljs-number">0</span>,self.randomCharLength-<span class="hljs-number">1</span>)]<br><br>        <span class="hljs-comment">#base64 加密</span><br>        base64Str = self.base64Encode(sb)<br><br>        destStr = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(base64Str)):<br>            <span class="hljs-comment">#找到字符所在位置</span><br>            position = self.keyStr.find(base64Str[i])<br><br>            <span class="hljs-comment">#对字符进行转换</span><br>            y = (self.encryptionA * position + self.encryptionB) % self.keyLength<br><br>            <span class="hljs-comment">#找到替换后的字符</span><br><br>            destStr += self.keyStr[y]<br><br>        <span class="hljs-keyword">return</span> destStr<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    url = <span class="hljs-string">&#x27;http://ai.heclouds.com:9090/v1/user/oneNetLogin&#x27;</span><br>    headers = &#123;<br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br>    &#125;<br>    account = <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-comment"># 用户名</span><br>    password = <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-comment"># 用户密码</span><br>    simpleencode = SimpleEncode()<br>    data = &#123;<span class="hljs-string">&#x27;account&#x27;</span>: account, <span class="hljs-string">&#x27;password&#x27;</span>: simpleencode.encrpyt(password)&#125;<br>    print(data)<br>    req = requests.post(url, data=json.dumps(data), headers=headers)<br>    print(req.text)<br></code></pre></td></tr></table></figure><p>那么在我们的mixly里只需要下面几个积木块就可以实现：<br><img src="https://img-blog.csdnimg.cn/20200425214858384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>有了Token码，现在我们就可以调用API中的车牌信息识别：<br><img src="https://img-blog.csdnimg.cn/20200425215125127.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在调用车牌识别之前首先我们需要将我们的摄像头和液晶屏幕初始化然后实时拍照将图片上传到AI云平台，通过AI运算把识别到的图片信息以字典的形式发送到MaixPy 主控板上。我们只需要字典中的<code>date</code>数据，里面有车牌号和车牌颜色。如下图所示：<br><img src="https://img-blog.csdnimg.cn/20200425220229163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>虽然这样子识别到了车牌号，调用API的程序是一直运行的，这时会造成我们的调用次数的减少，虽然每天有10000次的调用量，但也不能经得起这样调用啊，所用我们对程序做了一个小小的优化，加入按键控制进行调用API，（我这里用的是maix DOCK，一个按钮引脚和GPIO16相连，没有板载按钮的可以使用外接按钮）</p><h2 id="程序优化："><a href="#程序优化：" class="headerlink" title="程序优化："></a>程序优化：</h2><p><img src="https://img-blog.csdnimg.cn/20200425221729391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvbnljYXJzb24=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="程序演示："><a href="#程序演示：" class="headerlink" title="程序演示："></a>程序演示：</h2><iframe src="//player.bilibili.com/player.html?aid=753079359&bvid=BV1Yk4y1k76d&cid=189015073&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="min-height:600px;width:100%;height:100%;"> </iframe>]]></content>
    
    
    <categories>
      
      <category>MaixPy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MaixPy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【python学习】-图像和办公文档处理</title>
    <link href="/post/3507.html"/>
    <url>/post/3507.html</url>
    
    <content type="html"><![CDATA[<h1 id="【python学习】-图像和办公文档处理"><a href="#【python学习】-图像和办公文档处理" class="headerlink" title="【python学习】-图像和办公文档处理"></a>【python学习】-图像和办公文档处理</h1><h2 id="图像和办公文档处理"><a href="#图像和办公文档处理" class="headerlink" title="图像和办公文档处理"></a>图像和办公文档处理</h2><p>用程序来处理图像和办公文档经常出现在实际开发中，Python的标准库中虽然没有直接支持这些操作的模块，但我们可以通过Python生态圈中的第三方模块来完成这些操作。</p><h3 id="操作图像"><a href="#操作图像" class="headerlink" title="操作图像"></a>操作图像</h3><h4 id="计算机图像相关知识"><a href="#计算机图像相关知识" class="headerlink" title="计算机图像相关知识"></a>计算机图像相关知识</h4><ol><li><p>颜色。如果你有使用颜料画画的经历，那么一定知道混合红、黄、蓝三种颜料可以得到其他的颜色，事实上这三种颜色就是被我们称为美术三原色的东西，它们是不能再分解的基本颜色。在计算机中，我们可以将红、绿、蓝三种色光以不同的比例叠加来组合成其他的颜色，因此这三种颜色就是色光三原色，所以我们通常会将一个颜色表示为一个RGB值或RGBA值（其中的A表示Alpha通道，它决定了透过这个图像的像素，也就是透明度）。</p><table><thead><tr><th align="center">名称</th><th align="center">RGBA值</th><th align="center">名称</th><th align="center">RGBA值</th></tr></thead><tbody><tr><td align="center">White</td><td align="center">(255, 255, 255, 255)</td><td align="center">Red</td><td align="center">(255, 0, 0, 255)</td></tr><tr><td align="center">Green</td><td align="center">(0, 255, 0, 255)</td><td align="center">Blue</td><td align="center">(0, 0, 255, 255)</td></tr><tr><td align="center">Gray</td><td align="center">(128, 128, 128, 255)</td><td align="center">Yellow</td><td align="center">(255, 255, 0, 255)</td></tr><tr><td align="center">Black</td><td align="center">(0, 0, 0, 255)</td><td align="center">Purple</td><td align="center">(128, 0, 128, 255)</td></tr></tbody></table></li><li><p>像素。对于一个由数字序列表示的图像来说，最小的单位就是图像上单一颜色的小方格，这些小方块都有一个明确的位置和被分配的色彩数值，而这些一小方格的颜色和位置决定了该图像最终呈现出来的样子，它们是不可分割的单位，我们通常称之为像素（pixel）。每一个图像都包含了一定量的像素，这些像素决定图像在屏幕上所呈现的大小。</p></li></ol><h4 id="用Pillow操作图像"><a href="#用Pillow操作图像" class="headerlink" title="用Pillow操作图像"></a>用Pillow操作图像</h4><p>Pillow是由从著名的Python图像处理库PIL发展出来的一个分支，通过Pillow可以实现图像压缩和图像处理等各种操作。可以使用下面的命令来安装Pillow。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">pip install pillow<br></code></pre></td></tr></table></figure><p>Pillow中最为重要的是Image类，读取和处理图像都要通过这个类来完成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./res/guido.jpg&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>image.<span class="hljs-built_in">format</span>, image.size, image.mode<br>(<span class="hljs-string">&#x27;JPEG&#x27;</span>, (<span class="hljs-number">500</span>, <span class="hljs-number">750</span>), <span class="hljs-string">&#x27;RGB&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>image.show()<br></code></pre></td></tr></table></figure><ol><li><p>剪裁图像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./res/guido.jpg&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>rect = <span class="hljs-number">80</span>, <span class="hljs-number">20</span>, <span class="hljs-number">310</span>, <span class="hljs-number">360</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>image.crop(rect).show()<br></code></pre></td></tr></table></figure></li><li><p>生成缩略图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./res/guido.jpg&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>size = <span class="hljs-number">128</span>, <span class="hljs-number">128</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>image.thumbnail(size)<br><span class="hljs-meta">&gt;&gt;&gt; </span>image.show()<br></code></pre></td></tr></table></figure></li><li><p>缩放和黏贴图像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>image1 = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./res/luohao.png&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>image2 = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./res/guido.jpg&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>rect = <span class="hljs-number">80</span>, <span class="hljs-number">20</span>, <span class="hljs-number">310</span>, <span class="hljs-number">360</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>guido_head = image2.crop(rect)<br><span class="hljs-meta">&gt;&gt;&gt; </span>width, height = guido_head.size<br><span class="hljs-meta">&gt;&gt;&gt; </span>image1.paste(guido_head.resize((<span class="hljs-built_in">int</span>(width / <span class="hljs-number">1.5</span>), <span class="hljs-built_in">int</span>(height / <span class="hljs-number">1.5</span>))), (<span class="hljs-number">172</span>, <span class="hljs-number">40</span>))<br></code></pre></td></tr></table></figure></li><li><p>旋转和翻转</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./res/guido.png&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>image.rotate(<span class="hljs-number">180</span>).show()<br><span class="hljs-meta">&gt;&gt;&gt; </span>image.transpose(Image.FLIP_LEFT_RIGHT).show()<br></code></pre></td></tr></table></figure></li><li><p>操作像素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./res/guido.jpg&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">80</span>, <span class="hljs-number">310</span>):<br><span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>, <span class="hljs-number">360</span>):<br><span class="hljs-meta">... </span>        image.putpixel((x, y), (<span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>))<br><span class="hljs-meta">... </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>image.show()<br></code></pre></td></tr></table></figure></li><li><p>滤镜效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, ImageFilter<br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./res/guido.jpg&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>image.<span class="hljs-built_in">filter</span>(ImageFilter.CONTOUR).show()<br></code></pre></td></tr></table></figure></li></ol><h3 id="处理Excel电子表格"><a href="#处理Excel电子表格" class="headerlink" title="处理Excel电子表格"></a>处理Excel电子表格</h3><p>Python的openpyxl模块让我们可以在Python程序中读取和修改Excel电子表格，当然实际工作中，我们可能会用LibreOffice Calc和OpenOffice Calc来处理Excel的电子表格文件，这就意味着openpyxl模块也能处理来自这些软件生成的电子表格。关于openpyxl的使用手册和使用文档可以查看它的<a href="https://openpyxl.readthedocs.io/en/stable/#">官方文档</a>。</p><h3 id="处理Word文档"><a href="#处理Word文档" class="headerlink" title="处理Word文档"></a>处理Word文档</h3><p>利用python-docx模块，Pytho 可以创建和修改Word文档，当然这里的Word文档不仅仅是指通过微软的Office软件创建的扩展名为docx的文档，LibreOffice Writer和OpenOffice Writer都是免费的字处理软件。</p><h3 id="处理PDF文档"><a href="#处理PDF文档" class="headerlink" title="处理PDF文档"></a>处理PDF文档</h3><p>PDF是Portable Document Format的缩写，使用.pdf作为文件扩展名。接下来我们就研究一下如何通过Python实现从PDF读取文本内容和从已有的文档生成新的PDF文件。</p>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【python学习】-文件和异常</title>
    <link href="/post/53429.html"/>
    <url>/post/53429.html</url>
    
    <content type="html"><![CDATA[<h1 id="【python学习】-文件和异常"><a href="#【python学习】-文件和异常" class="headerlink" title="【python学习】-文件和异常"></a>【python学习】-文件和异常</h1><h2 id="文件和异常"><a href="#文件和异常" class="headerlink" title="文件和异常"></a>文件和异常</h2><p>实际开发中常常会遇到对数据进行<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96">持久化</a>操作的场景，而实现数据持久化最直接简单的方式就是将数据保存到文件中。说到“文件”这个词，可能需要先科普一下关于<a href="https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F">文件系统</a>的知识，但是这里我们并不浪费笔墨介绍这个概念，请大家自行通过维基百科进行了解。</p><p>在Python中实现文件的读写操作其实非常简单，通过Python内置的<code>open</code>函数，我们可以指定文件名、操作模式、编码信息等来获得操作文件的对象，接下来就可以对文件进行读写操作了。这里所说的操作模式是指要打开什么样的文件（字符文件还是二进制文件）以及做什么样的操作（读、写还是追加），具体的如下表所示。</p><table><thead><tr><th>操作模式</th><th>具体含义</th></tr></thead><tbody><tr><td><code>&#39;r&#39;</code></td><td>读取 （默认）</td></tr><tr><td><code>&#39;w&#39;</code></td><td>写入（会先截断之前的内容）</td></tr><tr><td><code>&#39;x&#39;</code></td><td>写入，如果文件已经存在会产生异常</td></tr><tr><td><code>&#39;a&#39;</code></td><td>追加，将内容写入到已有文件的末尾</td></tr><tr><td><code>&#39;b&#39;</code></td><td>二进制模式</td></tr><tr><td><code>&#39;t&#39;</code></td><td>文本模式（默认）</td></tr><tr><td><code>&#39;+&#39;</code></td><td>更新（既可以读又可以写）</td></tr></tbody></table><h3 id="读写文本文件"><a href="#读写文本文件" class="headerlink" title="读写文本文件"></a>读写文本文件</h3><p>读取文本文件时，需要在使用<code>open</code>函数时指定好带路径的文件名（可以使用相对路径或绝对路径）并将文件模式设置为<code>&#39;r&#39;</code>（如果不指定，默认值也是<code>&#39;r&#39;</code>），然后通过<code>encoding</code>参数指定编码（如果不指定，默认值是None，那么在读取文件时使用的是操作系统默认的编码），如果不能保证保存文件时使用的编码方式与encoding参数指定的编码方式是一致的，那么就可能因无法解码字符而导致读取失败。下面的例子演示了如何读取一个纯文本文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;致橡树.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    print(f.read())<br>    f.close()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>请注意上面的代码，如果<code>open</code>函数指定的文件并不存在或者无法打开，那么将引发异常状况导致程序崩溃。为了让代码有一定的健壮性和容错性，我们可以使用Python的异常机制对可能在运行时发生状况的代码进行适当的处理，如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    f = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">try</span>:<br>        f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;致橡树.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        print(f.read())<br>    <span class="hljs-keyword">except</span> FileNotFoundError:<br>        print(<span class="hljs-string">&#x27;无法打开指定的文件!&#x27;</span>)<br>    <span class="hljs-keyword">except</span> LookupError:<br>        print(<span class="hljs-string">&#x27;指定了未知的编码!&#x27;</span>)<br>    <span class="hljs-keyword">except</span> UnicodeDecodeError:<br>        print(<span class="hljs-string">&#x27;读取文件时解码错误!&#x27;</span>)<br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-keyword">if</span> f:<br>            f.close()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>在Python中，我们可以将那些在运行时可能会出现状况的代码放在<code>try</code>代码块中，在<code>try</code>代码块的后面可以跟上一个或多个<code>except</code>来捕获可能出现的异常状况。例如在上面读取文件的过程中，文件找不到会引发<code>FileNotFoundError</code>，指定了未知的编码会引发<code>LookupError</code>，而如果读取文件时无法按指定方式解码会引发<code>UnicodeDecodeError</code>，我们在<code>try</code>后面跟上了三个<code>except</code>分别处理这三种不同的异常状况。最后我们使用<code>finally</code>代码块来关闭打开的文件，释放掉程序中获取的外部资源，由于<code>finally</code>块的代码不论程序正常还是异常都会执行到（甚至是调用了<code>sys</code>模块的<code>exit</code>函数退出Python环境，<code>finally</code>块都会被执行，因为<code>exit</code>函数实质上是引发了<code>SystemExit</code>异常），因此我们通常把<code>finally</code>块称为“总是执行代码块”，它最适合用来做释放外部资源的操作。如果不愿意在<code>finally</code>代码块中关闭文件对象释放资源，也可以使用上下文语法，通过<code>with</code>关键字指定文件对象的上下文环境并在离开上下文环境时自动释放文件资源，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;致橡树.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            print(f.read())<br>    <span class="hljs-keyword">except</span> FileNotFoundError:<br>        print(<span class="hljs-string">&#x27;无法打开指定的文件!&#x27;</span>)<br>    <span class="hljs-keyword">except</span> LookupError:<br>        print(<span class="hljs-string">&#x27;指定了未知的编码!&#x27;</span>)<br>    <span class="hljs-keyword">except</span> UnicodeDecodeError:<br>        print(<span class="hljs-string">&#x27;读取文件时解码错误!&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>除了使用文件对象的<code>read</code>方法读取文件之外，还可以使用<code>for-in</code>循环逐行读取或者用<code>readlines</code>方法将文件按行读取到一个列表容器中，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-comment"># 一次性读取整个文件内容</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;致橡树.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        print(f.read())<br><br>    <span class="hljs-comment"># 通过for-in循环逐行读取</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;致橡树.txt&#x27;</span>, mode=<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:<br>            print(line, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>            time.sleep(<span class="hljs-number">0.5</span>)<br>    print()<br><br>    <span class="hljs-comment"># 读取文件按行读取到列表中</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;致橡树.txt&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        lines = f.readlines()<br>    print(lines)<br>    <br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>要将文本信息写入文件文件也非常简单，在使用<code>open</code>函数时指定好文件名并将文件模式设置为<code>&#39;w&#39;</code>即可。注意如果需要对文件内容进行追加式写入，应该将模式设置为<code>&#39;a&#39;</code>。如果要写入的文件不存在会自动创建文件而不是引发异常。下面的例子演示了如何将1-9999之间的素数分别写入三个文件中（1-99之间的素数保存在a.txt中，100-999之间的素数保存在b.txt中，1000-9999之间的素数保存在c.txt中）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sqrt<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_prime</span>(<span class="hljs-params">n</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;判断素数的函数&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> n &gt; <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">int</span>(sqrt(n)) + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> n % factor == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span> <span class="hljs-keyword">if</span> n != <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    filenames = (<span class="hljs-string">&#x27;a.txt&#x27;</span>, <span class="hljs-string">&#x27;b.txt&#x27;</span>, <span class="hljs-string">&#x27;c.txt&#x27;</span>)<br>    fs_list = []<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> filenames:<br>            fs_list.append(<span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>        <span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10000</span>):<br>            <span class="hljs-keyword">if</span> is_prime(number):<br>                <span class="hljs-keyword">if</span> number &lt; <span class="hljs-number">100</span>:<br>                    fs_list[<span class="hljs-number">0</span>].write(<span class="hljs-built_in">str</span>(number) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>                <span class="hljs-keyword">elif</span> number &lt; <span class="hljs-number">1000</span>:<br>                    fs_list[<span class="hljs-number">1</span>].write(<span class="hljs-built_in">str</span>(number) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    fs_list[<span class="hljs-number">2</span>].write(<span class="hljs-built_in">str</span>(number) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> ex:<br>        print(ex)<br>        print(<span class="hljs-string">&#x27;写文件时发生错误!&#x27;</span>)<br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-keyword">for</span> fs <span class="hljs-keyword">in</span> fs_list:<br>            fs.close()<br>    print(<span class="hljs-string">&#x27;操作完成!&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="读写二进制文件"><a href="#读写二进制文件" class="headerlink" title="读写二进制文件"></a>读写二进制文件</h3><p>知道了如何读写文本文件要读写二进制文件也就很简单了，下面的代码实现了复制图片文件的功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;guido.jpg&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> fs1:<br>            data = fs1.read()<br>            print(<span class="hljs-built_in">type</span>(data))  <span class="hljs-comment"># &lt;class &#x27;bytes&#x27;&gt;</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;吉多.jpg&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> fs2:<br>            fs2.write(data)<br>    <span class="hljs-keyword">except</span> FileNotFoundError <span class="hljs-keyword">as</span> e:<br>        print(<span class="hljs-string">&#x27;指定的文件无法打开.&#x27;</span>)<br>    <span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> e:<br>        print(<span class="hljs-string">&#x27;读写文件时出现错误.&#x27;</span>)<br>    print(<span class="hljs-string">&#x27;程序执行结束.&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="读写JSON文件"><a href="#读写JSON文件" class="headerlink" title="读写JSON文件"></a>读写JSON文件</h3><p>通过上面的讲解，我们已经知道如何将文本数据和二进制数据保存到文件中，那么这里还有一个问题，如果希望把一个列表或者一个字典中的数据保存到文件中又该怎么做呢？答案是将数据以JSON格式进行保存。JSON是“JavaScript Object Notation”的缩写，它本来是JavaScript语言中创建对象的一种字面量语法，现在已经被广泛的应用于跨平台跨语言的数据交换，原因很简单，因为JSON也是纯文本，任何系统任何编程语言处理纯文本都是没有问题的。目前JSON基本上已经取代了XML作为异构系统间交换数据的事实标准。关于JSON的知识，更多的可以参考<a href="http://json.org/">JSON的官方网站</a>，从这个网站也可以了解到每种语言处理JSON数据格式可以使用的工具或三方库，下面是一个JSON的简单例子。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JSON">&#123;<br>    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;hockel&quot;</span>,<br>    <span class="hljs-attr">&quot;age&quot;</span>: <span class="hljs-number">38</span>,<br>    <span class="hljs-attr">&quot;qq&quot;</span>: <span class="hljs-number">957658</span>,<br>    <span class="hljs-attr">&quot;friends&quot;</span>: [<span class="hljs-string">&quot;王大锤&quot;</span>, <span class="hljs-string">&quot;白元芳&quot;</span>],<br>    <span class="hljs-attr">&quot;cars&quot;</span>: [<br>        &#123;<span class="hljs-attr">&quot;brand&quot;</span>: <span class="hljs-string">&quot;BYD&quot;</span>, <span class="hljs-attr">&quot;max_speed&quot;</span>: <span class="hljs-number">180</span>&#125;,<br>        &#123;<span class="hljs-attr">&quot;brand&quot;</span>: <span class="hljs-string">&quot;Audi&quot;</span>, <span class="hljs-attr">&quot;max_speed&quot;</span>: <span class="hljs-number">280</span>&#125;,<br>        &#123;<span class="hljs-attr">&quot;brand&quot;</span>: <span class="hljs-string">&quot;Benz&quot;</span>, <span class="hljs-attr">&quot;max_speed&quot;</span>: <span class="hljs-number">320</span>&#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>可能大家已经注意到了，上面的JSON跟Python中的字典其实是一样一样的，事实上JSON的数据类型和Python的数据类型是很容易找到对应关系的，如下面两张表所示。</p><table><thead><tr><th>JSON</th><th>Python</th></tr></thead><tbody><tr><td>object</td><td>dict</td></tr><tr><td>array</td><td>list</td></tr><tr><td>string</td><td>str</td></tr><tr><td>number (int / real)</td><td>int / float</td></tr><tr><td>true / false</td><td>True / False</td></tr><tr><td>null</td><td>None</td></tr></tbody></table><table><thead><tr><th>Python</th><th>JSON</th></tr></thead><tbody><tr><td>dict</td><td>object</td></tr><tr><td>list, tuple</td><td>array</td></tr><tr><td>str</td><td>string</td></tr><tr><td>int, float, int- &amp; float-derived Enums</td><td>number</td></tr><tr><td>True / False</td><td>true / false</td></tr><tr><td>None</td><td>null</td></tr></tbody></table><p>我们使用Python中的json模块就可以将字典或列表以JSON格式保存到文件中，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> json<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    mydict = &#123;<br>        <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;hockel&#x27;</span>,<br>        <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">38</span>,<br>        <span class="hljs-string">&#x27;qq&#x27;</span>: <span class="hljs-number">957658</span>,<br>        <span class="hljs-string">&#x27;friends&#x27;</span>: [<span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-string">&#x27;白元芳&#x27;</span>],<br>        <span class="hljs-string">&#x27;cars&#x27;</span>: [<br>            &#123;<span class="hljs-string">&#x27;brand&#x27;</span>: <span class="hljs-string">&#x27;BYD&#x27;</span>, <span class="hljs-string">&#x27;max_speed&#x27;</span>: <span class="hljs-number">180</span>&#125;,<br>            &#123;<span class="hljs-string">&#x27;brand&#x27;</span>: <span class="hljs-string">&#x27;Audi&#x27;</span>, <span class="hljs-string">&#x27;max_speed&#x27;</span>: <span class="hljs-number">280</span>&#125;,<br>            &#123;<span class="hljs-string">&#x27;brand&#x27;</span>: <span class="hljs-string">&#x27;Benz&#x27;</span>, <span class="hljs-string">&#x27;max_speed&#x27;</span>: <span class="hljs-number">320</span>&#125;<br>        ]<br>    &#125;<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;data.json&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> fs:<br>            json.dump(mydict, fs)<br>    <span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> e:<br>        print(e)<br>    print(<span class="hljs-string">&#x27;保存数据完成!&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>json模块主要有四个比较重要的函数，分别是：</p><ul><li><code>dump</code> - 将Python对象按照JSON格式序列化到文件中</li><li><code>dumps</code> - 将Python对象处理成JSON格式的字符串</li><li><code>load</code> - 将文件中的JSON数据反序列化成对象</li><li><code>loads</code> - 将字符串的内容反序列化成Python对象</li></ul><p>这里出现了两个概念，一个叫序列化，一个叫反序列化。自由的百科全书<a href="https://zh.wikipedia.org/">维基百科</a>上对这两个概念是这样解释的：“序列化（serialization）在计算机科学的数据处理中，是指将数据结构或对象状态转换为可以存储或传输的形式，这样在需要的时候能够恢复到原先的状态，而且通过序列化的数据重新获取字节时，可以利用这些字节来产生原始对象的副本（拷贝）。与这个过程相反的动作，即从一系列字节中提取数据结构的操作，就是反序列化（deserialization）”。</p><p>目前绝大多数网络数据服务（或称之为网络API）都是基于<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE">HTTP协议</a>提供JSON格式的数据，关于HTTP协议的相关知识，可以看看阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2016/08/http.html">《HTTP协议入门》</a>，如果想了解国内的网络数据服务，可以看看<a href="https://www.juhe.cn/">聚合数据</a>和<a href="http://www.avatardata.cn/">阿凡达数据</a>等网站，国外的可以看看<a href="http://apis.io/">{API}Search</a>网站。下面的例子演示了如何使用<a href="http://docs.python-requests.org/zh_CN/latest/">requests</a>模块（封装得足够好的第三方网络访问模块）访问网络API获取国内新闻，如何通过json模块解析JSON数据并显示新闻标题，这个例子使用了<a href="https://www.tianapi.com/">天行数据</a>提供的国内新闻数据接口，其中的APIKey需要自己到该网站申请。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    resp = requests.get(<span class="hljs-string">&#x27;http://api.tianapi.com/guonei/?key=APIKey&amp;num=10&#x27;</span>)<br>    data_model = json.loads(resp.text)<br>    <span class="hljs-keyword">for</span> news <span class="hljs-keyword">in</span> data_model[<span class="hljs-string">&#x27;newslist&#x27;</span>]:<br>        print(news[<span class="hljs-string">&#x27;title&#x27;</span>])<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>在Python中要实现序列化和反序列化除了使用json模块之外，还可以使用pickle和shelve模块，但是这两个模块是使用特有的序列化协议来序列化数据，因此序列化后的数据只能被Python识别。关于这两个模块的相关知识可以自己看看网络上的资料。另外，如果要了解更多的关于Python异常机制的知识，可以看看segmentfault上面的文章<a href="https://segmentfault.com/a/1190000007736783">《总结：Python中的异常处理》</a>，这篇文章不仅介绍了Python中异常机制的使用，还总结了一系列的最佳实践，很值得一读</p>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【python学习】-网络编程入门和网络应用开发</title>
    <link href="/post/35458.html"/>
    <url>/post/35458.html</url>
    
    <content type="html"><![CDATA[<h1 id="【python学习】-网络编程入门和网络应用开发"><a href="#【python学习】-网络编程入门和网络应用开发" class="headerlink" title="【python学习】-网络编程入门和网络应用开发"></a>【python学习】-网络编程入门和网络应用开发</h1><h2 id="网络编程入门"><a href="#网络编程入门" class="headerlink" title="网络编程入门"></a>网络编程入门</h2><h3 id="计算机网络基础"><a href="#计算机网络基础" class="headerlink" title="计算机网络基础"></a>计算机网络基础</h3><p>计算机网络是独立自主的计算机互联而成的系统的总称，组建计算机网络最主要的目的是实现多台计算机之间的通信和资源共享。今天计算机网络中的设备和计算机网络的用户已经多得不可计数，而计算机网络也可以称得上是一个“复杂巨系统”，对于这样的系统，我们不可能用一两篇文章把它讲清楚，有兴趣的读者可以自行阅读Andrew S.Tanenbaum老师的经典之作《计算机网络》或Kurose和Ross老师合著的《计算机网络:自顶向下方法》来了解计算机网络的相关知识。</p><h4 id="计算机网络发展史"><a href="#计算机网络发展史" class="headerlink" title="计算机网络发展史"></a>计算机网络发展史</h4><ol><li><p>1960s - 美国国防部ARPANET项目问世，奠定了分组交换网络的基础。</p></li><li><p>1980s - 国际标准化组织（ISO）发布OSI/RM，奠定了网络技术标准化的基础。</p></li><li><p>1990s - 英国人<a href="https://zh.wikipedia.org/wiki/%E6%8F%90%E5%A7%86%C2%B7%E6%9F%8F%E5%85%A7%E8%8C%B2-%E6%9D%8E">蒂姆·伯纳斯-李</a>发明了图形化的浏览器，浏览器的简单易用性使得计算机网络迅速被普及。</p></li></ol><h4 id="TCP-IP模型"><a href="#TCP-IP模型" class="headerlink" title="TCP/IP模型"></a>TCP/IP模型</h4><p>实现网络通信的基础是网络通信协议，这些协议通常是由<a href="https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91%E5%B7%A5%E7%A8%8B%E4%BB%BB%E5%8A%A1%E7%BB%84">互联网工程任务组</a> （IETF）制定的。所谓“协议”就是通信计算机双方必须共同遵从的一组约定，例如怎样建立连接、怎样互相识别等，网络协议的三要素是：语法、语义和时序。构成我们今天使用的Internet的基础的是TCP/IP协议族，所谓协议族就是一系列的协议及其构成的通信模型，我们通常也把这套东西称为TCP/IP模型。与国际标准化组织发布的OSI/RM这个七层模型不同，TCP/IP是一个四层模型，也就是说，该模型将我们使用的网络从逻辑上分解为四个层次，自底向上依次是：网络接口层、网络层、传输层和应用层，</p><p>IP通常被翻译为网际协议，它服务于网络层，主要实现了寻址和路由的功能。接入网络的每一台主机都需要有自己的IP地址，IP地址就是主机在计算机网络上的身份标识。当然由于IPv4地址的匮乏，我们平常在家里、办公室以及其他可以接入网络的公共区域上网时获得的IP地址并不是全球唯一的IP地址，而是一个<a href="https://zh.wikipedia.org/zh-hans/%E5%B1%80%E5%9F%9F%E7%BD%91">局域网（LAN）</a>中的内部IP地址，通过<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2">网络地址转换（NAT）服务</a>我们也可以实现对网络的访问。计算机网络上有大量的被我们称为“<a href="https://zh.wikipedia.org/wiki/%E8%B7%AF%E7%94%B1%E5%99%A8">路由器</a>”的网络中继设备，它们会存储转发我们发送到网络上的数据分组，让从源头发出的数据最终能够找到传送到目的地通路，这项功能就是所谓的路由。</p><p>TCP全称传输控制协议，它是基于IP提供的寻址和路由服务而建立起来的负责实现端到端可靠传输的协议，之所以将TCP称为可靠的传输协议是因为TCP向调用者承诺了三件事情：</p><ol><li>数据不传丢不传错（利用握手、校验和重传机制可以实现）。</li><li>流量控制（通过滑动窗口匹配数据发送者和接收者之间的传输速度）。</li><li>拥塞控制（通过RTT时间以及对滑动窗口的控制缓解网络拥堵）。</li></ol><h4 id="网络应用模式"><a href="#网络应用模式" class="headerlink" title="网络应用模式"></a>网络应用模式</h4><ol><li>C/S模式和B/S模式。这里的C指的是Client（客户端），通常是一个需要安装到某个宿主操作系统上的应用程序；而B指的是Browser（浏览器），它几乎是所有图形化操作系统都默认安装了的一个应用软件；通过C或B都可以实现对S（服务器）的访问。关于二者的比较和讨论在网络上有一大堆的文章，在此我们就不再浪费笔墨了。</li><li>去中心化的网络应用模式。不管是B/S还是C/S都需要服务器的存在，服务器就是整个应用模式的中心，而去中心化的网络应用通常没有固定的服务器或者固定的客户端，所有应用的使用者既可以作为资源的提供者也可以作为资源的访问者。</li></ol><h3 id="基于HTTP协议的网络资源访问"><a href="#基于HTTP协议的网络资源访问" class="headerlink" title="基于HTTP协议的网络资源访问"></a>基于HTTP协议的网络资源访问</h3><h4 id="HTTP（超文本传输协议）"><a href="#HTTP（超文本传输协议）" class="headerlink" title="HTTP（超文本传输协议）"></a>HTTP（超文本传输协议）</h4><p>HTTP是超文本传输协议（Hyper-Text Transfer Proctol）的简称，维基百科上对HTTP的解释是：超文本传输协议是一种用于分布式、协作式和超媒体信息系统的应用层协议，它是<a href="https://zh.wikipedia.org/wiki/%E5%85%A8%E7%90%83%E8%B3%87%E8%A8%8A%E7%B6%B2">万维网</a>数据通信的基础，设计HTTP最初的目的是为了提供一种发布和接收<a href="https://zh.wikipedia.org/wiki/HTML">HTML</a>页面的方法，通过HTTP或者<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE">HTTPS</a>（超文本传输安全协议）请求的资源由URI（<a href="https://zh.wikipedia.org/wiki/%E7%B5%B1%E4%B8%80%E8%B3%87%E6%BA%90%E6%A8%99%E8%AD%98%E7%AC%A6">统一资源标识符</a>）来标识。关于HTTP的更多内容，我们推荐阅读阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2016/08/http.html">《HTTP 协议入门》</a>，简单的说，通过HTTP我们可以获取网络上的（基于字符的）资源，开发中经常会用到的网络API（有的地方也称之为网络数据接口）就是基于HTTP来实现数据传输的。</p><h4 id="JSON格式"><a href="#JSON格式" class="headerlink" title="JSON格式"></a>JSON格式</h4><p><strong>JSON</strong>（<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation）是一种轻量级的数据交换语言，该语言以易于让人阅读的文字（纯文本）为基础，用来传输由属性值或者序列性的值组成的数据对象。尽管JSON是最初只是Javascript中一种创建对象的字面量语法，但它在当下更是一种独立于语言的数据格式，很多编程语言都支持JSON格式数据的生成和解析，Python内置的json模块也提供了这方面的功能。由于JSON是纯文本，它和<a href="https://zh.wikipedia.org/wiki/XML">XML</a>一样都适用于异构系统之间的数据交换，而相较于XML，JSON显得更加的轻便和优雅。下面是表达同样信息的XML和JSON，而JSON的优势是相当直观的。</p><p>XML的例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">message</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">from</span>&gt;</span>Alice<span class="hljs-tag">&lt;/<span class="hljs-name">from</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">to</span>&gt;</span>Bob<span class="hljs-tag">&lt;/<span class="hljs-name">to</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">content</span>&gt;</span>Will you marry me?<span class="hljs-tag">&lt;/<span class="hljs-name">content</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">message</span>&gt;</span><br></code></pre></td></tr></table></figure><p>JSON的例子：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JSON">&#123;<br>    <span class="hljs-attr">&quot;from&quot;</span>: <span class="hljs-string">&quot;Alice&quot;</span>,<br>    <span class="hljs-attr">&quot;to&quot;</span>: <span class="hljs-string">&quot;Bob&quot;</span>,<br>    <span class="hljs-attr">&quot;content&quot;</span>: <span class="hljs-string">&quot;Will you marry me?&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h4><p>requests是一个基于HTTP协议来使用网络的第三库，其<a href="http://cn.python-requests.org/zh_CN/latest/">官方网站</a>有这样的一句介绍它的话：“Requests是唯一的一个<strong>非转基因</strong>的Python HTTP库，人类可以安全享用。”简单的说，使用requests库可以非常方便的使用HTTP，避免安全缺陷、冗余代码以及“重复发明轮子”（行业黑话，通常用在软件工程领域表示重新创造一个已有的或是早已被优化過的基本方法）。前面的文章中我们已经使用过这个库，下面我们还是通过requests来实现一个访问网络数据接口并从中获取美女图片下载链接然后下载美女图片到本地的例子程序，程序中使用了<a href="https://www.tianapi.com/">天行数据</a>提供的网络API。</p><p>我们可以先通过pip安装requests及其依赖库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">pip install requests<br></code></pre></td></tr></table></figure><p>如果使用PyCharm作为开发工具，可以直接在代码中书写<code>import requests</code>，然后通过代码修复功能来自动下载安装requests。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><br><span class="hljs-keyword">import</span> requests<br><br><br><span class="hljs-comment"># 继承Thread类创建自定义的线程类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DownloadHanlder</span>(<span class="hljs-params">Thread</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, url</span>):</span><br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.url = url<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        filename = self.url[self.url.rfind(<span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>:]<br>        resp = requests.get(self.url)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/Users/Hao/&#x27;</span> + filename, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(resp.content)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-comment"># 通过requests模块的get函数获取网络资源</span><br>    <span class="hljs-comment"># 下面的代码中使用了天行数据接口提供的网络API</span><br>    <span class="hljs-comment"># 要使用该数据接口需要在天行数据的网站上注册</span><br>    <span class="hljs-comment"># 然后用自己的Key替换掉下面代码的中APIKey即可</span><br>    resp = requests.get(<br>        <span class="hljs-string">&#x27;http://api.tianapi.com/meinv/?key=APIKey&amp;num=10&#x27;</span>)<br>    <span class="hljs-comment"># 将服务器返回的JSON格式的数据解析为字典</span><br>    data_model = resp.json()<br>    <span class="hljs-keyword">for</span> mm_dict <span class="hljs-keyword">in</span> data_model[<span class="hljs-string">&#x27;newslist&#x27;</span>]:<br>        url = mm_dict[<span class="hljs-string">&#x27;picUrl&#x27;</span>]<br>        <span class="hljs-comment"># 通过多线程的方式实现图片下载</span><br>        DownloadHanlder(url).start()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="基于传输层协议的套接字编程"><a href="#基于传输层协议的套接字编程" class="headerlink" title="基于传输层协议的套接字编程"></a>基于传输层协议的套接字编程</h3><p>套接字这个词对很多不了解网络编程的人来说显得非常晦涩和陌生，其实说得通俗点，套接字就是一套用<a href="https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80">C语言</a>写成的应用程序开发库，主要用于实现进程间通信和网络编程，在网络应用开发中被广泛使用。在Python中也可以基于套接字来使用传输层提供的传输服务，并基于此开发自己的网络应用。实际开发中使用的套接字可以分为三类：流套接字（TCP套接字）、数据报套接字和原始套接字。</p><h4 id="TCP套接字"><a href="#TCP套接字" class="headerlink" title="TCP套接字"></a>TCP套接字</h4><p>所谓TCP套接字就是使用TCP协议提供的传输服务来实现网络通信的编程接口。在Python中可以通过创建socket对象并指定type属性为SOCK_STREAM来使用TCP套接字。由于一台主机可能拥有多个IP地址，而且很有可能会配置多个不同的服务，所以作为服务器端的程序，需要在创建套接字对象后将其绑定到指定的IP地址和端口上。这里的端口并不是物理设备而是对IP地址的扩展，用于区分不同的服务，例如我们通常将HTTP服务跟80端口绑定，而MySQL数据库服务默认绑定在3306端口，这样当服务器收到用户请求时就可以根据端口号来确定到底用户请求的是HTTP服务器还是数据库服务器提供的服务。端口的取值范围是0~65535，而1024以下的端口我们通常称之为“著名端口”（留给像FTP、HTTP、SMTP等“著名服务”使用的端口，有的地方也称之为“周知端口”），自定义的服务通常不使用这些端口，除非自定义的是HTTP或FTP这样的著名服务。</p><p>下面的代码实现了一个提供时间日期的服务器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> socket, SOCK_STREAM, AF_INET<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-comment"># 1.创建套接字对象并指定使用哪种传输服务</span><br>    <span class="hljs-comment"># family=AF_INET - IPv4地址</span><br>    <span class="hljs-comment"># family=AF_INET6 - IPv6地址</span><br>    <span class="hljs-comment"># type=SOCK_STREAM - TCP套接字</span><br>    <span class="hljs-comment"># type=SOCK_DGRAM - UDP套接字</span><br>    <span class="hljs-comment"># type=SOCK_RAW - 原始套接字</span><br>    server = socket(family=AF_INET, <span class="hljs-built_in">type</span>=SOCK_STREAM)<br>    <span class="hljs-comment"># 2.绑定IP地址和端口(端口用于区分不同的服务)</span><br>    <span class="hljs-comment"># 同一时间在同一个端口上只能绑定一个服务否则报错</span><br>    server.bind((<span class="hljs-string">&#x27;192.168.1.2&#x27;</span>, <span class="hljs-number">6789</span>))<br>    <span class="hljs-comment"># 3.开启监听 - 监听客户端连接到服务器</span><br>    <span class="hljs-comment"># 参数512可以理解为连接队列的大小</span><br>    server.listen(<span class="hljs-number">512</span>)<br>    print(<span class="hljs-string">&#x27;服务器启动开始监听...&#x27;</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-comment"># 4.通过循环接收客户端的连接并作出相应的处理(提供服务)</span><br>        <span class="hljs-comment"># accept方法是一个阻塞方法如果没有客户端连接到服务器代码不会向下执行</span><br>        <span class="hljs-comment"># accept方法返回一个元组其中的第一个元素是客户端对象</span><br>        <span class="hljs-comment"># 第二个元素是连接到服务器的客户端的地址(由IP和端口两部分构成)</span><br>        client, addr = server.accept()<br>        print(<span class="hljs-built_in">str</span>(addr) + <span class="hljs-string">&#x27;连接到了服务器.&#x27;</span>)<br>        <span class="hljs-comment"># 5.发送数据</span><br>        client.send(<span class="hljs-built_in">str</span>(datetime.now()).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>        <span class="hljs-comment"># 6.断开连接</span><br>        client.close()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>运行服务器程序后我们可以通过Windows系统的telnet来访问该服务器，结果如下图所示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">telnet 192.168.1.2 6789<br></code></pre></td></tr></table></figure><p>当然我们也可以通过Python的程序来实现TCP客户端的功能，相较于实现服务器程序，实现客户端程序就简单多了，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> socket<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-comment"># 1.创建套接字对象默认使用IPv4和TCP协议</span><br>    client = socket()<br>    <span class="hljs-comment"># 2.连接到服务器(需要指定IP地址和端口)</span><br>    client.connect((<span class="hljs-string">&#x27;192.168.1.2&#x27;</span>, <span class="hljs-number">6789</span>))<br>    <span class="hljs-comment"># 3.从服务器接收数据</span><br>    print(client.recv(<span class="hljs-number">1024</span>).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    client.close()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>需要注意的是，上面的服务器并没有使用多线程或者异步I/O的处理方式，这也就意味着当服务器与一个客户端处于通信状态时，其他的客户端只能排队等待。很显然，这样的服务器并不能满足我们的需求，我们需要的服务器是能够同时接纳和处理多个用户请求的。下面我们来设计一个使用多线程技术处理多个用户请求的服务器，该服务器会向连接到服务器的客户端发送一张图片。</p><p>服务器端代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> socket, SOCK_STREAM, AF_INET<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode<br><span class="hljs-keyword">from</span> json <span class="hljs-keyword">import</span> dumps<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <br>    <span class="hljs-comment"># 自定义线程类</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileTransferHandler</span>(<span class="hljs-params">Thread</span>):</span><br><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, cclient</span>):</span><br>            <span class="hljs-built_in">super</span>().__init__()<br>            self.cclient = cclient<br><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>            my_dict = &#123;&#125;<br>            my_dict[<span class="hljs-string">&#x27;filename&#x27;</span>] = <span class="hljs-string">&#x27;guido.jpg&#x27;</span><br>            <span class="hljs-comment"># JSON是纯文本不能携带二进制数据</span><br>            <span class="hljs-comment"># 所以图片的二进制数据要处理成base64编码</span><br>            my_dict[<span class="hljs-string">&#x27;filedata&#x27;</span>] = data<br>            <span class="hljs-comment"># 通过dumps函数将字典处理成JSON字符串</span><br>            json_str = dumps(my_dict)<br>            <span class="hljs-comment"># 发送JSON字符串</span><br>            self.cclient.send(json_str.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>            self.cclient.close()<br><br>    <span class="hljs-comment"># 1.创建套接字对象并指定使用哪种传输服务</span><br>    server = socket()<br>    <span class="hljs-comment"># 2.绑定IP地址和端口(区分不同的服务)</span><br>    server.bind((<span class="hljs-string">&#x27;192.168.1.2&#x27;</span>, <span class="hljs-number">5566</span>))<br>    <span class="hljs-comment"># 3.开启监听 - 监听客户端连接到服务器</span><br>    server.listen(<span class="hljs-number">512</span>)<br>    print(<span class="hljs-string">&#x27;服务器启动开始监听...&#x27;</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;guido.jpg&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-comment"># 将二进制数据处理成base64再解码成字符串</span><br>        data = b64encode(f.read()).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        client, addr = server.accept()<br>        <span class="hljs-comment"># 启动一个线程来处理客户端的请求</span><br>        FileTransferHandler(client).start()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>客户端代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">from</span> json <span class="hljs-keyword">import</span> loads<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    client = socket()<br>    client.connect((<span class="hljs-string">&#x27;192.168.1.2&#x27;</span>, <span class="hljs-number">5566</span>))<br>    <span class="hljs-comment"># 定义一个保存二进制数据的对象</span><br>    in_data = <span class="hljs-built_in">bytes</span>()<br>    <span class="hljs-comment"># 由于不知道服务器发送的数据有多大每次接收1024字节</span><br>    data = client.recv(<span class="hljs-number">1024</span>)<br>    <span class="hljs-keyword">while</span> data:<br>        <span class="hljs-comment"># 将收到的数据拼接起来</span><br>        in_data += data<br>        data = client.recv(<span class="hljs-number">1024</span>)<br>    <span class="hljs-comment"># 将收到的二进制数据解码成JSON字符串并转换成字典</span><br>    <span class="hljs-comment"># loads函数的作用就是将JSON字符串转成字典对象</span><br>    my_dict = loads(in_data.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    filename = my_dict[<span class="hljs-string">&#x27;filename&#x27;</span>]<br>    filedata = my_dict[<span class="hljs-string">&#x27;filedata&#x27;</span>].encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/Users/Hao/&#x27;</span> + filename, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-comment"># 将base64格式的数据解码成二进制数据并写入文件</span><br>        f.write(b64decode(filedata))<br>    print(<span class="hljs-string">&#x27;图片已保存.&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>在这个案例中，我们使用了JSON作为数据传输的格式（通过JSON格式对传输的数据进行了序列化和反序列化的操作），但是JSON并不能携带二进制数据，因此对图片的二进制数据进行了Base64编码的处理。Base64是一种用64个字符表示所有二进制数据的编码方式，通过将二进制数据每6位一组的方式重新组织，刚好可以使用0~9的数字、大小写字母以及“+”和“/”总共64个字符表示从<code>000000</code>到<code>111111</code>的64种状态。<a href="https://zh.wikipedia.org/wiki/Base64">维基百科</a>上有关于Base64编码的详细讲解，不熟悉Base64的读者可以自行阅读。</p><blockquote><p><strong>说明：</strong> 上面的代码主要为了讲解网络编程的相关内容因此并没有对异常状况进行处理，请读者自行添加异常处理代码来增强程序的健壮性。</p></blockquote><h4 id="UDP套接字"><a href="#UDP套接字" class="headerlink" title="UDP套接字"></a>UDP套接字</h4><p>传输层除了有可靠的传输协议TCP之外，还有一种非常轻便的传输协议叫做用户数据报协议，简称UDP。TCP和UDP都是提供端到端传输服务的协议，二者的差别就如同打电话和发短信的区别，后者不对传输的可靠性和可达性做出任何承诺从而避免了TCP中握手和重传的开销，所以在强调性能和而不是数据完整性的场景中（例如传输网络音视频数据），UDP可能是更好的选择。可能大家会注意到一个现象，就是在观看网络视频时，有时会出现卡顿，有时会出现花屏，这无非就是部分数据传丢或传错造成的。在Python中也可以使用UDP套接字来创建网络应用，对此我们不进行赘述，有兴趣的读者可以自行研究。</p><h3 id="网络应用开发"><a href="#网络应用开发" class="headerlink" title="网络应用开发"></a>网络应用开发</h3><h4 id="发送电子邮件"><a href="#发送电子邮件" class="headerlink" title="发送电子邮件"></a>发送电子邮件</h4><p>在即时通信软件如此发达的今天，电子邮件仍然是互联网上使用最为广泛的应用之一，公司向应聘者发出录用通知、网站向用户发送一个激活账号的链接、银行向客户推广它们的理财产品等几乎都是通过电子邮件来完成的，而这些任务应该都是由程序自动完成的。</p><p>就像我们可以用HTTP（超文本传输协议）来访问一个网站一样，发送邮件要使用SMTP（简单邮件传输协议），SMTP也是一个建立在TCP（传输控制协议）提供的可靠数据传输服务的基础上的应用级协议，它规定了邮件的发送者如何跟发送邮件的服务器进行通信的细节，而Python中的smtplib模块将这些操作简化成了几个简单的函数。</p><p>下面的代码演示了如何在Python发送邮件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> smtplib <span class="hljs-keyword">import</span> SMTP<br><span class="hljs-keyword">from</span> email.header <span class="hljs-keyword">import</span> Header<br><span class="hljs-keyword">from</span> email.mime.text <span class="hljs-keyword">import</span> MIMEText<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-comment"># 请自行修改下面的邮件发送者和接收者</span><br>    sender = <span class="hljs-string">&#x27;abcdefg@126.com&#x27;</span><br>    receivers = [<span class="hljs-string">&#x27;uvwxyz@qq.com&#x27;</span>, <span class="hljs-string">&#x27;uvwxyz@126.com&#x27;</span>]<br>    message = MIMEText(<span class="hljs-string">&#x27;用Python发送邮件的示例代码.&#x27;</span>, <span class="hljs-string">&#x27;plain&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    message[<span class="hljs-string">&#x27;From&#x27;</span>] = Header(<span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    message[<span class="hljs-string">&#x27;To&#x27;</span>] = Header(<span class="hljs-string">&#x27;骆昊&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    message[<span class="hljs-string">&#x27;Subject&#x27;</span>] = Header(<span class="hljs-string">&#x27;示例代码实验邮件&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    smtper = SMTP(<span class="hljs-string">&#x27;smtp.126.com&#x27;</span>)<br>    <span class="hljs-comment"># 请自行修改下面的登录口令</span><br>    smtper.login(sender, <span class="hljs-string">&#x27;secretpass&#x27;</span>)<br>    smtper.sendmail(sender, receivers, message.as_string())<br>    print(<span class="hljs-string">&#x27;邮件发送完成!&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>如果要发送带有附件的邮件，那么可以按照下面的方式进行操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> smtplib <span class="hljs-keyword">import</span> SMTP<br><span class="hljs-keyword">from</span> email.header <span class="hljs-keyword">import</span> Header<br><span class="hljs-keyword">from</span> email.mime.text <span class="hljs-keyword">import</span> MIMEText<br><span class="hljs-keyword">from</span> email.mime.image <span class="hljs-keyword">import</span> MIMEImage<br><span class="hljs-keyword">from</span> email.mime.multipart <span class="hljs-keyword">import</span> MIMEMultipart<br><br><span class="hljs-keyword">import</span> urllib<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-comment"># 创建一个带附件的邮件消息对象</span><br>    message = MIMEMultipart()<br>    <br>    <span class="hljs-comment"># 创建文本内容</span><br>    text_content = MIMEText(<span class="hljs-string">&#x27;附件中有本月数据请查收&#x27;</span>, <span class="hljs-string">&#x27;plain&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    message[<span class="hljs-string">&#x27;Subject&#x27;</span>] = Header(<span class="hljs-string">&#x27;本月数据&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-comment"># 将文本内容添加到邮件消息对象中</span><br>    message.attach(text_content)<br><br>    <span class="hljs-comment"># 读取文件并将文件作为附件添加到邮件消息对象中</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/Users/Hao/Desktop/hello.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        txt = MIMEText(f.read(), <span class="hljs-string">&#x27;base64&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        txt[<span class="hljs-string">&#x27;Content-Type&#x27;</span>] = <span class="hljs-string">&#x27;text/plain&#x27;</span><br>        txt[<span class="hljs-string">&#x27;Content-Disposition&#x27;</span>] = <span class="hljs-string">&#x27;attachment; filename=hello.txt&#x27;</span><br>        message.attach(txt)<br>    <span class="hljs-comment"># 读取文件并将文件作为附件添加到邮件消息对象中</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/Users/Hao/Desktop/汇总数据.xlsx&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        xls = MIMEText(f.read(), <span class="hljs-string">&#x27;base64&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        xls[<span class="hljs-string">&#x27;Content-Type&#x27;</span>] = <span class="hljs-string">&#x27;application/vnd.ms-excel&#x27;</span><br>        xls[<span class="hljs-string">&#x27;Content-Disposition&#x27;</span>] = <span class="hljs-string">&#x27;attachment; filename=month-data.xlsx&#x27;</span><br>        message.attach(xls)<br>    <br>    <span class="hljs-comment"># 创建SMTP对象</span><br>    smtper = SMTP(<span class="hljs-string">&#x27;smtp.126.com&#x27;</span>)<br>    <span class="hljs-comment"># 开启安全连接</span><br>    <span class="hljs-comment"># smtper.starttls()</span><br>    sender = <span class="hljs-string">&#x27;abcdefg@126.com&#x27;</span><br>    receivers = [<span class="hljs-string">&#x27;uvwxyz@qq.com&#x27;</span>]<br>    <span class="hljs-comment"># 登录到SMTP服务器</span><br>    <span class="hljs-comment"># 请注意此处不是使用密码而是邮件客户端授权码进行登录</span><br>    <span class="hljs-comment"># 对此有疑问的读者可以联系自己使用的邮件服务器客服</span><br>    smtper.login(sender, <span class="hljs-string">&#x27;secretpass&#x27;</span>)<br>    <span class="hljs-comment"># 发送邮件</span><br>    smtper.sendmail(sender, receivers, message.as_string())<br>    <span class="hljs-comment"># 与邮件服务器断开连接</span><br>    smtper.quit()<br>    print(<span class="hljs-string">&#x27;发送完成!&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h4 id="发送短信"><a href="#发送短信" class="headerlink" title="发送短信"></a>发送短信</h4><p>发送短信也是项目中常见的功能，网站的注册码、验证码、营销信息基本上都是通过短信来发送给用户的。在下面的代码中我们使用了<a href="http://www.ihuyi.com/">互亿无线</a>短信平台（该平台为注册用户提供了50条免费短信以及常用开发语言发送短信的demo，可以登录该网站并在用户自服务页面中对短信进行配置）提供的API接口实现了发送短信的服务，当然国内的短信平台很多，读者可以根据自己的需要进行选择（通常会考虑费用预算、短信达到率、使用的难易程度等指标），如果需要在商业项目中使用短信服务建议购买短信平台提供的套餐服务。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> http.client<br><span class="hljs-keyword">import</span> json<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    host  = <span class="hljs-string">&quot;106.ihuyi.com&quot;</span><br>    sms_send_uri = <span class="hljs-string">&quot;/webservice/sms.php?method=Submit&quot;</span><br>    <span class="hljs-comment"># 下面的参数需要填入自己注册的账号和对应的密码</span><br>    params = urllib.parse.urlencode(&#123;<span class="hljs-string">&#x27;account&#x27;</span>: <span class="hljs-string">&#x27;你自己的账号&#x27;</span>, <span class="hljs-string">&#x27;password&#x27;</span> : <span class="hljs-string">&#x27;你自己的密码&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>: <span class="hljs-string">&#x27;您的验证码是：147258。请不要把验证码泄露给其他人。&#x27;</span>, <span class="hljs-string">&#x27;mobile&#x27;</span>: <span class="hljs-string">&#x27;接收者的手机号&#x27;</span>, <span class="hljs-string">&#x27;format&#x27;</span>:<span class="hljs-string">&#x27;json&#x27;</span> &#125;)<br>    print(params)<br>    headers = &#123;<span class="hljs-string">&#x27;Content-type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>, <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;text/plain&#x27;</span>&#125;<br>    conn = http.client.HTTPConnection(host, port=<span class="hljs-number">80</span>, timeout=<span class="hljs-number">30</span>)<br>    conn.request(<span class="hljs-string">&#x27;POST&#x27;</span>, sms_send_uri, params, headers)<br>    response = conn.getresponse()<br>    response_str = response.read()<br>    jsonstr = response_str.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    print(json.loads(jsonstr))<br>    conn.close()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【python学习】-进程和线程</title>
    <link href="/post/49051.html"/>
    <url>/post/49051.html</url>
    
    <content type="html"><![CDATA[<h1 id="【python学习】-进程和线程"><a href="#【python学习】-进程和线程" class="headerlink" title="【python学习】-进程和线程"></a>【python学习】-进程和线程</h1><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><p>今天我们使用的计算机早已进入多CPU或多核时代，而我们使用的操作系统都是支持“多任务”的操作系统，这使得我们可以同时运行多个程序，也可以将一个程序分解为若干个相对独立的子任务，让多个子任务并发的执行，从而缩短程序的执行时间，同时也让用户获得更好的体验。因此在当下不管是用什么编程语言进行开发，实现让程序同时执行多个任务也就是常说的“并发编程”，应该是程序员必备技能之一。为此，我们需要先讨论两个概念，一个叫进程，一个叫线程。</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>进程就是操作系统中执行的一个程序，操作系统以进程为单位分配存储空间，每个进程都有自己的地址空间、数据栈以及其他用于跟踪进程执行的辅助数据，操作系统管理所有进程的执行，为它们合理的分配资源。进程可以通过fork或spawn的方式来创建新的进程来执行其他的任务，不过新的进程也有自己独立的内存空间，因此必须通过进程间通信机制（IPC，Inter-Process Communication）来实现数据共享，具体的方式包括管道、信号、套接字、共享内存区等。</p><p>一个进程还可以拥有多个并发的执行线索，简单的说就是拥有多个可以获得CPU调度的执行单元，这就是所谓的线程。由于线程在同一个进程下，它们可以共享相同的上下文，因此相对于进程而言，线程间的信息共享和通信更加容易。当然在单核CPU系统中，真正的并发是不可能的，因为在某个时刻能够获得CPU的只有唯一的一个线程，多个线程共享了CPU的执行时间。使用多线程实现并发编程为程序带来的好处是不言而喻的，最主要的体现在提升程序的性能和改善用户体验，今天我们使用的软件几乎都用到了多线程技术，这一点可以利用系统自带的进程监控工具（如macOS中的“活动监视器”、Windows中的“任务管理器”）来证实，</p><p>当然多线程也并不是没有坏处，站在其他进程的角度，多线程的程序对其他程序并不友好，因为它占用了更多的CPU执行时间，导致其他程序无法获得足够的CPU执行时间；另一方面，站在开发者的角度，编写和调试多线程的程序都对开发者有较高的要求，对于初学者来说更加困难。</p><p>Python既支持多进程又支持多线程，因此使用Python实现并发编程主要有3种方式：多进程、多线程、多进程+多线程。</p><h3 id="Python中的多进程"><a href="#Python中的多进程" class="headerlink" title="Python中的多进程"></a>Python中的多进程</h3><p>Unix和Linux操作系统上提供了<code>fork()</code>系统调用来创建进程，调用<code>fork()</code>函数的是父进程，创建出的是子进程，子进程是父进程的一个拷贝，但是子进程拥有自己的PID。<code>fork()</code>函数非常特殊它会返回两次，父进程中可以通过<code>fork()</code>函数的返回值得到子进程的PID，而子进程中的返回值永远都是0。Python的os模块提供了<code>fork()</code>函数。由于Windows系统没有<code>fork()</code>调用，因此要实现跨平台的多进程编程，可以使用multiprocessing模块的<code>Process</code>类来创建子进程，而且该模块还提供了更高级的封装，例如批量启动进程的进程池（<code>Pool</code>）、用于进程间通信的队列（<code>Queue</code>）和管道（<code>Pipe</code>）等。</p><p>下面用一个下载文件的例子来说明使用多进程和不使用多进程到底有什么差别，先看看下面的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time, sleep<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">download_task</span>(<span class="hljs-params">filename</span>):</span><br>    print(<span class="hljs-string">&#x27;开始下载%s...&#x27;</span> % filename)<br>    time_to_download = randint(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>)<br>    sleep(time_to_download)<br>    print(<span class="hljs-string">&#x27;%s下载完成! 耗费了%d秒&#x27;</span> % (filename, time_to_download))<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    start = time()<br>    download_task(<span class="hljs-string">&#x27;Python从入门到住院.pdf&#x27;</span>)<br>    download_task(<span class="hljs-string">&#x27;Peking Hot.avi&#x27;</span>)<br>    end = time()<br>    print(<span class="hljs-string">&#x27;总共耗费了%.2f秒.&#x27;</span> % (end - start))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>下面是运行程序得到的一次运行结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Shell">开始下载Python从入门到住院.pdf...<br>Python从入门到住院.pdf下载完成! 耗费了6秒<br>开始下载Peking Hot.avi...<br>Peking Hot.avi下载完成! 耗费了7秒<br>总共耗费了13.01秒.<br></code></pre></td></tr></table></figure><p>从上面的例子可以看出，如果程序中的代码只能按顺序一点点的往下执行，那么即使执行两个毫不相关的下载任务，也需要先等待一个文件下载完成后才能开始下一个下载任务，很显然这并不合理也没有效率。接下来我们使用多进程的方式将两个下载任务放到不同的进程中，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> getpid<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time, sleep<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">download_task</span>(<span class="hljs-params">filename</span>):</span><br>    print(<span class="hljs-string">&#x27;启动下载进程，进程号[%d].&#x27;</span> % getpid())<br>    print(<span class="hljs-string">&#x27;开始下载%s...&#x27;</span> % filename)<br>    time_to_download = randint(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>)<br>    sleep(time_to_download)<br>    print(<span class="hljs-string">&#x27;%s下载完成! 耗费了%d秒&#x27;</span> % (filename, time_to_download))<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    start = time()<br>    p1 = Process(target=download_task, args=(<span class="hljs-string">&#x27;Python从入门到住院.pdf&#x27;</span>, ))<br>    p1.start()<br>    p2 = Process(target=download_task, args=(<span class="hljs-string">&#x27;Peking Hot.avi&#x27;</span>, ))<br>    p2.start()<br>    p1.join()<br>    p2.join()<br>    end = time()<br>    print(<span class="hljs-string">&#x27;总共耗费了%.2f秒.&#x27;</span> % (end - start))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>在上面的代码中，我们通过<code>Process</code>类创建了进程对象，通过<code>target</code>参数我们传入一个函数来表示进程启动后要执行的代码，后面的<code>args</code>是一个元组，它代表了传递给函数的参数。<code>Process</code>对象的<code>start</code>方法用来启动进程，而<code>join</code>方法表示等待进程执行结束。运行上面的代码可以明显发现两个下载任务“同时”启动了，而且程序的执行时间将大大缩短，不再是两个任务的时间总和。下面是程序的一次执行结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Shell">启动下载进程，进程号[1530].<br>开始下载Python从入门到住院.pdf...<br>启动下载进程，进程号[1531].<br>开始下载Peking Hot.avi...<br>Peking Hot.avi下载完成! 耗费了7秒<br>Python从入门到住院.pdf下载完成! 耗费了10秒<br>总共耗费了10.01秒.<br></code></pre></td></tr></table></figure><p>我们也可以使用subprocess模块中的类和函数来创建和启动子进程，然后通过管道来和子进程通信，这些内容我们不在此进行讲解，有兴趣的读者可以自己了解这些知识。接下来我们将重点放在如何实现两个进程间的通信。我们启动两个进程，一个输出Ping，一个输出Pong，两个进程输出的Ping和Pong加起来一共10个。听起来很简单吧，但是如果这样写可是错的哦。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><br>counter = <span class="hljs-number">0</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sub_task</span>(<span class="hljs-params">string</span>):</span><br>    <span class="hljs-keyword">global</span> counter<br>    <span class="hljs-keyword">while</span> counter &lt; <span class="hljs-number">10</span>:<br>        print(string, end=<span class="hljs-string">&#x27;&#x27;</span>, flush=<span class="hljs-literal">True</span>)<br>        counter += <span class="hljs-number">1</span><br>        sleep(<span class="hljs-number">0.01</span>)<br><br>        <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    Process(target=sub_task, args=(<span class="hljs-string">&#x27;Ping&#x27;</span>, )).start()<br>    Process(target=sub_task, args=(<span class="hljs-string">&#x27;Pong&#x27;</span>, )).start()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>看起来没毛病，但是最后的结果是Ping和Pong各输出了10个，Why？当我们在程序中创建进程的时候，子进程复制了父进程及其所有的数据结构，每个子进程有自己独立的内存空间，这也就意味着两个子进程中各有一个<code>counter</code>变量，所以结果也就可想而知了。要解决这个问题比较简单的办法是使用multiprocessing模块中的<code>Queue</code>类，它是可以被多个进程共享的队列，底层是通过管道和<a href="">信号量（semaphore）</a>机制来实现的，有兴趣的读者可以自己尝试一下。</p><h3 id="Python中的多线程"><a href="#Python中的多线程" class="headerlink" title="Python中的多线程"></a>Python中的多线程</h3><p>在Python早期的版本中就引入了thread模块（现在名为_thread）来实现多线程编程，然而该模块过于底层，而且很多功能都没有提供，因此目前的多线程开发我们推荐使用threading模块，该模块对多线程编程提供了更好的面向对象的封装。我们把刚才下载文件的例子用多线程的方式来实现一遍。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time, sleep<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">download</span>(<span class="hljs-params">filename</span>):</span><br>    print(<span class="hljs-string">&#x27;开始下载%s...&#x27;</span> % filename)<br>    time_to_download = randint(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>)<br>    sleep(time_to_download)<br>    print(<span class="hljs-string">&#x27;%s下载完成! 耗费了%d秒&#x27;</span> % (filename, time_to_download))<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    start = time()<br>    t1 = Thread(target=download, args=(<span class="hljs-string">&#x27;Python从入门到住院.pdf&#x27;</span>,))<br>    t1.start()<br>    t2 = Thread(target=download, args=(<span class="hljs-string">&#x27;Peking Hot.avi&#x27;</span>,))<br>    t2.start()<br>    t1.join()<br>    t2.join()<br>    end = time()<br>    print(<span class="hljs-string">&#x27;总共耗费了%.3f秒&#x27;</span> % (end - start))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>我们可以直接使用threading模块的<code>Thread</code>类来创建线程，但是我们之前讲过一个非常重要的概念叫“继承”，我们可以从已有的类创建新类，因此也可以通过继承<code>Thread</code>类的方式来创建自定义的线程类，然后再创建线程对象并启动线程。代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time, sleep<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DownloadTask</span>(<span class="hljs-params">Thread</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, filename</span>):</span><br>        <span class="hljs-built_in">super</span>().__init__()<br>        self._filename = filename<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        print(<span class="hljs-string">&#x27;开始下载%s...&#x27;</span> % self._filename)<br>        time_to_download = randint(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>)<br>        sleep(time_to_download)<br>        print(<span class="hljs-string">&#x27;%s下载完成! 耗费了%d秒&#x27;</span> % (self._filename, time_to_download))<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    start = time()<br>    t1 = DownloadTask(<span class="hljs-string">&#x27;Python从入门到住院.pdf&#x27;</span>)<br>    t1.start()<br>    t2 = DownloadTask(<span class="hljs-string">&#x27;Peking Hot.avi&#x27;</span>)<br>    t2.start()<br>    t1.join()<br>    t2.join()<br>    end = time()<br>    print(<span class="hljs-string">&#x27;总共耗费了%.2f秒.&#x27;</span> % (end - start))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>因为多个线程可以共享进程的内存空间，因此要实现多个线程间的通信相对简单，大家能想到的最直接的办法就是设置一个全局变量，多个线程共享这个全局变量即可。但是当多个线程共享同一个变量（我们通常称之为“资源”）的时候，很有可能产生不可控的结果从而导致程序失效甚至崩溃。如果一个资源被多个线程竞争使用，那么我们通常称之为“临界资源”，对“临界资源”的访问需要加上保护，否则资源会处于“混乱”的状态。下面的例子演示了100个线程向同一个银行账户转账（转入1元钱）的场景，在这个例子中，银行账户就是一个临界资源，在没有保护的情况下我们很有可能会得到错误的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self._balance = <span class="hljs-number">0</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deposit</span>(<span class="hljs-params">self, money</span>):</span><br>        <span class="hljs-comment"># 计算存款后的余额</span><br>        new_balance = self._balance + money<br>        <span class="hljs-comment"># 模拟受理存款业务需要0.01秒的时间</span><br>        sleep(<span class="hljs-number">0.01</span>)<br>        <span class="hljs-comment"># 修改账户余额</span><br>        self._balance = new_balance<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">balance</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self._balance<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AddMoneyThread</span>(<span class="hljs-params">Thread</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, account, money</span>):</span><br>        <span class="hljs-built_in">super</span>().__init__()<br>        self._account = account<br>        self._money = money<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        self._account.deposit(self._money)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    account = Account()<br>    threads = []<br>    <span class="hljs-comment"># 创建100个存款的线程向同一个账户中存钱</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>        t = AddMoneyThread(account, <span class="hljs-number">1</span>)<br>        threads.append(t)<br>        t.start()<br>    <span class="hljs-comment"># 等所有存款的线程都执行完毕</span><br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.join()<br>    print(<span class="hljs-string">&#x27;账户余额为: ￥%d元&#x27;</span> % account.balance)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>运行上面的程序，结果让人大跌眼镜，100个线程分别向账户中转入1元钱，结果居然远远小于100元。之所以出现这种情况是因为我们没有对银行账户这个“临界资源”加以保护，多个线程同时向账户中存钱时，会一起执行到<code>new_balance = self._balance + money</code>这行代码，多个线程得到的账户余额都是初始状态下的<code>0</code>，所以都是<code>0</code>上面做了+1的操作，因此得到了错误的结果。在这种情况下，“锁”就可以派上用场了。我们可以通过“锁”来保护“临界资源”，只有获得“锁”的线程才能访问“临界资源”，而其他没有得到“锁”的线程只能被阻塞起来，直到获得“锁”的线程释放了“锁”，其他线程才有机会获得“锁”，进而访问被保护的“临界资源”。下面的代码演示了如何使用“锁”来保护对银行账户的操作，从而获得正确的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread, Lock<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self._balance = <span class="hljs-number">0</span><br>        self._lock = Lock()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deposit</span>(<span class="hljs-params">self, money</span>):</span><br>        <span class="hljs-comment"># 先获取锁才能执行后续的代码</span><br>        self._lock.acquire()<br>        <span class="hljs-keyword">try</span>:<br>            new_balance = self._balance + money<br>            sleep(<span class="hljs-number">0.01</span>)<br>            self._balance = new_balance<br>        <span class="hljs-keyword">finally</span>:<br>            <span class="hljs-comment"># 在finally中执行释放锁的操作保证正常异常锁都能释放</span><br>            self._lock.release()<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">balance</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self._balance<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AddMoneyThread</span>(<span class="hljs-params">Thread</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, account, money</span>):</span><br>        <span class="hljs-built_in">super</span>().__init__()<br>        self._account = account<br>        self._money = money<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        self._account.deposit(self._money)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    account = Account()<br>    threads = []<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>        t = AddMoneyThread(account, <span class="hljs-number">1</span>)<br>        threads.append(t)<br>        t.start()<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.join()<br>    print(<span class="hljs-string">&#x27;账户余额为: ￥%d元&#x27;</span> % account.balance)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>比较遗憾的一件事情是Python的多线程并不能发挥CPU的多核特性，这一点只要启动几个执行死循环的线程就可以得到证实了。之所以如此，是因为Python的解释器有一个“全局解释器锁”（GIL）的东西，任何线程执行前必须先获得GIL锁，然后每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行，这是一个历史遗留问题，但是即便如此，就如我们之前举的例子，使用多线程在提升执行效率和改善用户体验方面仍然是有积极意义的。</p><h3 id="多进程还是多线程"><a href="#多进程还是多线程" class="headerlink" title="多进程还是多线程"></a>多进程还是多线程</h3><p>无论是多进程还是多线程，只要数量一多，效率肯定上不去，为什么呢？我们打个比方，假设你不幸正在准备中考，每天晚上需要做语文、数学、英语、物理、化学这5科的作业，每项作业耗时1小时。如果你先花1小时做语文作业，做完了，再花1小时做数学作业，这样，依次全部做完，一共花5小时，这种方式称为单任务模型。如果你打算切换到多任务模型，可以先做1分钟语文，再切换到数学作业，做1分钟，再切换到英语，以此类推，只要切换速度足够快，这种方式就和单核CPU执行多任务是一样的了，以旁观者的角度来看，你就正在同时写5科作业。</p><p>但是，切换作业是有代价的，比如从语文切到数学，要先收拾桌子上的语文书本、钢笔（这叫保存现场），然后，打开数学课本、找出圆规直尺（这叫准备新环境），才能开始做数学作业。操作系统在切换进程或者线程时也是一样的，它需要先保存当前执行的现场环境（CPU寄存器状态、内存页等），然后，把新任务的执行环境准备好（恢复上次的寄存器状态，切换内存页等），才能开始执行。这个切换过程虽然很快，但是也需要耗费时间。如果有几千个任务同时进行，操作系统可能就主要忙着切换任务，根本没有多少时间去执行任务了，这种情况最常见的就是硬盘狂响，点窗口无反应，系统处于假死状态。所以，多任务一旦多到一个限度，反而会使得系统性能急剧下降，最终导致所有任务都做不好。</p><p>是否采用多任务的第二个考虑是任务的类型，可以把任务分为计算密集型和I/O密集型。计算密集型任务的特点是要进行大量的计算，消耗CPU资源，比如对视频进行编码解码或者格式转换等等，这种任务全靠CPU的运算能力，虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低。计算密集型任务由于主要消耗CPU资源，这类任务用Python这样的脚本语言去执行效率通常很低，最能胜任这类任务的是C语言，我们之前提到了Python中有嵌入C/C++代码的机制。</p><p>除了计算密集型任务，其他的涉及到网络、存储介质I/O的任务都可以视为I/O密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待I/O操作完成（因为I/O的速度远远低于CPU和内存的速度）。对于I/O密集型任务，如果启动多任务，就可以减少I/O等待时间从而让CPU高效率的运转。有一大类的任务都属于I/O密集型任务，这其中包括了我们很快会涉及到的网络应用和Web应用。</p><blockquote><p><strong>说明：</strong> 上面的内容和例子来自于<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000">廖雪峰官方网站的《Python教程》</a>，因为对作者文中的某些观点持有不同的看法，对原文的文字描述做了适当的调整。</p></blockquote><h3 id="单线程-异步I-O"><a href="#单线程-异步I-O" class="headerlink" title="单线程+异步I/O"></a>单线程+异步I/O</h3><p>现代操作系统对I/O操作的改进中最为重要的就是支持异步I/O。如果充分利用操作系统提供的异步I/O支持，就可以用单进程单线程模型来执行多任务，这种全新的模型称为事件驱动模型。Nginx就是支持异步I/O的Web服务器，它在单核CPU上采用单进程模型就可以高效地支持多任务。在多核CPU上，可以运行多个进程（数量与CPU核心数相同），充分利用多核CPU。用Node.js开发的服务器端程序也使用了这种工作模式，这也是当下实现多任务编程的一种趋势。</p><p>在Python语言中，单线程+异步I/O的编程模型称为协程，有了协程的支持，就可以基于事件驱动编写高效的多任务程序。协程最大的优势就是极高的执行效率，因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销。协程的第二个优势就是不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不用加锁，只需要判断状态就好了，所以执行效率比多线程高很多。如果想要充分利用CPU的多核特性，最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。关于这方面的内容，我稍后会做一个专题来进行讲解。</p><h3 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h3><h4 id="例子1：将耗时间的任务放到线程中以获得更好的用户体验。"><a href="#例子1：将耗时间的任务放到线程中以获得更好的用户体验。" class="headerlink" title="例子1：将耗时间的任务放到线程中以获得更好的用户体验。"></a>例子1：将耗时间的任务放到线程中以获得更好的用户体验。</h4><p>如下所示的界面中，有“下载”和“关于”两个按钮，用休眠的方式模拟点击“下载”按钮会联网下载文件需要耗费10秒的时间，如果不使用“多线程”，我们会发现，当点击“下载”按钮后整个程序的其他部分都被这个耗时间的任务阻塞而无法执行了，这显然是非常糟糕的用户体验，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> tkinter<br><span class="hljs-keyword">import</span> tkinter.messagebox<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">download</span>():</span><br>    <span class="hljs-comment"># 模拟下载任务需要花费10秒钟时间</span><br>    time.sleep(<span class="hljs-number">10</span>)<br>    tkinter.messagebox.showinfo(<span class="hljs-string">&#x27;提示&#x27;</span>, <span class="hljs-string">&#x27;下载完成!&#x27;</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show_about</span>():</span><br>    tkinter.messagebox.showinfo(<span class="hljs-string">&#x27;关于&#x27;</span>, <span class="hljs-string">&#x27;作者: 骆昊(v1.0)&#x27;</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    top = tkinter.Tk()<br>    top.title(<span class="hljs-string">&#x27;单线程&#x27;</span>)<br>    top.geometry(<span class="hljs-string">&#x27;200x150&#x27;</span>)<br>    top.wm_attributes(<span class="hljs-string">&#x27;-topmost&#x27;</span>, <span class="hljs-literal">True</span>)<br><br>    panel = tkinter.Frame(top)<br>    button1 = tkinter.Button(panel, text=<span class="hljs-string">&#x27;下载&#x27;</span>, command=download)<br>    button1.pack(side=<span class="hljs-string">&#x27;left&#x27;</span>)<br>    button2 = tkinter.Button(panel, text=<span class="hljs-string">&#x27;关于&#x27;</span>, command=show_about)<br>    button2.pack(side=<span class="hljs-string">&#x27;right&#x27;</span>)<br>    panel.pack(side=<span class="hljs-string">&#x27;bottom&#x27;</span>)<br><br>    tkinter.mainloop()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>如果使用多线程将耗时间的任务放到一个独立的线程中执行，这样就不会因为执行耗时间的任务而阻塞了主线程，修改后的代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> tkinter<br><span class="hljs-keyword">import</span> tkinter.messagebox<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DownloadTaskHandler</span>(<span class="hljs-params">Thread</span>):</span><br><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>            time.sleep(<span class="hljs-number">10</span>)<br>            tkinter.messagebox.showinfo(<span class="hljs-string">&#x27;提示&#x27;</span>, <span class="hljs-string">&#x27;下载完成!&#x27;</span>)<br>            <span class="hljs-comment"># 启用下载按钮</span><br>            button1.config(state=tkinter.NORMAL)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">download</span>():</span><br>        <span class="hljs-comment"># 禁用下载按钮</span><br>        button1.config(state=tkinter.DISABLED)<br>        <span class="hljs-comment"># 通过daemon参数将线程设置为守护线程(主程序退出就不再保留执行)</span><br>        <span class="hljs-comment"># 在线程中处理耗时间的下载任务</span><br>        DownloadTaskHandler(daemon=<span class="hljs-literal">True</span>).start()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show_about</span>():</span><br>        tkinter.messagebox.showinfo(<span class="hljs-string">&#x27;关于&#x27;</span>, <span class="hljs-string">&#x27;作者: 骆昊(v1.0)&#x27;</span>)<br><br>    top = tkinter.Tk()<br>    top.title(<span class="hljs-string">&#x27;单线程&#x27;</span>)<br>    top.geometry(<span class="hljs-string">&#x27;200x150&#x27;</span>)<br>    top.wm_attributes(<span class="hljs-string">&#x27;-topmost&#x27;</span>, <span class="hljs-number">1</span>)<br><br>    panel = tkinter.Frame(top)<br>    button1 = tkinter.Button(panel, text=<span class="hljs-string">&#x27;下载&#x27;</span>, command=download)<br>    button1.pack(side=<span class="hljs-string">&#x27;left&#x27;</span>)<br>    button2 = tkinter.Button(panel, text=<span class="hljs-string">&#x27;关于&#x27;</span>, command=show_about)<br>    button2.pack(side=<span class="hljs-string">&#x27;right&#x27;</span>)<br>    panel.pack(side=<span class="hljs-string">&#x27;bottom&#x27;</span>)<br><br>    tkinter.mainloop()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h4 id="例子2：使用多进程对复杂任务进行“分而治之”。"><a href="#例子2：使用多进程对复杂任务进行“分而治之”。" class="headerlink" title="例子2：使用多进程对复杂任务进行“分而治之”。"></a>例子2：使用多进程对复杂任务进行“分而治之”。</h4><p>我们来完成1~100000000求和的计算密集型任务，这个问题本身非常简单，有点循环的知识就能解决，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    total = <span class="hljs-number">0</span><br>    number_list = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100000001</span>)]<br>    start = time()<br>    <span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> number_list:<br>        total += number<br>    print(total)<br>    end = time()<br>    print(<span class="hljs-string">&#x27;Execution time: %.3fs&#x27;</span> % (end - start))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>在上面的代码中，我故意先去创建了一个列表容器然后填入了100000000个数，这一步其实是比较耗时间的，所以为了公平起见，当我们将这个任务分解到8个进程中去执行的时候，我们暂时也不考虑列表切片操作花费的时间，只是把做运算和合并运算结果的时间统计出来，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process, Queue<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">task_handler</span>(<span class="hljs-params">curr_list, result_queue</span>):</span><br>    total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> curr_list:<br>        total += number<br>    result_queue.put(total)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    processes = []<br>    number_list = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100000001</span>)]<br>    result_queue = Queue()<br>    index = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 启动8个进程将数据切片后进行运算</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        p = Process(target=task_handler,<br>                    args=(number_list[index:index + <span class="hljs-number">12500000</span>], result_queue))<br>        index += <span class="hljs-number">12500000</span><br>        processes.append(p)<br>        p.start()<br>    <span class="hljs-comment"># 开始记录所有进程执行完成花费的时间</span><br>    start = time()<br>    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> processes:<br>        p.join()<br>    <span class="hljs-comment"># 合并执行结果</span><br>    total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> result_queue.empty():<br>        total += result_queue.get()<br>    print(total)<br>    end = time()<br>    print(<span class="hljs-string">&#x27;Execution time: &#x27;</span>, (end - start), <span class="hljs-string">&#x27;s&#x27;</span>, sep=<span class="hljs-string">&#x27;&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>比较两段代码的执行结果（在我目前使用的MacBook上，上面的代码需要大概6秒左右的时间，而下面的代码只需要不到1秒的时间，再强调一次我们只是比较了运算的时间，不考虑列表创建及切片操作花费的时间），使用多进程后由于获得了更多的CPU执行时间以及更好的利用了CPU的多核特性，明显的减少了程序的执行时间，而且计算量越大效果越明显。当然，如果愿意还可以将多个进程部署在不同的计算机上，做成分布式进程，具体的做法就是通过<code>multiprocessing.managers</code>模块中提供的管理器将<code>Queue</code>对象通过网络共享出来（注册到网络上让其他计算机可以访问），这部分内容也留到爬虫的专题再进行讲解。</p>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【python学习】-字符串和正则表达式</title>
    <link href="/post/13983.html"/>
    <url>/post/13983.html</url>
    
    <content type="html"><![CDATA[<h1 id="【python学习】-字符串和正则表达式"><a href="#【python学习】-字符串和正则表达式" class="headerlink" title="【python学习】-字符串和正则表达式"></a>【python学习】-字符串和正则表达式</h1><h2 id="使用正则表达式"><a href="#使用正则表达式" class="headerlink" title="使用正则表达式"></a>使用正则表达式</h2><h3 id="正则表达式相关知识"><a href="#正则表达式相关知识" class="headerlink" title="正则表达式相关知识"></a>正则表达式相关知识</h3><p>在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要，正则表达式就是用于描述这些规则的工具，换句话说正则表达式是一种工具，它定义了字符串的匹配模式（如何检查一个字符串是否有跟某种模式匹配的部分或者从一个字符串中将与模式匹配的部分提取出来或者替换掉）。如果你在Windows操作系统中使用过文件查找并且在指定文件名时使用过通配符（*和?），那么正则表达式也是与之类似的用来进行文本匹配的工具，只不过比起通配符正则表达式更强大，它能更精确地描述你的需求（当然你付出的代价是书写一个正则表达式比打出一个通配符要复杂得多，要知道任何给你带来好处的东西都是有代价的，就如同学习一门编程语言一样），比如你可以编写一个正则表达式，用来查找所有以0开头，后面跟着2-3个数字，然后是一个连字号“-”，最后是7或8位数字的字符串（像028-12345678或0813-7654321），这不就是国内的座机号码吗。最初计算机是为了做数学运算而诞生的，处理的信息基本上都是数值，而今天我们在日常工作中处理的信息基本上都是文本数据，我们希望计算机能够识别和处理符合某些模式的文本，正则表达式就显得非常重要了。今天几乎所有的编程语言都提供了对正则表达式操作的支持，Python通过标准库中的re模块来支持正则表达式操作。</p><p>我们可以考虑下面一个问题：我们从某个地方（可能是一个文本文件，也可能是网络上的一则新闻）获得了一个字符串，希望在字符串中找出手机号和座机号。当然我们可以设定手机号是11位的数字（注意并不是随机的11位数字，因为你没有见过“25012345678”这样的手机号吧）而座机号跟上一段中描述的模式相同，如果不使用正则表达式要完成这个任务就会很麻烦。</p><p>关于正则表达式的相关知识，大家可以阅读一篇非常有名的博客叫<a href="https://deerchao.net/tutorials/regex/regex.htm">《正则表达式30分钟入门教程》</a>，读完这篇文章后你就可以看懂下面的表格，这是我们对正则表达式中的一些基本符号进行的扼要总结。</p><table><thead><tr><th>符号</th><th>解释</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>匹配任意字符</td><td>b.t</td><td>可以匹配bat / but / b#t / b1t等</td></tr><tr><td>\w</td><td>匹配字母/数字/下划线</td><td>b\wt</td><td>可以匹配bat / b1t / b_t等<br>但不能匹配b#t</td></tr><tr><td>\s</td><td>匹配空白字符（包括\r、\n、\t等）</td><td>love\syou</td><td>可以匹配love you</td></tr><tr><td>\d</td><td>匹配数字</td><td>\d\d</td><td>可以匹配01 / 23 / 99等</td></tr><tr><td>\b</td><td>匹配单词的边界</td><td>\bThe\b</td><td></td></tr><tr><td>^</td><td>匹配字符串的开始</td><td>^The</td><td>可以匹配The开头的字符串</td></tr><tr><td>$</td><td>匹配字符串的结束</td><td>.exe$</td><td>可以匹配.exe结尾的字符串</td></tr><tr><td>\W</td><td>匹配非字母/数字/下划线</td><td>b\Wt</td><td>可以匹配b#t / b@t等<br>但不能匹配but / b1t / b_t等</td></tr><tr><td>\S</td><td>匹配非空白字符</td><td>love\Syou</td><td>可以匹配love#you等<br>但不能匹配love you</td></tr><tr><td>\D</td><td>匹配非数字</td><td>\d\D</td><td>可以匹配9a / 3# / 0F等</td></tr><tr><td>\B</td><td>匹配非单词边界</td><td>\Bio\B</td><td></td></tr><tr><td>[]</td><td>匹配来自字符集的任意单一字符</td><td>[aeiou]</td><td>可以匹配任一元音字母字符</td></tr><tr><td>[^]</td><td>匹配不在字符集中的任意单一字符</td><td>[^aeiou]</td><td>可以匹配任一非元音字母字符</td></tr><tr><td>*</td><td>匹配0次或多次</td><td>\w*</td><td></td></tr><tr><td>+</td><td>匹配1次或多次</td><td>\w+</td><td></td></tr><tr><td>?</td><td>匹配0次或1次</td><td>\w?</td><td></td></tr><tr><td>{N}</td><td>匹配N次</td><td>\w{3}</td><td></td></tr><tr><td>{M,}</td><td>匹配至少M次</td><td>\w{3,}</td><td></td></tr><tr><td>{M,N}</td><td>匹配至少M次至多N次</td><td>\w{3,6}</td><td></td></tr><tr><td>|</td><td>分支</td><td>foo|bar</td><td>可以匹配foo或者bar</td></tr><tr><td>(?#)</td><td>注释</td><td></td><td></td></tr><tr><td>(exp)</td><td>匹配exp并捕获到自动命名的组中</td><td></td><td></td></tr><tr><td>(?&nbsp;&lt;name&gt;exp)</td><td>匹配exp并捕获到名为name的组中</td><td></td><td></td></tr><tr><td>(?:exp)</td><td>匹配exp但是不捕获匹配的文本</td><td></td><td></td></tr><tr><td>(?=exp)</td><td>匹配exp前面的位置</td><td>\b\w+(?=ing)</td><td>可以匹配I’m dancing中的danc</td></tr><tr><td>(?&lt;=exp)</td><td>匹配exp后面的位置</td><td>(?&lt;=\bdanc)\w+\b</td><td>可以匹配I love dancing and reading中的第一个ing</td></tr><tr><td>(?!exp)</td><td>匹配后面不是exp的位置</td><td></td><td></td></tr><tr><td>(?&lt;!exp)</td><td>匹配前面不是exp的位置</td><td></td><td></td></tr><tr><td>*?</td><td>重复任意次，但尽可能少重复</td><td>a.*b<br>a.*?b</td><td>将正则表达式应用于aabab，前者会匹配整个字符串aabab，后者会匹配aab和ab两个字符串</td></tr><tr><td>+?</td><td>重复1次或多次，但尽可能少重复</td><td></td><td></td></tr><tr><td>??</td><td>重复0次或1次，但尽可能少重复</td><td></td><td></td></tr><tr><td>{M,N}?</td><td>重复M到N次，但尽可能少重复</td><td></td><td></td></tr><tr><td>{M,}?</td><td>重复M次以上，但尽可能少重复</td><td></td><td></td></tr></tbody></table><blockquote><p><strong>说明：</strong> 如果需要匹配的字符是正则表达式中的特殊字符，那么可以使用\进行转义处理，例如想匹配小数点可以写成\.就可以了，因为直接写.会匹配任意字符；同理，想匹配圆括号必须写成\(和\)，否则圆括号被视为正则表达式中的分组。</p></blockquote><h3 id="Python对正则表达式的支持"><a href="#Python对正则表达式的支持" class="headerlink" title="Python对正则表达式的支持"></a>Python对正则表达式的支持</h3><p>Python提供了re模块来支持正则表达式相关操作，下面是re模块中的核心函数。</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>compile(pattern, flags=0)</td><td>编译正则表达式返回正则表达式对象</td></tr><tr><td>match(pattern, string, flags=0)</td><td>用正则表达式匹配字符串 成功返回匹配对象 否则返回None</td></tr><tr><td>search(pattern, string, flags=0)</td><td>搜索字符串中第一次出现正则表达式的模式 成功返回匹配对象 否则返回None</td></tr><tr><td>split(pattern, string, maxsplit=0, flags=0)</td><td>用正则表达式指定的模式分隔符拆分字符串 返回列表</td></tr><tr><td>sub(pattern, repl, string, count=0, flags=0)</td><td>用指定的字符串替换原字符串中与正则表达式匹配的模式 可以用count指定替换的次数</td></tr><tr><td>fullmatch(pattern, string, flags=0)</td><td>match函数的完全匹配（从字符串开头到结尾）版本</td></tr><tr><td>findall(pattern, string, flags=0)</td><td>查找字符串所有与正则表达式匹配的模式 返回字符串的列表</td></tr><tr><td>finditer(pattern, string, flags=0)</td><td>查找字符串所有与正则表达式匹配的模式 返回一个迭代器</td></tr><tr><td>purge()</td><td>清除隐式编译的正则表达式的缓存</td></tr><tr><td>re.I / re.IGNORECASE</td><td>忽略大小写匹配标记</td></tr><tr><td>re.M / re.MULTILINE</td><td>多行匹配标记</td></tr></tbody></table><blockquote><p><strong>说明：</strong> 上面提到的re模块中的这些函数，实际开发中也可以用正则表达式对象的方法替代对这些函数的使用，如果一个正则表达式需要重复的使用，那么先通过compile函数编译正则表达式并创建出正则表达式对象无疑是更为明智的选择。</p></blockquote><p>下面我们通过一系列的例子来告诉大家在Python中如何使用正则表达式。</p><h4 id="例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。"><a href="#例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。" class="headerlink" title="例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。"></a>例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">验证输入用户名和QQ号是否有效并给出对应的提示信息</span><br><span class="hljs-string"></span><br><span class="hljs-string">要求：用户名必须由字母、数字或下划线构成且长度在6~20个字符之间，QQ号是5~12的数字且首位不能为0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> re<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    username = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入用户名: &#x27;</span>)<br>    qq = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入QQ号: &#x27;</span>)<br>    <span class="hljs-comment"># match函数的第一个参数是正则表达式字符串或正则表达式对象</span><br>    <span class="hljs-comment"># 第二个参数是要跟正则表达式做匹配的字符串对象</span><br>    m1 = re.match(<span class="hljs-string">r&#x27;^[0-9a-zA-Z_]&#123;6,20&#125;$&#x27;</span>, username)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> m1:<br>        print(<span class="hljs-string">&#x27;请输入有效的用户名.&#x27;</span>)<br>    m2 = re.match(<span class="hljs-string">r&#x27;^[1-9]\d&#123;4,11&#125;$&#x27;</span>, qq)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> m2:<br>        print(<span class="hljs-string">&#x27;请输入有效的QQ号.&#x27;</span>)<br>    <span class="hljs-keyword">if</span> m1 <span class="hljs-keyword">and</span> m2:<br>        print(<span class="hljs-string">&#x27;你输入的信息是有效的!&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong> 上面在书写正则表达式时使用了“原始字符串”的写法（在字符串前面加上了r），所谓“原始字符串”就是字符串中的每个字符都是它原始的意义，说得更直接一点就是字符串中没有所谓的转义字符啦。因为正则表达式中有很多元字符和需要进行转义的地方，如果不使用原始字符串就需要将反斜杠写作\\，例如表示数字的\d得书写成\\d，这样不仅写起来不方便，阅读的时候也会很吃力。</p></blockquote><h4 id="例子2：从一段文字中提取出国内手机号码。"><a href="#例子2：从一段文字中提取出国内手机号码。" class="headerlink" title="例子2：从一段文字中提取出国内手机号码。"></a>例子2：从一段文字中提取出国内手机号码。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> re<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-comment"># 创建正则表达式对象 使用了前瞻和回顾来保证手机号前后不应该出现数字</span><br>    pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;(?&lt;=\D)1[34578]\d&#123;9&#125;(?=\D)&#x27;</span>)<br>    sentence = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    重要的事情说8130123456789遍，我的手机号是13512346789这个靓号，</span><br><span class="hljs-string">    不是15600998765，也是110或119，王大锤的手机号才是15600998765。</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-comment"># 查找所有匹配并保存到一个列表中</span><br>    mylist = re.findall(pattern, sentence)<br>    print(mylist)<br>    print(<span class="hljs-string">&#x27;--------华丽的分隔线--------&#x27;</span>)<br>    <span class="hljs-comment"># 通过迭代器取出匹配对象并获得匹配的内容</span><br>    <span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> pattern.finditer(sentence):<br>        print(temp.group())<br>    print(<span class="hljs-string">&#x27;--------华丽的分隔线--------&#x27;</span>)<br>    <span class="hljs-comment"># 通过search函数指定搜索位置找出所有匹配</span><br>    m = pattern.search(sentence)<br>    <span class="hljs-keyword">while</span> m:<br>        print(m.group())<br>        m = pattern.search(sentence, m.end())<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> 上面匹配国内手机号的正则表达式并不够好，因为像14开头的号码只有145或147，而上面的正则表达式并没有考虑这种情况，要匹配国内手机号，更好的正则表达式的写法是：<code>(?&lt;=\D)(1[38]\d&#123;9&#125;|14[57]\d&#123;8&#125;|15[0-35-9]\d&#123;8&#125;|17[678]\d&#123;8&#125;)(?=\D)</code>，国内最近好像有19和16开头的手机号了，但是这个暂时不在我们考虑之列。</p></blockquote><h4 id="例子3：替换字符串中的不良内容"><a href="#例子3：替换字符串中的不良内容" class="headerlink" title="例子3：替换字符串中的不良内容"></a>例子3：替换字符串中的不良内容</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> re<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    sentence = <span class="hljs-string">&#x27;你丫是傻叉吗? 我操你大爷的. Fuck you.&#x27;</span><br>    purified = re.sub(<span class="hljs-string">&#x27;[操肏艹]|fuck|shit|傻[比屄逼叉缺吊屌]|煞笔&#x27;</span>,<br>                      <span class="hljs-string">&#x27;*&#x27;</span>, sentence, flags=re.IGNORECASE)<br>    print(purified)  <span class="hljs-comment"># 你丫是*吗? 我*你大爷的. * you.</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> re模块的正则表达式相关函数中都有一个flags参数，它代表了正则表达式的匹配标记，可以通过该标记来指定匹配时是否忽略大小写、是否进行多行匹配、是否显示调试信息等。如果需要为flags参数指定多个值，可以使用<a href="http://www.runoob.com/python/python-operators.html#ysf5">按位或运算符</a>进行叠加，如<code>flags=re.I | re.M</code>。</p></blockquote><h4 id="例子4：拆分长字符串"><a href="#例子4：拆分长字符串" class="headerlink" title="例子4：拆分长字符串"></a>例子4：拆分长字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> re<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    poem = <span class="hljs-string">&#x27;窗前明月光，疑是地上霜。举头望明月，低头思故乡。&#x27;</span><br>    sentence_list = re.split(<span class="hljs-string">r&#x27;[，。, .]&#x27;</span>, poem)<br>    <span class="hljs-keyword">while</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">in</span> sentence_list:<br>        sentence_list.remove(<span class="hljs-string">&#x27;&#x27;</span>)<br>    print(sentence_list)  <span class="hljs-comment"># [&#x27;窗前明月光&#x27;, &#x27;疑是地上霜&#x27;, &#x27;举头望明月&#x27;, &#x27;低头思故乡&#x27;]</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h3><p>如果要从事爬虫类应用的开发，那么正则表达式一定是一个非常好的助手，因为它可以帮助我们迅速的从网页代码中发现某种我们指定的模式并提取出我们需要的信息，当然对于初学者来收，要编写一个正确的适当的正则表达式可能并不是一件容易的事情（当然有些常用的正则表达式可以直接在网上找找），所以实际开发爬虫应用的时候，有很多人会选择<a href="https://www.crummy.com/software/BeautifulSoup/">Beautiful Soup</a>或<a href="http://lxml.de/">Lxml</a>来进行匹配和信息的提取，前者简单方便但是性能较差，后者既好用性能也好，但是安装稍嫌麻烦，这些内容我们会在后期的爬虫专题中为大家介绍。</p>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【python学习】python函数</title>
    <link href="/post/63794.html"/>
    <url>/post/63794.html</url>
    
    <content type="html"><![CDATA[<h1 id="python函数"><a href="#python函数" class="headerlink" title="python函数"></a>python函数</h1><p><strong>函数说明文档</strong>：</p><p>【定义函数说明文档】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> 函数名（形参）:</span><br><span class="hljs-string">&#x27;&#x27;&#x27;说明文档位置&#x27;&#x27;&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">代码</span><br><span class="hljs-string">。。。。。。</span><br></code></pre></td></tr></table></figure><p>【查看函数的说明文档】</p><p>help（函数名）</p><p><strong>位置参数</strong>：在定义函数时，参数的名字和位置已被确认</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">abc</span>(<span class="hljs-params">姓名,年龄,性别</span>):</span><br>    print(<span class="hljs-string">f&#x27;您的姓名是<span class="hljs-subst">&#123;姓名&#125;</span>，性别<span class="hljs-subst">&#123;性别&#125;</span>，年龄<span class="hljs-subst">&#123;年龄&#125;</span>岁&#x27;</span>)<br>    <br>abc(<span class="hljs-string">&#x27;hockel&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">25</span>)<br></code></pre></td></tr></table></figure><p>函数名(‘hockel’,’男’,25）</p><p><strong>关键字参数</strong>：传入实参是，明确形参变量名，参数之间**<em>不存在先后顺序**</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">abc</span>(<span class="hljs-params">姓名,年龄,性别</span>):</span><br>    print(<span class="hljs-string">f&#x27;您的姓名是<span class="hljs-subst">&#123;姓名&#125;</span>，性别<span class="hljs-subst">&#123;性别&#125;</span>，年龄<span class="hljs-subst">&#123;年龄&#125;</span>岁&#x27;</span>)<br>    <br>abc(<span class="hljs-string">&#x27;hockel&#x27;</span>,性别=<span class="hljs-string">&#x27;男&#x27;</span>,年龄=<span class="hljs-number">25</span>)<br></code></pre></td></tr></table></figure><p>函数调用时，通过‘键=值’的形式加以指定，清除参数的顺序问题。</p><p><strong>注意：调用函数时，如有位置参数，位置参数必需在关键字参数的前面，否则报错</strong></p><p><strong>默认参数（缺省参数）：</strong>参数指定默认值，调用时不传入实参，就用 默认值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">abc</span>(<span class="hljs-params">姓名,年龄,性别=‘男’</span>):</span><br>    print(<span class="hljs-string">f&#x27;您的姓名是<span class="hljs-subst">&#123;姓名&#125;</span>，性别<span class="hljs-subst">&#123;性别&#125;</span>，年龄<span class="hljs-subst">&#123;年龄&#125;</span>岁&#x27;</span>)<br>    <br>abc(<span class="hljs-string">&#x27;hockel&#x27;</span>,<span class="hljs-number">25</span>)<br>abc(<span class="hljs-string">&#x27;joan&#x27;</span>,<span class="hljs-number">33</span>,性别=‘女’)<br></code></pre></td></tr></table></figure><p><strong>可变参数（收集参数）：</strong></p><p>1、位置可变参数（接受所有的位置参数，返回一个元组）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> 函数名(<span class="hljs-params">*args</span>):</span><br><br>​print(args)<br>函数名（’hockel‘）     <span class="hljs-comment">#（‘hockel’）</span><br>函数名（‘Joan’，<span class="hljs-number">20</span>）   <span class="hljs-comment"># （‘Joan’，20）</span><br></code></pre></td></tr></table></figure><p>2、关键字可变参数（接受所有的关键字，返回一个字典）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> 函数名(<span class="hljs-params">**kwargs</span>):</span><br>print(kwargs)<br><br>函数名（姓名 = ‘hockel’，年龄=<span class="hljs-number">20</span>，性别=‘男“）<br></code></pre></td></tr></table></figure><p>1、局部变量：定义在函数内部的变量，即只在函数内部生效</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> 函数名():</span><br>    a = <span class="hljs-number">520</span><br>    print(a)<br><br>函数名（）   <span class="hljs-comment">#调用函数</span><br>print(a)    <span class="hljs-comment">#报错！！！a 是内部变量，无法外部访问</span><br></code></pre></td></tr></table></figure><p>2、全局变量：定义在函数外部的变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">520</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> 函数名():</span><br><br>    print(a)<br><br>函数名（）   <span class="hljs-comment">#调用函数</span><br>print(a)    <br></code></pre></td></tr></table></figure><p>3、在函数内部修改全局变量（global）</p><p><strong>切记：不要轻易修改全局变量，除非万不得已！</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">520</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> 函数名（）：</span><br><span class="hljs-function"><span class="hljs-title">global</span> <span class="hljs-title">a</span> #声明<span class="hljs-title">a</span> 为全局变量</span><br>a = 1314<br>print(a)<br>函数名（）  <span class="hljs-comment">#调用函数  1314</span><br></code></pre></td></tr></table></figure><p>多函数程序执行流程：一般在实际开发过程中，一个程序往往由多个函数组成，并且多个函数共享某些数据</p><p>多函数公用全局变量的流程、；</p><p>1、声明全局变量</p><p>2、定义两个函数</p><p>3、函数1修改全局变量，函数2访问全局变量</p><p>4、先调用函数1（函数1修改了全局变量），再调用函数2时就可以使用修改后的全局变量了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1314</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">name1</span>():</span><br><span class="hljs-keyword">global</span> a    <span class="hljs-comment">#声明a 是一个全局变量 就是外部变量</span><br>    a = <span class="hljs-number">520</span><br>    <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">name2</span>():</span><br>    print(a)<br>    <br>name1()<br>name2()<br>    <br></code></pre></td></tr></table></figure><p><strong>函数返回值：return</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">def 函数名（a,b):#多个返回值写成 return a,b 返回是一个元组（a,b)<br>    <span class="hljs-keyword">return</span> a + b<span class="hljs-comment">#return后面可以连接列表，元组或者字典也能返回多个返回值</span><br><span class="hljs-comment">#遇到rerun退出当前函数</span><br>变量名 = 函数名（<span class="hljs-number">520</span>，<span class="hljs-number">1314</span>）<br>print(变量名)<br><span class="hljs-comment">#如果这里有多条return语句执行第一个</span><br><br></code></pre></td></tr></table></figure><p><strong>多函数返回值做参数传递</strong>：</p><p>1.定义函数1，return返回一个值</p><p>2、定义带形参的函数2，打印形参</p><p>3、将调用函数1的返回值，赋值给一个 变量。列如：变量名 = 函数名1（）</p><p>4、调用函数2，用刚才的变量做参数 列如：函数名2（变量名）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">name1</span>():</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">520</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">name</span>(<span class="hljs-params">a</span>):</span><br>    print(a)<br>b = name1()<br>name(b)<br></code></pre></td></tr></table></figure><p><strong>元组 拆包</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> 函数名():</span><br>    retrun <span class="hljs-number">520</span>,<span class="hljs-number">1314</span><br><br>a,b = 函数名()<br>print(a)<br>print(b)<br></code></pre></td></tr></table></figure><p>字典拆包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">c = &#123;<span class="hljs-string">&#x27;姓名&#x27;</span> : <span class="hljs-string">&#x27;hockel&#x27;</span>,<span class="hljs-string">&#x27;年龄&#x27;</span>：<span class="hljs-number">20</span>&#125; <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">name</span>():</span><br>    <span class="hljs-keyword">return</span> c<br><br>a,b = name()<br>print(a,b)    <span class="hljs-comment">#打印键</span><br>print(c[a])   <span class="hljs-comment">#打印值</span><br>print(c[b])<br></code></pre></td></tr></table></figure><p>什么是递归？递归背部自己调用自己，必需留有出口。（套娃）</p><p>实例：1+2+3+4+5…..+100</p><p>把它看成：100+99+98+….+1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> 函数名(<span class="hljs-params">形参</span>):</span><br>    <span class="hljs-keyword">if</span> 形参 == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    结果 = 形参 + 函数名(形参 - <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> 结果<br>变量名 = 函数名(<span class="hljs-number">100</span>)<br>print(变量名)<br></code></pre></td></tr></table></figure><p>遇到return：（1）返回值（2）退出当前函数</p><p><strong>函数式编程是一种古老的编程模式，就是用函数来表示程序，用函数的组合来表达组合的思维方式</strong></p><h2 id="函数编程之lambda表达式"><a href="#函数编程之lambda表达式" class="headerlink" title="函数编程之lambda表达式"></a>函数编程之lambda表达式</h2><p>1、什么时候用lambda表达式？</p><p>当函数有一个返回值，且只有一句代码，可以用lambda简写</p><p>2、lambda语法</p><p><code>lambda 形参：表达式</code></p><p><strong>注意</strong></p><p>1，形参可以省略，函数的参数在lambda中也适用</p><p>2、lambda函数能接受任何数量的参数但只能返回一个表达式的值</p><p>函数与lambda表达式对比：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>():</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">520</span><br><br>print(func())<br>func = <span class="hljs-keyword">lambda</span>:<span class="hljs-number">520</span><br>print(func())<br>print((<span class="hljs-keyword">lambda</span>:<span class="hljs-number">520</span>)())<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func1</span>(<span class="hljs-params">a,b</span>):</span><br>    <span class="hljs-keyword">return</span> a + b<br><br>result = func1(<span class="hljs-number">520</span>,<span class="hljs-number">1314</span>)<br>print(result)<br>print((<span class="hljs-keyword">lambda</span> a,b: a+b)(<span class="hljs-number">520</span>,<span class="hljs-number">1314</span>))<br></code></pre></td></tr></table></figure><p>lambda参数形式：</p><p>1，无参数  <code>lambda:520()</code></p><p>2，一个参数   <code>(lambda a:a)(520)</code></p><p>3、默认参数   <code>（lamda a,b,c = a + b+ c)(2,6)</code></p><p>4、可变位置参数  <code>(lambda *args = args)(1,2,3)</code>  返回一个元组</p><p>5、可变关键字参数 <code>（lambda **kwargs = kwargs)(a=1,b=2)</code>返回的只一个字典</p><p>带（判断）条件语句的lambda：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">a,b</span>):</span><br>    <span class="hljs-keyword">return</span> a <span class="hljs-keyword">if</span> a&gt;b <span class="hljs-keyword">else</span> b<br><br>print(func(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))<br>(<span class="hljs-keyword">lambda</span> a,b :a <span class="hljs-keyword">if</span> a &gt; b <span class="hljs-keyword">else</span> b)(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>列表中的字典数据排序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = [&#123;<span class="hljs-string">&#x27;姓名&#x27;</span> : <span class="hljs-string">&#x27;hockel&#x27;</span>,<span class="hljs-string">&#x27;年龄&#x27;</span>：<span class="hljs-number">20</span>&#125;，&#123;<span class="hljs-string">&#x27;姓名&#x27;</span> : <span class="hljs-string">&#x27;jack&#x27;</span>,<span class="hljs-string">&#x27;年龄&#x27;</span>：<span class="hljs-number">20</span>&#125; ，&#123;<span class="hljs-string">&#x27;姓名&#x27;</span> : <span class="hljs-string">&#x27;tom&#x27;</span>,<span class="hljs-string">&#x27;年龄&#x27;</span>：<span class="hljs-number">20</span>&#125;]<br>dict1.sort(key= <span class="hljs-keyword">lambda</span> x:x[<span class="hljs-string">&#x27;姓名&#x27;</span>]，reverse = <span class="hljs-literal">True</span>)<br>print(dict1)<br></code></pre></td></tr></table></figure><h2 id="编程式编程之高阶函数"><a href="#编程式编程之高阶函数" class="headerlink" title="编程式编程之高阶函数"></a>编程式编程之高阶函数</h2><p>高阶函数：就是基于已有的函数定义新函数，以函数作为参数，返回也是函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">a,b</span>):</span>  <span class="hljs-comment">#普通函数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(a)+ <span class="hljs-built_in">abs</span>(b)<br>result = func(-<span class="hljs-number">5</span>,<span class="hljs-number">3</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func1</span>(<span class="hljs-params">a,b,c</span>):</span><br>    <span class="hljs-keyword">return</span> c(a) + c(b)<br>result = func1(-<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-built_in">abs</span>)<br></code></pre></td></tr></table></figure><h2 id="函数式编程之内置高阶函数"><a href="#函数式编程之内置高阶函数" class="headerlink" title="函数式编程之内置高阶函数"></a>函数式编程之内置高阶函数</h2><p>1，filter(函数名，可迭代对象) 作用：过渡序列中不符合条件的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>]<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">x</span>):</span><br>    <span class="hljs-keyword">return</span> x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span><br>result = <span class="hljs-built_in">filter</span>(func,list1)<br>print(result) <span class="hljs-comment"># 打印的是对象地址</span><br>print(<span class="hljs-built_in">list</span>[result])<br><br><br><span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x :x % <span class="hljs-number">2</span>,<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">11</span>))<br></code></pre></td></tr></table></figure><p><strong>注</strong></p><p>filter有两个参数，第一个参数可以是函数，也可以是None</p><p>当第一个参数是函数的时候，将第二个参数中每一个元素进行计算。</p><p>当第一个参数是none时，直接将第二个参数中True 的值赛选出来</p><p>2、.map(函数名，迭代对象)</p><p>作用：将可迭代对象的每一个元素作为函数的参数进行运算加工，直到可迭代序列每个元素都加工完毕。</p><p>计算列表元素中各个数字的2次方</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = [<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>)]<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">x</span>):</span><br>    <span class="hljs-keyword">return</span> x ** <span class="hljs-number">2</span><br>result = <span class="hljs-built_in">map</span>(func,dict1)<br>print(result)  <span class="hljs-comment">#打印出来的是地址对象的地址</span><br>print(<span class="hljs-built_in">list</span>(result)) <span class="hljs-comment"># 数据转换</span><br><br><span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>( <span class="hljs-keyword">lambda</span> x: x **<span class="hljs-number">2</span>,dict1))<br></code></pre></td></tr></table></figure><p>3、reduce(函数名（x,y),可迭代对象）</p><p>作用：函数中必需有连个参数，每个函数计算的结果继续和序列的写一个元素做累积计算</p><p>计算 下列数据之和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> functools<br>list1 = [<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>)]<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">a,b</span>):</span><br>    <span class="hljs-keyword">return</span> a + b<br>result = functools.reduce(func,list1)<br><br>functools,reduce(<span class="hljs-keyword">lambda</span> x, y : x + y , list1)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【python学习】-图形用户界面和游戏开发</title>
    <link href="/post/12264.html"/>
    <url>/post/12264.html</url>
    
    <content type="html"><![CDATA[<h1 id="【python学习】-图形用户界面和游戏开发"><a href="#【python学习】-图形用户界面和游戏开发" class="headerlink" title="【python学习】-图形用户界面和游戏开发"></a>【python学习】-图形用户界面和游戏开发</h1><h2 id="图形用户界面和游戏开发"><a href="#图形用户界面和游戏开发" class="headerlink" title="图形用户界面和游戏开发"></a>图形用户界面和游戏开发</h2><h3 id="基于tkinter模块的GUI"><a href="#基于tkinter模块的GUI" class="headerlink" title="基于tkinter模块的GUI"></a>基于tkinter模块的GUI</h3><p>GUI是图形用户界面的缩写，图形化的用户界面对使用过计算机的人来说应该都不陌生，在此也无需进行赘述。Python默认的GUI开发模块是tkinter（在Python 3以前的版本中名为Tkinter），从这个名字就可以看出它是基于Tk的，Tk是一个工具包，最初是为Tcl设计的，后来被移植到很多其他的脚本语言中，它提供了跨平台的GUI控件。当然Tk并不是最新和最好的选择，也没有功能特别强大的GUI控件，事实上，开发GUI应用并不是Python最擅长的工作，如果真的需要使用Python开发GUI应用，wxPython、PyQt、PyGTK等模块都是不错的选择。</p><p>基本上使用tkinter来开发GUI应用需要以下5个步骤：</p><ol><li>导入tkinter模块中我们需要的东西。</li><li>创建一个顶层窗口对象并用它来承载整个GUI应用。</li><li>在顶层窗口对象上添加GUI组件。</li><li>通过代码将这些GUI组件的功能组织起来。</li><li>进入主事件循环(main loop)。</li></ol><p>下面的代码演示了如何使用tkinter做一个简单的GUI应用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> tkinter<br><span class="hljs-keyword">import</span> tkinter.messagebox<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    flag = <span class="hljs-literal">True</span><br><br>    <span class="hljs-comment"># 修改标签上的文字</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">change_label_text</span>():</span><br>        <span class="hljs-keyword">nonlocal</span> flag<br>        flag = <span class="hljs-keyword">not</span> flag<br>        color, msg = (<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;Hello, world!&#x27;</span>)\<br>            <span class="hljs-keyword">if</span> flag <span class="hljs-keyword">else</span> (<span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;Goodbye, world!&#x27;</span>)<br>        label.config(text=msg, fg=color)<br><br>    <span class="hljs-comment"># 确认退出</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">confirm_to_quit</span>():</span><br>        <span class="hljs-keyword">if</span> tkinter.messagebox.askokcancel(<span class="hljs-string">&#x27;温馨提示&#x27;</span>, <span class="hljs-string">&#x27;确定要退出吗?&#x27;</span>):<br>            top.quit()<br><br>    <span class="hljs-comment"># 创建顶层窗口</span><br>    top = tkinter.Tk()<br>    <span class="hljs-comment"># 设置窗口大小</span><br>    top.geometry(<span class="hljs-string">&#x27;240x160&#x27;</span>)<br>    <span class="hljs-comment"># 设置窗口标题</span><br>    top.title(<span class="hljs-string">&#x27;小游戏&#x27;</span>)<br>    <span class="hljs-comment"># 创建标签对象并添加到顶层窗口</span><br>    label = tkinter.Label(top, text=<span class="hljs-string">&#x27;Hello, world!&#x27;</span>, font=<span class="hljs-string">&#x27;Arial -32&#x27;</span>, fg=<span class="hljs-string">&#x27;red&#x27;</span>)<br>    label.pack(expand=<span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># 创建一个装按钮的容器</span><br>    panel = tkinter.Frame(top)<br>    <span class="hljs-comment"># 创建按钮对象 指定添加到哪个容器中 通过command参数绑定事件回调函数</span><br>    button1 = tkinter.Button(panel, text=<span class="hljs-string">&#x27;修改&#x27;</span>, command=change_label_text)<br>    button1.pack(side=<span class="hljs-string">&#x27;left&#x27;</span>)<br>    button2 = tkinter.Button(panel, text=<span class="hljs-string">&#x27;退出&#x27;</span>, command=confirm_to_quit)<br>    button2.pack(side=<span class="hljs-string">&#x27;right&#x27;</span>)<br>    panel.pack(side=<span class="hljs-string">&#x27;bottom&#x27;</span>)<br>    <span class="hljs-comment"># 开启主事件循环</span><br>    tkinter.mainloop()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>需要说明的是，GUI应用通常是事件驱动式的，之所以要进入主事件循环就是要监听鼠标、键盘等各种事件的发生并执行对应的代码对事件进行处理，因为事件会持续的发生，所以需要这样的一个循环一直运行着等待下一个事件的发生。另一方面，Tk为控件的摆放提供了三种布局管理器，通过布局管理器可以对控件进行定位，这三种布局管理器分别是：Placer（开发者提供控件的大小和摆放位置）、Packer（自动将控件填充到合适的位置）和Grid（基于网格坐标来摆放控件），此处不进行赘述。</p><h3 id="使用Pygame进行游戏开发"><a href="#使用Pygame进行游戏开发" class="headerlink" title="使用Pygame进行游戏开发"></a>使用Pygame进行游戏开发</h3><p>Pygame是一个开源的Python模块，专门用于多媒体应用（如电子游戏）的开发，其中包含对图像、声音、视频、事件、碰撞等的支持。Pygame建立在<a href="https://zh.wikipedia.org/wiki/SDL">SDL</a>的基础上，SDL是一套跨平台的多媒体开发库，用C语言实现，被广泛的应用于游戏、模拟器、播放器等的开发。而Pygame让游戏开发者不再被底层语言束缚，可以更多的关注游戏的功能和逻辑。</p><p>下面我们来完成一个简单的小游戏，游戏的名字叫“大球吃小球”，当然完成这个游戏并不是重点，学会使用Pygame也不是重点，最重要的我们要在这个过程中体会如何使用前面讲解的面向对象程序设计，学会用这种编程思想去解决现实中的问题。</p><h4 id="制作游戏窗口"><a href="#制作游戏窗口" class="headerlink" title="制作游戏窗口"></a>制作游戏窗口</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pygame<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-comment"># 初始化导入的pygame中的模块</span><br>    pygame.init()<br>    <span class="hljs-comment"># 初始化用于显示的窗口并设置窗口尺寸</span><br>    screen = pygame.display.set_mode((<span class="hljs-number">800</span>, <span class="hljs-number">600</span>))<br>    <span class="hljs-comment"># 设置当前窗口的标题</span><br>    pygame.display.set_caption(<span class="hljs-string">&#x27;大球吃小球&#x27;</span>)<br>    running = <span class="hljs-literal">True</span><br>    <span class="hljs-comment"># 开启一个事件循环处理发生的事件</span><br>    <span class="hljs-keyword">while</span> running:<br>        <span class="hljs-comment"># 从消息队列中获取事件并对事件进行处理</span><br>        <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>            <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>                running = <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h4 id="在窗口中绘图"><a href="#在窗口中绘图" class="headerlink" title="在窗口中绘图"></a>在窗口中绘图</h4><p>可以通过pygame中draw模块的函数在窗口上绘图，可以绘制的图形包括：线条、矩形、多边形、圆、椭圆、圆弧等。需要说明的是，屏幕坐标系是将屏幕左上角设置为坐标原点<code>(0, 0)</code>，向右是x轴的正向，向下是y轴的正向，在表示位置或者设置尺寸的时候，我们默认的单位都是<a href="https://zh.wikipedia.org/wiki/%E5%83%8F%E7%B4%A0">像素</a>。所谓像素就是屏幕上的一个点，你可以用浏览图片的软件试着将一张图片放大若干倍，就可以看到这些点。pygame中表示颜色用的是色光<a href="https://zh.wikipedia.org/wiki/%E5%8E%9F%E8%89%B2">三原色</a>表示法，即通过一个元组或列表来指定颜色的RGB值，每个值都在0~255之间，因为是每种原色都用一个8位（bit）的值来表示，三种颜色相当于一共由24位构成，这也就是常说的“24位颜色表示法”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pygame<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-comment"># 初始化导入的pygame中的模块</span><br>    pygame.init()<br>    <span class="hljs-comment"># 初始化用于显示的窗口并设置窗口尺寸</span><br>    screen = pygame.display.set_mode((<span class="hljs-number">800</span>, <span class="hljs-number">600</span>))<br>    <span class="hljs-comment"># 设置当前窗口的标题</span><br>    pygame.display.set_caption(<span class="hljs-string">&#x27;大球吃小球&#x27;</span>)<br>    <span class="hljs-comment"># 设置窗口的背景色(颜色是由红绿蓝三原色构成的元组)</span><br>    screen.fill((<span class="hljs-number">242</span>, <span class="hljs-number">242</span>, <span class="hljs-number">242</span>))<br>    <span class="hljs-comment"># 绘制一个圆(参数分别是: 屏幕, 颜色, 圆心位置, 半径, 0表示填充圆)</span><br>    pygame.draw.circle(screen, (<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,), (<span class="hljs-number">100</span>, <span class="hljs-number">100</span>), <span class="hljs-number">30</span>, <span class="hljs-number">0</span>)<br>    <span class="hljs-comment"># 刷新当前窗口(渲染窗口将绘制的图像呈现出来)</span><br>    pygame.display.flip()<br>    running = <span class="hljs-literal">True</span><br>    <span class="hljs-comment"># 开启一个事件循环处理发生的事件</span><br>    <span class="hljs-keyword">while</span> running:<br>        <span class="hljs-comment"># 从消息队列中获取事件并对事件进行处理</span><br>        <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>            <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>                running = <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h4 id="加载图像"><a href="#加载图像" class="headerlink" title="加载图像"></a>加载图像</h4><p>如果需要直接加载图像到窗口上，可以使用pygame中image模块的函数来加载图像，再通过之前获得的窗口对象的<code>blit</code>方法渲染图像，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pygame<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-comment"># 初始化导入的pygame中的模块</span><br>    pygame.init()<br>    <span class="hljs-comment"># 初始化用于显示的窗口并设置窗口尺寸</span><br>    screen = pygame.display.set_mode((<span class="hljs-number">800</span>, <span class="hljs-number">600</span>))<br>    <span class="hljs-comment"># 设置当前窗口的标题</span><br>    pygame.display.set_caption(<span class="hljs-string">&#x27;大球吃小球&#x27;</span>)<br>    <span class="hljs-comment"># 设置窗口的背景色(颜色是由红绿蓝三原色构成的元组)</span><br>    screen.fill((<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>))<br>    <span class="hljs-comment"># 通过指定的文件名加载图像</span><br>    ball_image = pygame.image.load(<span class="hljs-string">&#x27;./res/ball.png&#x27;</span>)<br>    <span class="hljs-comment"># 在窗口上渲染图像</span><br>    screen.blit(ball_image, (<span class="hljs-number">50</span>, <span class="hljs-number">50</span>))<br>    <span class="hljs-comment"># 刷新当前窗口(渲染窗口将绘制的图像呈现出来)</span><br>    pygame.display.flip()<br>    running = <span class="hljs-literal">True</span><br>    <span class="hljs-comment"># 开启一个事件循环处理发生的事件</span><br>    <span class="hljs-keyword">while</span> running:<br>        <span class="hljs-comment"># 从消息队列中获取事件并对事件进行处理</span><br>        <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>            <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>                running = <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h4 id="实现动画效果"><a href="#实现动画效果" class="headerlink" title="实现动画效果"></a>实现动画效果</h4><p>说到<a href="https://zh.wikipedia.org/wiki/%E5%8A%A8%E7%94%BB">动画</a>这个词大家都不会陌生，事实上要实现动画效果，本身的原理也非常简单，就是将不连续的图片连续的播放，只要每秒钟达到了一定的帧数，那么就可以做出比较流畅的动画效果。如果要让上面代码中的小球动起来，可以将小球的位置用变量来表示，并在循环中修改小球的位置再刷新整个窗口即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pygame<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-comment"># 初始化导入的pygame中的模块</span><br>    pygame.init()<br>    <span class="hljs-comment"># 初始化用于显示的窗口并设置窗口尺寸</span><br>    screen = pygame.display.set_mode((<span class="hljs-number">800</span>, <span class="hljs-number">600</span>))<br>    <span class="hljs-comment"># 设置当前窗口的标题</span><br>    pygame.display.set_caption(<span class="hljs-string">&#x27;大球吃小球&#x27;</span>)<br>    <span class="hljs-comment"># 定义变量来表示小球在屏幕上的位置</span><br>    x, y = <span class="hljs-number">50</span>, <span class="hljs-number">50</span><br>    running = <span class="hljs-literal">True</span><br>    <span class="hljs-comment"># 开启一个事件循环处理发生的事件</span><br>    <span class="hljs-keyword">while</span> running:<br>        <span class="hljs-comment"># 从消息队列中获取事件并对事件进行处理</span><br>        <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>            <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>                running = <span class="hljs-literal">False</span><br>        screen.fill((<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>))<br>        pygame.draw.circle(screen, (<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,), (x, y), <span class="hljs-number">30</span>, <span class="hljs-number">0</span>)<br>        pygame.display.flip()<br>        <span class="hljs-comment"># 每隔50毫秒就改变小球的位置再刷新窗口</span><br>        pygame.time.delay(<span class="hljs-number">50</span>)<br>        x, y = x + <span class="hljs-number">5</span>, y + <span class="hljs-number">5</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h4 id="碰撞检测"><a href="#碰撞检测" class="headerlink" title="碰撞检测"></a>碰撞检测</h4><p>通常一个游戏中会有很多对象出现，而这些对象之间的“碰撞”在所难免，比如炮弹击中了飞机、箱子撞到了地面等。碰撞检测在绝大多数的游戏中都是一个必须得处理的至关重要的问题，pygame的sprite（动画精灵）模块就提供了对碰撞检测的支持，这里我们暂时不介绍sprite模块提供的功能，因为要检测两个小球有没有碰撞其实非常简单，只需要检查球心的距离有没有小于两个球的半径之和。为了制造出更多的小球，我们可以通过对鼠标事件的处理，在点击鼠标的位置创建颜色、大小和移动速度都随机的小球，当然要做到这一点，我们可以把之前学习到的面向对象的知识应用起来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> Enum, unique<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sqrt<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><br><span class="hljs-keyword">import</span> pygame<br><br><br><span class="hljs-meta">@unique</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Color</span>(<span class="hljs-params">Enum</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;颜色&quot;&quot;&quot;</span><br><br>    RED = (<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>    GREEN = (<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>)<br>    BLUE = (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>)<br>    BLACK = (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>    WHITE = (<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>)<br>    GRAY = (<span class="hljs-number">242</span>, <span class="hljs-number">242</span>, <span class="hljs-number">242</span>)<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">random_color</span>():</span><br>        <span class="hljs-string">&quot;&quot;&quot;获得随机颜色&quot;&quot;&quot;</span><br>        r = randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)<br>        g = randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)<br>        b = randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)<br>        <span class="hljs-keyword">return</span> (r, g, b)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ball</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;球&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, x, y, radius, sx, sy, color=Color.RED</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;初始化方法&quot;&quot;&quot;</span><br>        self.x = x<br>        self.y = y<br>        self.radius = radius<br>        self.sx = sx<br>        self.sy = sy<br>        self.color = color<br>        self.alive = <span class="hljs-literal">True</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">move</span>(<span class="hljs-params">self, screen</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;移动&quot;&quot;&quot;</span><br>        self.x += self.sx<br>        self.y += self.sy<br>        <span class="hljs-keyword">if</span> self.x - self.radius &lt;= <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> \<br>                self.x + self.radius &gt;= screen.get_width():<br>            self.sx = -self.sx<br>        <span class="hljs-keyword">if</span> self.y - self.radius &lt;= <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> \<br>                self.y + self.radius &gt;= screen.get_height():<br>            self.sy = -self.sy<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">eat</span>(<span class="hljs-params">self, other</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;吃其他球&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> self.alive <span class="hljs-keyword">and</span> other.alive <span class="hljs-keyword">and</span> self != other:<br>            dx, dy = self.x - other.x, self.y - other.y<br>            distance = sqrt(dx ** <span class="hljs-number">2</span> + dy ** <span class="hljs-number">2</span>)<br>            <span class="hljs-keyword">if</span> distance &lt; self.radius + other.radius \<br>                    <span class="hljs-keyword">and</span> self.radius &gt; other.radius:<br>                other.alive = <span class="hljs-literal">False</span><br>                self.radius = self.radius + <span class="hljs-built_in">int</span>(other.radius * <span class="hljs-number">0.146</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">draw</span>(<span class="hljs-params">self, screen</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;在窗口上绘制球&quot;&quot;&quot;</span><br>        pygame.draw.circle(screen, self.color,<br>                           (self.x, self.y), self.radius, <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h4 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h4><p>可以在事件循环中对鼠标事件进行处理，通过事件对象的<code>type</code>属性可以判定事件类型，再通过<code>pos</code>属性就可以获得鼠标点击的位置。如果要处理键盘事件也是在这个地方，做法与处理鼠标事件类似。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-comment"># 定义用来装所有球的容器</span><br>    balls = []<br>    <span class="hljs-comment"># 初始化导入的pygame中的模块</span><br>    pygame.init()<br>    <span class="hljs-comment"># 初始化用于显示的窗口并设置窗口尺寸</span><br>    screen = pygame.display.set_mode((<span class="hljs-number">800</span>, <span class="hljs-number">600</span>))<br>    <span class="hljs-comment"># 设置当前窗口的标题</span><br>    pygame.display.set_caption(<span class="hljs-string">&#x27;大球吃小球&#x27;</span>)<br>    running = <span class="hljs-literal">True</span><br>    <span class="hljs-comment"># 开启一个事件循环处理发生的事件</span><br>    <span class="hljs-keyword">while</span> running:<br>        <span class="hljs-comment"># 从消息队列中获取事件并对事件进行处理</span><br>        <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>            <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>                running = <span class="hljs-literal">False</span><br>            <span class="hljs-comment"># 处理鼠标事件的代码</span><br>            <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.MOUSEBUTTONDOWN <span class="hljs-keyword">and</span> event.button == <span class="hljs-number">1</span>:<br>                <span class="hljs-comment"># 获得点击鼠标的位置</span><br>                x, y = event.pos<br>                radius = randint(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>)<br>                sx, sy = randint(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>), randint(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>)<br>                color = Color.random_color()<br>                <span class="hljs-comment"># 在点击鼠标的位置创建一个球(大小、速度和颜色随机)</span><br>                ball = Ball(x, y, radius, sx, sy, color)<br>                <span class="hljs-comment"># 将球添加到列表容器中</span><br>                balls.append(ball)<br>        screen.fill((<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>))<br>        <span class="hljs-comment"># 取出容器中的球 如果没被吃掉就绘制 被吃掉了就移除</span><br>        <span class="hljs-keyword">for</span> ball <span class="hljs-keyword">in</span> balls:<br>            <span class="hljs-keyword">if</span> ball.alive:<br>                ball.draw(screen)<br>            <span class="hljs-keyword">else</span>:<br>                balls.remove(ball)<br>        pygame.display.flip()<br>        <span class="hljs-comment"># 每隔50毫秒就改变球的位置再刷新窗口</span><br>        pygame.time.delay(<span class="hljs-number">50</span>)<br>        <span class="hljs-keyword">for</span> ball <span class="hljs-keyword">in</span> balls:<br>            ball.move(screen)<br>            <span class="hljs-comment"># 检查球有没有吃到其他的球</span><br>            <span class="hljs-keyword">for</span> other <span class="hljs-keyword">in</span> balls:<br>                ball.eat(other)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>上面的两段代码合在一起，我们就完成了“大球吃小球”的游戏（如下图所示），准确的说它算不上一个游戏，但是做一个小游戏的基本知识我们已经通过这个例子告诉大家了，有了这些知识已经可以开始你的小游戏开发之旅了。其实上面的代码中还有很多值得改进的地方，比如刷新窗口以及让球移动起来的代码并不应该放在事件循环中，等学习了多线程的知识后，用一个后台线程来处理这些事可能是更好的选择。如果希望获得更好的用户体验，我们还可以在游戏中加入背景音乐以及在球与球发生碰撞时播放音效，利用pygame的mixer和music模块，我们可以很容易的做到这一点，大家可以自行了解这方面的知识。事实上，想了解更多的关于pygame的知识，最好的教程是<a href="https://www.pygame.org/news">pygame的官方网站</a>，如果英语没毛病就可以赶紧去看看啦。 如果想开发<a href="https://zh.wikipedia.org/wiki/3D%E6%B8%B8%E6%88%8F">3D游戏</a>，pygame就显得力不从心了，对3D游戏开发如果有兴趣的读者不妨看看<a href="https://www.panda3d.org/">Panda3D</a>。</p>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【python学习】-面向对象进阶</title>
    <link href="/post/55191.html"/>
    <url>/post/55191.html</url>
    
    <content type="html"><![CDATA[<h1 id="【python学习】-面向对象进阶"><a href="#【python学习】-面向对象进阶" class="headerlink" title="【python学习】-面向对象进阶"></a>【python学习】-面向对象进阶</h1><h2 id="面向对象进阶"><a href="#面向对象进阶" class="headerlink" title="面向对象进阶"></a>面向对象进阶</h2><p>在前面的章节我们已经了解了面向对象的入门知识，知道了如何定义类，如何创建对象以及如何给对象发消息。为了能够更好的使用面向对象编程思想进行程序开发，我们还需要对Python中的面向对象编程进行更为深入的了解。</p><h3 id="property装饰器"><a href="#property装饰器" class="headerlink" title="@property装饰器"></a>@property装饰器</h3><p>之前我们讨论过Python中属性和方法访问权限的问题，虽然我们不建议将属性设置为私有的，但是如果直接将属性暴露给外界也是有问题的，比如我们没有办法检查赋给属性的值是否有效。我们之前的建议是将属性命名以单下划线开头，通过这种方式来暗示属性是受保护的，不建议外界直接访问，那么如果想访问属性可以通过属性的getter（访问器）和setter（修改器）方法进行对应的操作。如果要做到这点，就可以考虑使用@property包装器来包装getter和setter方法，使得对属性的访问既安全又方便，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age</span>):</span><br>        self._name = name<br>        self._age = age<br><br>    <span class="hljs-comment"># 访问器 - getter方法</span><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">name</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self._name<br><br>    <span class="hljs-comment"># 访问器 - getter方法</span><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">age</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self._age<br><br>    <span class="hljs-comment"># 修改器 - setter方法</span><br><span class="hljs-meta">    @age.setter</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">age</span>(<span class="hljs-params">self, age</span>):</span><br>        self._age = age<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">play</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">if</span> self._age &lt;= <span class="hljs-number">16</span>:<br>            print(<span class="hljs-string">&#x27;%s正在玩飞行棋.&#x27;</span> % self._name)<br>        <span class="hljs-keyword">else</span>:<br>            print(<span class="hljs-string">&#x27;%s正在玩斗地主.&#x27;</span> % self._name)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    person = Person(<span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-number">12</span>)<br>    person.play()<br>    person.age = <span class="hljs-number">22</span><br>    person.play()<br>    <span class="hljs-comment"># person.name = &#x27;白元芳&#x27;  # AttributeError: can&#x27;t set attribute</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="slots-魔法"><a href="#slots-魔法" class="headerlink" title="__slots__魔法"></a>__slots__魔法</h3><p>我们讲到这里，不知道大家是否已经意识到，Python是一门<a href="https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E8%AF%AD%E8%A8%80">动态语言</a>。通常，动态语言允许我们在程序运行时给对象绑定新的属性或方法，当然也可以对已经绑定的属性和方法进行解绑定。但是如果我们需要限定自定义类型的对象只能绑定某些属性，可以通过在类中定义__slots__变量来进行限定。需要注意的是__slots__的限定只对当前类的对象生效，对子类并不起任何作用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br><br>    <span class="hljs-comment"># 限定Person对象只能绑定_name, _age和_gender属性</span><br>    __slots__ = (<span class="hljs-string">&#x27;_name&#x27;</span>, <span class="hljs-string">&#x27;_age&#x27;</span>, <span class="hljs-string">&#x27;_gender&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age</span>):</span><br>        self._name = name<br>        self._age = age<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">name</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self._name<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">age</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self._age<br><br><span class="hljs-meta">    @age.setter</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">age</span>(<span class="hljs-params">self, age</span>):</span><br>        self._age = age<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">play</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">if</span> self._age &lt;= <span class="hljs-number">16</span>:<br>            print(<span class="hljs-string">&#x27;%s正在玩飞行棋.&#x27;</span> % self._name)<br>        <span class="hljs-keyword">else</span>:<br>            print(<span class="hljs-string">&#x27;%s正在玩斗地主.&#x27;</span> % self._name)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    person = Person(<span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-number">22</span>)<br>    person.play()<br>    person._gender = <span class="hljs-string">&#x27;男&#x27;</span><br>    <span class="hljs-comment"># AttributeError: &#x27;Person&#x27; object has no attribute &#x27;_is_gay&#x27;</span><br>    <span class="hljs-comment"># person._is_gay = True</span><br></code></pre></td></tr></table></figure><h3 id="静态方法和类方法"><a href="#静态方法和类方法" class="headerlink" title="静态方法和类方法"></a>静态方法和类方法</h3><p>之前，我们在类中定义的方法都是对象方法，也就是说这些方法都是发送给对象的消息。实际上，我们写在类中的方法并不需要都是对象方法，例如我们定义一个“三角形”类，通过传入三条边长来构造三角形，并提供计算周长和面积的方法，但是传入的三条边长未必能构造出三角形对象，因此我们可以先写一个方法来验证三条边长是否可以构成三角形，这个方法很显然就不是对象方法，因为在调用这个方法时三角形对象尚未创建出来（因为都不知道三条边能不能构成三角形），所以这个方法是属于三角形类而并不属于三角形对象的。我们可以使用静态方法来解决这类问题，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sqrt<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Triangle</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, a, b, c</span>):</span><br>        self._a = a<br>        self._b = b<br>        self._c = c<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_valid</span>(<span class="hljs-params">a, b, c</span>):</span><br>        <span class="hljs-keyword">return</span> a + b &gt; c <span class="hljs-keyword">and</span> b + c &gt; a <span class="hljs-keyword">and</span> a + c &gt; b<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">perimeter</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self._a + self._b + self._c<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">area</span>(<span class="hljs-params">self</span>):</span><br>        half = self.perimeter() / <span class="hljs-number">2</span><br>        <span class="hljs-keyword">return</span> sqrt(half * (half - self._a) *<br>                    (half - self._b) * (half - self._c))<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    a, b, c = <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span><br>    <span class="hljs-comment"># 静态方法和类方法都是通过给类发消息来调用的</span><br>    <span class="hljs-keyword">if</span> Triangle.is_valid(a, b, c):<br>        t = Triangle(a, b, c)<br>        print(t.perimeter())<br>        <span class="hljs-comment"># 也可以通过给类发消息来调用对象方法但是要传入接收消息的对象作为参数</span><br>        <span class="hljs-comment"># print(Triangle.perimeter(t))</span><br>        print(t.area())<br>        <span class="hljs-comment"># print(Triangle.area(t))</span><br>    <span class="hljs-keyword">else</span>:<br>        print(<span class="hljs-string">&#x27;无法构成三角形.&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>和静态方法比较类似，Python还可以在类中定义类方法，类方法的第一个参数约定名为cls，它代表的是当前类相关的信息的对象（类本身也是一个对象，有的地方也称之为类的元数据对象），通过这个参数我们可以获取和类相关的信息并且可以创建出类的对象，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time, localtime, sleep<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Clock</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;数字时钟&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, hour=<span class="hljs-number">0</span>, minute=<span class="hljs-number">0</span>, second=<span class="hljs-number">0</span></span>):</span><br>        self._hour = hour<br>        self._minute = minute<br>        self._second = second<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">now</span>(<span class="hljs-params">cls</span>):</span><br>        ctime = localtime(time())<br>        <span class="hljs-keyword">return</span> cls(ctime.tm_hour, ctime.tm_min, ctime.tm_sec)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;走字&quot;&quot;&quot;</span><br>        self._second += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> self._second == <span class="hljs-number">60</span>:<br>            self._second = <span class="hljs-number">0</span><br>            self._minute += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> self._minute == <span class="hljs-number">60</span>:<br>                self._minute = <span class="hljs-number">0</span><br>                self._hour += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> self._hour == <span class="hljs-number">24</span>:<br>                    self._hour = <span class="hljs-number">0</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;显示时间&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;%02d:%02d:%02d&#x27;</span> % \<br>               (self._hour, self._minute, self._second)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-comment"># 通过类方法创建对象并获取系统时间</span><br>    clock = Clock.now()<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        print(clock.show())<br>        sleep(<span class="hljs-number">1</span>)<br>        clock.run()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><p>简单的说，类和类之间的关系有三种：is-a、has-a和use-a关系。</p><ul><li>is-a关系也叫继承或泛化，比如学生和人的关系、手机和电子产品的关系都属于继承关系。</li><li>has-a关系通常称之为关联，比如部门和员工的关系，汽车和引擎的关系都属于关联关系；关联关系如果是整体和部分的关联，那么我们称之为聚合关系；如果整体进一步负责了部分的生命周期（整体和部分是不可分割的，同时同在也同时消亡），那么这种就是最强的关联关系，我们称之为合成关系。</li><li>use-a关系通常称之为依赖，比如司机有一个驾驶的行为（方法），其中（的参数）使用到了汽车，那么司机和汽车的关系就是依赖关系。</li></ul><p>我们可以使用一种叫做<a href="https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80">UML</a>（统一建模语言）的东西来进行面向对象建模，其中一项重要的工作就是把类和类之间的关系用标准化的图形符号描述出来。关于UML我们在这里不做详细的介绍，有兴趣的读者可以自行阅读<a href="https://e.jd.com/30392949.html">《UML面向对象设计基础》</a>一书。</p><p>利用类之间的这些关系，我们可以在已有类的基础上来完成某些操作，也可以在已有类的基础上创建新的类，这些都是实现代码复用的重要手段。复用现有的代码不仅可以减少开发的工作量，也有利于代码的管理和维护，这是我们在日常工作中都会使用到的技术手段。</p><h3 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h3><p>刚才我们提到了，可以在已有类的基础上创建新类，这其中的一种做法就是让一个类从另一个类那里将属性和方法直接继承下来，从而减少重复代码的编写。提供继承信息的我们称之为父类，也叫超类或基类；得到继承信息的我们称之为子类，也叫派生类或衍生类。子类除了继承父类提供的属性和方法，还可以定义自己特有的属性和方法，所以子类比父类拥有的更多的能力，在实际开发中，我们经常会用子类对象去替换掉一个父类对象，这是面向对象编程中一个常见的行为，对应的原则称之为<a href="https://zh.wikipedia.org/wiki/%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99">里氏替换原则</a>。下面我们先看一个继承的例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;人&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age</span>):</span><br>        self._name = name<br>        self._age = age<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">name</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self._name<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">age</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self._age<br><br><span class="hljs-meta">    @age.setter</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">age</span>(<span class="hljs-params">self, age</span>):</span><br>        self._age = age<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">play</span>(<span class="hljs-params">self</span>):</span><br>        print(<span class="hljs-string">&#x27;%s正在愉快的玩耍.&#x27;</span> % self._name)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">watch_av</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">if</span> self._age &gt;= <span class="hljs-number">18</span>:<br>            print(<span class="hljs-string">&#x27;%s正在观看爱情动作片.&#x27;</span> % self._name)<br>        <span class="hljs-keyword">else</span>:<br>            print(<span class="hljs-string">&#x27;%s只能观看《熊出没》.&#x27;</span> % self._name)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>(<span class="hljs-params">Person</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;学生&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age, grade</span>):</span><br>        <span class="hljs-built_in">super</span>().__init__(name, age)<br>        self._grade = grade<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">grade</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self._grade<br><br><span class="hljs-meta">    @grade.setter</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">grade</span>(<span class="hljs-params">self, grade</span>):</span><br>        self._grade = grade<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">study</span>(<span class="hljs-params">self, course</span>):</span><br>        print(<span class="hljs-string">&#x27;%s的%s正在学习%s.&#x27;</span> % (self._grade, self._name, course))<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span>(<span class="hljs-params">Person</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;老师&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age, title</span>):</span><br>        <span class="hljs-built_in">super</span>().__init__(name, age)<br>        self._title = title<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">title</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self._title<br><br><span class="hljs-meta">    @title.setter</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">title</span>(<span class="hljs-params">self, title</span>):</span><br>        self._title = title<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">teach</span>(<span class="hljs-params">self, course</span>):</span><br>        print(<span class="hljs-string">&#x27;%s%s正在讲%s.&#x27;</span> % (self._name, self._title, course))<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    stu = Student(<span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-number">15</span>, <span class="hljs-string">&#x27;初三&#x27;</span>)<br>    stu.study(<span class="hljs-string">&#x27;数学&#x27;</span>)<br>    stu.watch_av()<br>    t = Teacher(<span class="hljs-string">&#x27;骆昊&#x27;</span>, <span class="hljs-number">38</span>, <span class="hljs-string">&#x27;砖家&#x27;</span>)<br>    t.teach(<span class="hljs-string">&#x27;Python程序设计&#x27;</span>)<br>    t.watch_av()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>子类在继承了父类的方法后，可以对父类已有的方法给出新的实现版本，这个动作称之为方法重写（override）。通过方法重写我们可以让父类的同一个行为在子类中拥有不同的实现版本，当我们调用这个经过子类重写的方法时，不同的子类对象会表现出不同的行为，这个就是多态（poly-morphism）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> abc <span class="hljs-keyword">import</span> ABCMeta, abstractmethod<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pet</span>(<span class="hljs-params"><span class="hljs-built_in">object</span>, metaclass=ABCMeta</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;宠物&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, nickname</span>):</span><br>        self._nickname = nickname<br><br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_voice</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;发出声音&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span>(<span class="hljs-params">Pet</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;狗&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_voice</span>(<span class="hljs-params">self</span>):</span><br>        print(<span class="hljs-string">&#x27;%s: 汪汪汪...&#x27;</span> % self._nickname)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span>(<span class="hljs-params">Pet</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;猫&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_voice</span>(<span class="hljs-params">self</span>):</span><br>        print(<span class="hljs-string">&#x27;%s: 喵...喵...&#x27;</span> % self._nickname)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    pets = [Dog(<span class="hljs-string">&#x27;旺财&#x27;</span>), Cat(<span class="hljs-string">&#x27;凯蒂&#x27;</span>), Dog(<span class="hljs-string">&#x27;大黄&#x27;</span>)]<br>    <span class="hljs-keyword">for</span> pet <span class="hljs-keyword">in</span> pets:<br>        pet.make_voice()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>在上面的代码中，我们将<code>Pet</code>类处理成了一个抽象类，所谓抽象类就是不能够创建对象的类，这种类的存在就是专门为了让其他类去继承它。Python从语法层面并没有像Java或C#那样提供对抽象类的支持，但是我们可以通过<code>abc</code>模块的<code>ABCMeta</code>元类和<code>abstractmethod</code>包装器来达到抽象类的效果，如果一个类中存在抽象方法那么这个类就不能够实例化（创建对象）。上面的代码中，<code>Dog</code>和<code>Cat</code>两个子类分别对<code>Pet</code>类中的<code>make_voice</code>抽象方法进行了重写并给出了不同的实现版本，当我们在<code>main</code>函数中调用该方法时，这个方法就表现出了多态行为（同样的方法做了不同的事情）。</p><h3 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h3><h4 id="案例1：奥特曼打小怪兽。"><a href="#案例1：奥特曼打小怪兽。" class="headerlink" title="案例1：奥特曼打小怪兽。"></a>案例1：奥特曼打小怪兽。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> abc <span class="hljs-keyword">import</span> ABCMeta, abstractmethod<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint, randrange<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fighter</span>(<span class="hljs-params"><span class="hljs-built_in">object</span>, metaclass=ABCMeta</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;战斗者&quot;&quot;&quot;</span><br><br>    <span class="hljs-comment"># 通过__slots__魔法限定对象可以绑定的成员变量</span><br>    __slots__ = (<span class="hljs-string">&#x27;_name&#x27;</span>, <span class="hljs-string">&#x27;_hp&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, hp</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;初始化方法</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :param name: 名字</span><br><span class="hljs-string">        :param hp: 生命值</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self._name = name<br>        self._hp = hp<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">name</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self._name<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hp</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self._hp<br><br><span class="hljs-meta">    @hp.setter</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hp</span>(<span class="hljs-params">self, hp</span>):</span><br>        self._hp = hp <span class="hljs-keyword">if</span> hp &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">alive</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self._hp &gt; <span class="hljs-number">0</span><br><br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">attack</span>(<span class="hljs-params">self, other</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;攻击</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :param other: 被攻击的对象</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ultraman</span>(<span class="hljs-params">Fighter</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;奥特曼&quot;&quot;&quot;</span><br><br>    __slots__ = (<span class="hljs-string">&#x27;_name&#x27;</span>, <span class="hljs-string">&#x27;_hp&#x27;</span>, <span class="hljs-string">&#x27;_mp&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, hp, mp</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;初始化方法</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :param name: 名字</span><br><span class="hljs-string">        :param hp: 生命值</span><br><span class="hljs-string">        :param mp: 魔法值</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-built_in">super</span>().__init__(name, hp)<br>        self._mp = mp<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">attack</span>(<span class="hljs-params">self, other</span>):</span><br>        other.hp -= randint(<span class="hljs-number">15</span>, <span class="hljs-number">25</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">huge_attack</span>(<span class="hljs-params">self, other</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;究极必杀技(打掉对方至少50点或四分之三的血)</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :param other: 被攻击的对象</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :return: 使用成功返回True否则返回False</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> self._mp &gt;= <span class="hljs-number">50</span>:<br>            self._mp -= <span class="hljs-number">50</span><br>            injury = other.hp * <span class="hljs-number">3</span> // <span class="hljs-number">4</span><br>            injury = injury <span class="hljs-keyword">if</span> injury &gt;= <span class="hljs-number">50</span> <span class="hljs-keyword">else</span> <span class="hljs-number">50</span><br>            other.hp -= injury<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            self.attack(other)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">magic_attack</span>(<span class="hljs-params">self, others</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;魔法攻击</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :param others: 被攻击的群体</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :return: 使用魔法成功返回True否则返回False</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> self._mp &gt;= <span class="hljs-number">20</span>:<br>            self._mp -= <span class="hljs-number">20</span><br>            <span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> others:<br>                <span class="hljs-keyword">if</span> temp.alive:<br>                    temp.hp -= randint(<span class="hljs-number">10</span>, <span class="hljs-number">15</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">resume</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;恢复魔法值&quot;&quot;&quot;</span><br>        incr_point = randint(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)<br>        self._mp += incr_point<br>        <span class="hljs-keyword">return</span> incr_point<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;~~~%s奥特曼~~~\n&#x27;</span> % self._name + \<br>            <span class="hljs-string">&#x27;生命值: %d\n&#x27;</span> % self._hp + \<br>            <span class="hljs-string">&#x27;魔法值: %d\n&#x27;</span> % self._mp<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Monster</span>(<span class="hljs-params">Fighter</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;小怪兽&quot;&quot;&quot;</span><br><br>    __slots__ = (<span class="hljs-string">&#x27;_name&#x27;</span>, <span class="hljs-string">&#x27;_hp&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">attack</span>(<span class="hljs-params">self, other</span>):</span><br>        other.hp -= randint(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;~~~%s小怪兽~~~\n&#x27;</span> % self._name + \<br>            <span class="hljs-string">&#x27;生命值: %d\n&#x27;</span> % self._hp<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_any_alive</span>(<span class="hljs-params">monsters</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;判断有没有小怪兽是活着的&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> monster <span class="hljs-keyword">in</span> monsters:<br>        <span class="hljs-keyword">if</span> monster.alive &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">select_alive_one</span>(<span class="hljs-params">monsters</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;选中一只活着的小怪兽&quot;&quot;&quot;</span><br>    monsters_len = <span class="hljs-built_in">len</span>(monsters)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        index = randrange(monsters_len)<br>        monster = monsters[index]<br>        <span class="hljs-keyword">if</span> monster.alive &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> monster<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">display_info</span>(<span class="hljs-params">ultraman, monsters</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;显示奥特曼和小怪兽的信息&quot;&quot;&quot;</span><br>    print(ultraman)<br>    <span class="hljs-keyword">for</span> monster <span class="hljs-keyword">in</span> monsters:<br>        print(monster, end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    u = Ultraman(<span class="hljs-string">&#x27;骆昊&#x27;</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">120</span>)<br>    m1 = Monster(<span class="hljs-string">&#x27;狄仁杰&#x27;</span>, <span class="hljs-number">250</span>)<br>    m2 = Monster(<span class="hljs-string">&#x27;白元芳&#x27;</span>, <span class="hljs-number">500</span>)<br>    m3 = Monster(<span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-number">750</span>)<br>    ms = [m1, m2, m3]<br>    fight_round = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> u.alive <span class="hljs-keyword">and</span> is_any_alive(ms):<br>        print(<span class="hljs-string">&#x27;========第%02d回合========&#x27;</span> % fight_round)<br>        m = select_alive_one(ms)  <span class="hljs-comment"># 选中一只小怪兽</span><br>        skill = randint(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)   <span class="hljs-comment"># 通过随机数选择使用哪种技能</span><br>        <span class="hljs-keyword">if</span> skill &lt;= <span class="hljs-number">6</span>:  <span class="hljs-comment"># 60%的概率使用普通攻击</span><br>            print(<span class="hljs-string">&#x27;%s使用普通攻击打了%s.&#x27;</span> % (u.name, m.name))<br>            u.attack(m)<br>            print(<span class="hljs-string">&#x27;%s的魔法值恢复了%d点.&#x27;</span> % (u.name, u.resume()))<br>        <span class="hljs-keyword">elif</span> skill &lt;= <span class="hljs-number">9</span>:  <span class="hljs-comment"># 30%的概率使用魔法攻击(可能因魔法值不足而失败)</span><br>            <span class="hljs-keyword">if</span> u.magic_attack(ms):<br>                print(<span class="hljs-string">&#x27;%s使用了魔法攻击.&#x27;</span> % u.name)<br>            <span class="hljs-keyword">else</span>:<br>                print(<span class="hljs-string">&#x27;%s使用魔法失败.&#x27;</span> % u.name)<br>        <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 10%的概率使用究极必杀技(如果魔法值不足则使用普通攻击)</span><br>            <span class="hljs-keyword">if</span> u.huge_attack(m):<br>                print(<span class="hljs-string">&#x27;%s使用究极必杀技虐了%s.&#x27;</span> % (u.name, m.name))<br>            <span class="hljs-keyword">else</span>:<br>                print(<span class="hljs-string">&#x27;%s使用普通攻击打了%s.&#x27;</span> % (u.name, m.name))<br>                print(<span class="hljs-string">&#x27;%s的魔法值恢复了%d点.&#x27;</span> % (u.name, u.resume()))<br>        <span class="hljs-keyword">if</span> m.alive &gt; <span class="hljs-number">0</span>:  <span class="hljs-comment"># 如果选中的小怪兽没有死就回击奥特曼</span><br>            print(<span class="hljs-string">&#x27;%s回击了%s.&#x27;</span> % (m.name, u.name))<br>            m.attack(u)<br>        display_info(u, ms)  <span class="hljs-comment"># 每个回合结束后显示奥特曼和小怪兽的信息</span><br>        fight_round += <span class="hljs-number">1</span><br>    print(<span class="hljs-string">&#x27;\n========战斗结束!========\n&#x27;</span>)<br>    <span class="hljs-keyword">if</span> u.alive &gt; <span class="hljs-number">0</span>:<br>        print(<span class="hljs-string">&#x27;%s奥特曼胜利!&#x27;</span> % u.name)<br>    <span class="hljs-keyword">else</span>:<br>        print(<span class="hljs-string">&#x27;小怪兽胜利!&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h4 id="案例2：扑克游戏。"><a href="#案例2：扑克游戏。" class="headerlink" title="案例2：扑克游戏。"></a>案例2：扑克游戏。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> random<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Card</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;一张牌&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, suite, face</span>):</span><br>        self._suite = suite<br>        self._face = face<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">face</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self._face<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">suite</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self._suite<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">if</span> self._face == <span class="hljs-number">1</span>:<br>            face_str = <span class="hljs-string">&#x27;A&#x27;</span><br>        <span class="hljs-keyword">elif</span> self._face == <span class="hljs-number">11</span>:<br>            face_str = <span class="hljs-string">&#x27;J&#x27;</span><br>        <span class="hljs-keyword">elif</span> self._face == <span class="hljs-number">12</span>:<br>            face_str = <span class="hljs-string">&#x27;Q&#x27;</span><br>        <span class="hljs-keyword">elif</span> self._face == <span class="hljs-number">13</span>:<br>            face_str = <span class="hljs-string">&#x27;K&#x27;</span><br>        <span class="hljs-keyword">else</span>:<br>            face_str = <span class="hljs-built_in">str</span>(self._face)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;%s%s&#x27;</span> % (self._suite, face_str)<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.__str__()<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Poker</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;一副牌&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self._cards = [Card(suite, face) <br>                       <span class="hljs-keyword">for</span> suite <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;♠♥♣♦&#x27;</span><br>                       <span class="hljs-keyword">for</span> face <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">14</span>)]<br>        self._current = <span class="hljs-number">0</span><br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cards</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self._cards<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">shuffle</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;洗牌(随机乱序)&quot;&quot;&quot;</span><br>        self._current = <span class="hljs-number">0</span><br>        random.shuffle(self._cards)<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">next</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;发牌&quot;&quot;&quot;</span><br>        card = self._cards[self._current]<br>        self._current += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> card<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">has_next</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;还有没有牌&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> self._current &lt; <span class="hljs-built_in">len</span>(self._cards)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Player</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;玩家&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name</span>):</span><br>        self._name = name<br>        self._cards_on_hand = []<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">name</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self._name<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cards_on_hand</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self._cards_on_hand<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self, card</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;摸牌&quot;&quot;&quot;</span><br>        self._cards_on_hand.append(card)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">arrange</span>(<span class="hljs-params">self, card_key</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;玩家整理手上的牌&quot;&quot;&quot;</span><br>        self._cards_on_hand.sort(key=card_key)<br><br><br><span class="hljs-comment"># 排序规则-先根据花色再根据点数排序</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_key</span>(<span class="hljs-params">card</span>):</span><br>    <span class="hljs-keyword">return</span> (card.suite, card.face)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    p = Poker()<br>    p.shuffle()<br>    players = [Player(<span class="hljs-string">&#x27;东邪&#x27;</span>), Player(<span class="hljs-string">&#x27;西毒&#x27;</span>), Player(<span class="hljs-string">&#x27;南帝&#x27;</span>), Player(<span class="hljs-string">&#x27;北丐&#x27;</span>)]<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">13</span>):<br>        <span class="hljs-keyword">for</span> player <span class="hljs-keyword">in</span> players:<br>            player.get(p.<span class="hljs-built_in">next</span>)<br>    <span class="hljs-keyword">for</span> player <span class="hljs-keyword">in</span> players:<br>        print(player.name + <span class="hljs-string">&#x27;:&#x27;</span>, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>        player.arrange(get_key)<br>        print(player.cards_on_hand)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> 大家可以自己尝试在上面代码的基础上写一个简单的扑克游戏，例如21点(Black Jack)，游戏的规则可以自己在网上找一找。</p></blockquote><h4 id="案例3：工资结算系统。"><a href="#案例3：工资结算系统。" class="headerlink" title="案例3：工资结算系统。"></a>案例3：工资结算系统。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">某公司有三种类型的员工 分别是部门经理、程序员和销售员</span><br><span class="hljs-string">需要设计一个工资结算系统 根据提供的员工信息来计算月薪</span><br><span class="hljs-string">部门经理的月薪是每月固定15000元</span><br><span class="hljs-string">程序员的月薪按本月工作时间计算 每小时150元</span><br><span class="hljs-string">销售员的月薪是1200元的底薪加上销售额5%的提成</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> abc <span class="hljs-keyword">import</span> ABCMeta, abstractmethod<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span>(<span class="hljs-params"><span class="hljs-built_in">object</span>, metaclass=ABCMeta</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;员工&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        初始化方法</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :param name: 姓名</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self._name = name<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">name</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self._name<br><br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_salary</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        获得月薪</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :return: 月薪</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Manager</span>(<span class="hljs-params">Employee</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;部门经理&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_salary</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">15000.0</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Programmer</span>(<span class="hljs-params">Employee</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;程序员&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, working_hour=<span class="hljs-number">0</span></span>):</span><br>        <span class="hljs-built_in">super</span>().__init__(name)<br>        self._working_hour = working_hour<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">working_hour</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self._working_hour<br><br><span class="hljs-meta">    @working_hour.setter</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">working_hour</span>(<span class="hljs-params">self, working_hour</span>):</span><br>        self._working_hour = working_hour <span class="hljs-keyword">if</span> working_hour &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_salary</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">150.0</span> * self._working_hour<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Salesman</span>(<span class="hljs-params">Employee</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;销售员&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, sales=<span class="hljs-number">0</span></span>):</span><br>        <span class="hljs-built_in">super</span>().__init__(name)<br>        self._sales = sales<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sales</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self._sales<br><br><span class="hljs-meta">    @sales.setter</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sales</span>(<span class="hljs-params">self, sales</span>):</span><br>        self._sales = sales <span class="hljs-keyword">if</span> sales &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_salary</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1200.0</span> + self._sales * <span class="hljs-number">0.05</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    emps = [<br>        Manager(<span class="hljs-string">&#x27;刘备&#x27;</span>), Programmer(<span class="hljs-string">&#x27;诸葛亮&#x27;</span>),<br>        Manager(<span class="hljs-string">&#x27;曹操&#x27;</span>), Salesman(<span class="hljs-string">&#x27;荀彧&#x27;</span>),<br>        Salesman(<span class="hljs-string">&#x27;吕布&#x27;</span>), Programmer(<span class="hljs-string">&#x27;张辽&#x27;</span>),<br>        Programmer(<span class="hljs-string">&#x27;赵云&#x27;</span>)<br>    ]<br>    <span class="hljs-keyword">for</span> emp <span class="hljs-keyword">in</span> emps:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(emp, Programmer):<br>            emp.working_hour = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入%s本月工作时间: &#x27;</span> % emp.name))<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(emp, Salesman):<br>            emp.sales = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入%s本月销售额: &#x27;</span> % emp.name))<br>        <span class="hljs-comment"># 同样是接收get_salary这个消息但是不同的员工表现出了不同的行为(多态)</span><br>        print(<span class="hljs-string">&#x27;%s本月工资为: ￥%s元&#x27;</span> %<br>              (emp.name, emp.get_salary()))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>并行迭代多个序列的2种方法</title>
    <link href="/post/49992.html"/>
    <url>/post/49992.html</url>
    
    <content type="html"><![CDATA[<h1 id="并行迭代多个序列的2种方法"><a href="#并行迭代多个序列的2种方法" class="headerlink" title="并行迭代多个序列的2种方法"></a>并行迭代多个序列的2种方法</h1><p>s 和 t 是两个序列，现在并行迭代这个两个序列</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>只用while循环，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">s = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>t = [<span class="hljs-string">&#x27;hockel&#x27;</span>,<span class="hljs-string">&#x27;joan&#x27;</span>,<span class="hljs-string">&#x27;tony&#x27;</span>]<br>i = <span class="hljs-number">0</span><br>z = <span class="hljs-built_in">list</span>()<br><span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(s) <span class="hljs-keyword">and</span> i &lt; <span class="hljs-built_in">len</span>(t):<br>    x = s[i]<br>    y = t[i]<br>    z.append((x,y))<br>    i += <span class="hljs-number">1</span><br>    <br>print(z)<br></code></pre></td></tr></table></figure><p>输出结果如下：</p><p><code>[(1, &#39;hockel&#39;), (2, &#39;joan&#39;), (3, &#39;tony&#39;)]</code></p><h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">s = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>t = [<span class="hljs-string">&#x27;hockel&#x27;</span>,<span class="hljs-string">&#x27;joan&#x27;</span>,<span class="hljs-string">&#x27;tony&#x27;</span>]<br>z = []<br><span class="hljs-keyword">for</span> x,y <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(s,t):<br>    z.append((x,y))<br>    <br>print(z)<br></code></pre></td></tr></table></figure><p>输出结果如下：</p><p><code>[(1, &#39;hockel&#39;), (2, &#39;joan&#39;), (3, &#39;tony&#39;)]</code></p>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【python学习】-面向对象编程基础</title>
    <link href="/post/56878.html"/>
    <url>/post/56878.html</url>
    
    <content type="html"><![CDATA[<h1 id="【python学习】-面向对象编程基础"><a href="#【python学习】-面向对象编程基础" class="headerlink" title="【python学习】-面向对象编程基础"></a>【python学习】-面向对象编程基础</h1><h2 id="面向对象编程基础"><a href="#面向对象编程基础" class="headerlink" title="面向对象编程基础"></a>面向对象编程基础</h2><p>活在当下的程序员应该都听过&quot;面向对象编程&quot;一词，也经常有人问能不能用一句话解释下什么是&quot;面向对象编程&quot;，我们先来看看比较正式的说法。</p><p>&quot;把一组数据结构和处理它们的方法组成对象（object），把相同行为的对象归纳为类（class），通过类的封装（encapsulation）隐藏内部细节，通过继承（inheritance）实现类的特化（specialization）和泛化（generalization），通过多态（polymorphism）实现基于对象类型的动态分派。&quot;</p><p>之前我们说过&quot;<strong>程序是指令的集合</strong>&quot;，我们在程序中书写的语句在执行时会变成一条或多条指令然后由CPU去执行。当然为了简化程序的设计，我们引入了函数的概念，把相对独立且经常重复使用的代码放置到函数中，在需要使用这些功能的时候只要调用函数即可；如果一个函数的功能过于复杂和臃肿，我们又可以进一步将函数继续切分为子函数来降低系统的复杂性。但是说了这么多，不知道大家是否发现，所谓编程就是程序员按照计算机的工作方式控制计算机完成各种任务。但是，计算机的工作方式与正常人类的思维模式是不同的，如果编程就必须得抛弃人类正常的思维方式去迎合计算机，编程的乐趣就少了很多，&quot;每个人都应该学习编程&quot;这样的豪言壮语就只能说说而已。当然，这些还不是最重要的，最重要的是当我们需要开发一个复杂的系统时，代码的复杂性会让开发和维护工作都变得举步维艰，所以在上世纪60年代末期，&quot;<a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E5%8D%B1%E6%9C%BA">软件危机</a>&quot;、&quot;<a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B">软件工程</a>&quot;等一系列的概念开始在行业中出现。</p><p>当然，程序员圈子内的人都知道，现实中并没有解决上面所说的这些问题的&quot;<a href="https://zh.wikipedia.org/wiki/%E6%B2%A1%E6%9C%89%E9%93%B6%E5%BC%B9">银弹</a>&quot;，真正让软件开发者看到希望的是上世纪70年代诞生的<a href="https://zh.wikipedia.org/wiki/Smalltalk">Smalltalk</a>编程语言中引入的面向对象的编程思想（面向对象编程的雏形可以追溯到更早期的<a href="https://zh.wikipedia.org/wiki/Simula">Simula</a>语言）。按照这种编程理念，程序中的数据和操作数据的函数是一个逻辑上的整体，我们称之为“对象”，而我们解决问题的方式就是创建出需要的对象并向对象发出各种各样的消息，多个对象的协同工作最终可以让我们构造出复杂的系统来解决现实中的问题。</p><blockquote><p><strong>说明：</strong> 当然面向对象也不是解决软件开发中所有问题的最后的“银弹”，所以今天的高级程序设计语言几乎都提供了对多种编程范式的支持，Python也不例外。</p></blockquote><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><p>简单的说，类是对象的蓝图和模板，而对象是类的实例。这个解释虽然有点像用概念在解释概念，但是从这句话我们至少可以看出，类是抽象的概念，而对象是具体的东西。在面向对象编程的世界中，一切皆为对象，对象都有属性和行为，每个对象都是独一无二的，而且对象一定属于某个类（型）。当我们把一大堆拥有共同特征的对象的静态特征（属性）和动态特征（行为）都抽取出来后，就可以定义出一个叫做“类”的东西。</p><h3 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h3><p>在Python中可以使用<code>class</code>关键字定义类，然后在类中通过之前学习过的函数来定义方法，这样就可以将对象的动态特征描述出来，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br><br>    <span class="hljs-comment"># __init__是一个特殊方法用于在创建对象时进行初始化操作</span><br>    <span class="hljs-comment"># 通过这个方法我们可以为学生对象绑定name和age两个属性</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age</span>):</span><br>        self.name = name<br>        self.age = age<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">study</span>(<span class="hljs-params">self, course_name</span>):</span><br>        print(<span class="hljs-string">&#x27;%s正在学习%s.&#x27;</span> % (self.name, course_name))<br><br>    <span class="hljs-comment"># PEP 8要求标识符的名字用全小写多个单词用下划线连接</span><br>    <span class="hljs-comment"># 但是部分程序员和公司更倾向于使用驼峰命名法(驼峰标识)</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">watch_movie</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">if</span> self.age &lt; <span class="hljs-number">18</span>:<br>            print(<span class="hljs-string">&#x27;%s只能观看《熊出没》.&#x27;</span> % self.name)<br>        <span class="hljs-keyword">else</span>:<br>            print(<span class="hljs-string">&#x27;%s正在观看岛国爱情大电影.&#x27;</span> % self.name)<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> 写在类中的函数，我们通常称之为（对象的）方法，这些方法就是对象可以接收的消息。</p></blockquote><h3 id="创建和使用对象"><a href="#创建和使用对象" class="headerlink" title="创建和使用对象"></a>创建和使用对象</h3><p>当我们定义好一个类之后，可以通过下面的方式来创建对象并给对象发消息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-comment"># 创建学生对象并指定姓名和年龄</span><br>    stu1 = Student(<span class="hljs-string">&#x27;骆昊&#x27;</span>, <span class="hljs-number">38</span>)<br>    <span class="hljs-comment"># 给对象发study消息</span><br>    stu1.study(<span class="hljs-string">&#x27;Python程序设计&#x27;</span>)<br>    <span class="hljs-comment"># 给对象发watch_av消息</span><br>    stu1.watch_movie()<br>    stu2 = Student(<span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-number">15</span>)<br>    stu2.study(<span class="hljs-string">&#x27;思想品德&#x27;</span>)<br>    stu2.watch_movie()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="访问可见性问题"><a href="#访问可见性问题" class="headerlink" title="访问可见性问题"></a>访问可见性问题</h3><p>对于上面的代码，有C++、Java、C#等编程经验的程序员可能会问，我们给<code>Student</code>对象绑定的<code>name</code>和<code>age</code>属性到底具有怎样的访问权限（也称为可见性）。因为在很多面向对象编程语言中，我们通常会将对象的属性设置为私有的（private）或受保护的（protected），简单的说就是不允许外界访问，而对象的方法通常都是公开的（public），因为公开的方法就是对象能够接受的消息。在Python中，属性和方法的访问权限只有两种，也就是公开的和私有的，如果希望属性是私有的，在给属性命名时可以用两个下划线作为开头，下面的代码可以验证这一点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, foo</span>):</span><br>        self.__foo = foo<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__bar</span>(<span class="hljs-params">self</span>):</span><br>        print(self.__foo)<br>        print(<span class="hljs-string">&#x27;__bar&#x27;</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    test = Test(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>    <span class="hljs-comment"># AttributeError: &#x27;Test&#x27; object has no attribute &#x27;__bar&#x27;</span><br>    test.__bar()<br>    <span class="hljs-comment"># AttributeError: &#x27;Test&#x27; object has no attribute &#x27;__foo&#x27;</span><br>    print(test.__foo)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>但是，Python并没有从语法上严格保证私有属性或方法的私密性，它只是给私有的属性和方法换了一个名字来妨碍对它们的访问，事实上如果你知道更换名字的规则仍然可以访问到它们，下面的代码就可以验证这一点。之所以这样设定，可以用这样一句名言加以解释，就是&quot;<strong>We are all consenting adults here</strong>&quot;。因为绝大多数程序员都认为开放比封闭要好，而且程序员要自己为自己的行为负责。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, foo</span>):</span><br>        self.__foo = foo<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__bar</span>(<span class="hljs-params">self</span>):</span><br>        print(self.__foo)<br>        print(<span class="hljs-string">&#x27;__bar&#x27;</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    test = Test(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>    test._Test__bar()<br>    print(test._Test__foo)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>在实际开发中，我们并不建议将属性设置为私有的，因为这会导致子类无法访问（后面会讲到）。所以大多数Python程序员会遵循一种命名惯例就是让属性名以单下划线开头来表示属性是受保护的，本类之外的代码在访问这样的属性时应该要保持慎重。这种做法并不是语法上的规则，单下划线开头的属性和方法外界仍然是可以访问的，所以更多的时候它是一种暗示或隐喻，关于这一点可以看看我的<a href="http://blog.csdn.net/jackfrued/article/details/79521404">《Python - 那些年我们踩过的那些坑》</a>文章中的讲解。</p><h3 id="面向对象的支柱"><a href="#面向对象的支柱" class="headerlink" title="面向对象的支柱"></a>面向对象的支柱</h3><p>面向对象有三大支柱：封装、继承和多态。后面两个概念在下一个章节中进行详细的说明，这里我们先说一下什么是封装。我自己对封装的理解是&quot;隐藏一切可以隐藏的实现细节，只向外界暴露（提供）简单的编程接口&quot;。我们在类中定义的方法其实就是把数据和对数据的操作封装起来了，在我们创建了对象之后，只需要给对象发送一个消息（调用方法）就可以执行方法中的代码，也就是说我们只需要知道方法的名字和传入的参数（方法的外部视图），而不需要知道方法内部的实现细节（方法的内部视图）。</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="练习1：定义一个类描述数字时钟。"><a href="#练习1：定义一个类描述数字时钟。" class="headerlink" title="练习1：定义一个类描述数字时钟。"></a>练习1：定义一个类描述数字时钟。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Clock</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;数字时钟&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, hour=<span class="hljs-number">0</span>, minute=<span class="hljs-number">0</span>, second=<span class="hljs-number">0</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;初始化方法</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :param hour: 时</span><br><span class="hljs-string">        :param minute: 分</span><br><span class="hljs-string">        :param second: 秒</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self._hour = hour<br>        self._minute = minute<br>        self._second = second<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;走字&quot;&quot;&quot;</span><br>        self._second += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> self._second == <span class="hljs-number">60</span>:<br>            self._second = <span class="hljs-number">0</span><br>            self._minute += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> self._minute == <span class="hljs-number">60</span>:<br>                self._minute = <span class="hljs-number">0</span><br>                self._hour += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> self._hour == <span class="hljs-number">24</span>:<br>                    self._hour = <span class="hljs-number">0</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;显示时间&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;%02d:%02d:%02d&#x27;</span> % \<br>               (self._hour, self._minute, self._second)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    clock = Clock(<span class="hljs-number">23</span>, <span class="hljs-number">59</span>, <span class="hljs-number">58</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        print(clock.show())<br>        sleep(<span class="hljs-number">1</span>)<br>        clock.run()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h4 id="练习2：定义一个类描述平面上的点并提供移动点和计算到另一个点距离的方法。"><a href="#练习2：定义一个类描述平面上的点并提供移动点和计算到另一个点距离的方法。" class="headerlink" title="练习2：定义一个类描述平面上的点并提供移动点和计算到另一个点距离的方法。"></a>练习2：定义一个类描述平面上的点并提供移动点和计算到另一个点距离的方法。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sqrt<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, x=<span class="hljs-number">0</span>, y=<span class="hljs-number">0</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;初始化方法</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        :param x: 横坐标</span><br><span class="hljs-string">        :param y: 纵坐标</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.x = x<br>        self.y = y<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">move_to</span>(<span class="hljs-params">self, x, y</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;移动到指定位置</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        :param x: 新的横坐标</span><br><span class="hljs-string">        &quot;param y: 新的纵坐标</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.x = x<br>        self.y = y<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">move_by</span>(<span class="hljs-params">self, dx, dy</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;移动指定的增量</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        :param dx: 横坐标的增量</span><br><span class="hljs-string">        &quot;param dy: 纵坐标的增量</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.x += dx<br>        self.y += dy<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">distance_to</span>(<span class="hljs-params">self, other</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;计算与另一个点的距离</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        :param other: 另一个点</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        dx = self.x - other.x<br>        dy = self.y - other.y<br>        <span class="hljs-keyword">return</span> sqrt(dx ** <span class="hljs-number">2</span> + dy ** <span class="hljs-number">2</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;(%s, %s)&#x27;</span> % (<span class="hljs-built_in">str</span>(self.x), <span class="hljs-built_in">str</span>(self.y))<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    p1 = Point(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br>    p2 = Point()<br>    print(p1)<br>    print(p2)<br>    p2.move_by(-<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>    print(p2)<br>    print(p1.distance_to(p2))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【python学习】-字符串和常用数据结构</title>
    <link href="/post/30712.html"/>
    <url>/post/30712.html</url>
    
    <content type="html"><![CDATA[<h1 id="【python学习】-字符串和常用数据结构"><a href="#【python学习】-字符串和常用数据结构" class="headerlink" title="【python学习】-字符串和常用数据结构"></a>【python学习】-字符串和常用数据结构</h1><h2 id="字符串和常用数据结构"><a href="#字符串和常用数据结构" class="headerlink" title="字符串和常用数据结构"></a>字符串和常用数据结构</h2><h3 id="使用字符串"><a href="#使用字符串" class="headerlink" title="使用字符串"></a>使用字符串</h3><p>第二次世界大战促使了现代电子计算机的诞生，最初计算机被应用于导弹弹道的计算，而在计算机诞生后的很多年时间里，计算机处理的信息基本上都是数值型的信息。世界上的第一台电子计算机叫ENIAC（电子数值积分计算机），诞生于美国的宾夕法尼亚大学，每秒钟能够完成约5000次浮点运算。随着时间的推移，虽然数值运算仍然是计算机日常工作中最为重要的事情之一，但是今天的计算机处理得更多的数据可能都是以文本的方式存在的，如果我们希望通过Python程序操作本这些文本信息，就必须要先了解字符串类型以及与它相关的知识。</p><p>所谓<strong>字符串</strong>，就是由零个或多个字符组成的有限序列，一般记为<img src="./res/formula_5.png" alt="$${\displaystyle s=a_{1}a_{2}\dots a_{n}(G:/Python-100-Days-master/Day01-15/res/formula_5.png)}$$">。在Python程序中，如果我们把单个或多个字符用单引号或者双引号包围起来，就可以表示一个字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python">s1 = <span class="hljs-string">&#x27;hello, world!&#x27;</span><br>s2 = <span class="hljs-string">&quot;hello, world!&quot;</span><br><span class="hljs-comment"># 以三个双引号或单引号开头的字符串可以折行</span><br>s3 = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">hello, </span><br><span class="hljs-string">world!</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>print(s1, s2, s3, end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>可以在字符串中使用<code>\</code>（反斜杠）来表示转义，也就是说<code>\</code>后面的字符不再是它原来的意义，例如：<code>\n</code>不是代表反斜杠和字符n，而是表示换行；而<code>\t</code>也不是代表反斜杠和字符t，而是表示制表符。所以如果想在字符串中表示<code>&#39;</code>要写成<code>\&#39;</code>，同理想表示<code>\</code>要写成<code>\\</code>。可以运行下面的代码看看会输出什么。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python">s1 = <span class="hljs-string">&#x27;\&#x27;hello, world!\&#x27;&#x27;</span><br>s2 = <span class="hljs-string">&#x27;\n\\hello, world!\\\n&#x27;</span><br>print(s1, s2, end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>在<code>\</code>后面还可以跟一个八进制或者十六进制数来表示字符，例如<code>\141</code>和<code>\x61</code>都代表小写字母<code>a</code>，前者是八进制的表示法，后者是十六进制的表示法。也可以在<code>\</code>后面跟Unicode字符编码来表示字符，例如<code>\u9a86\u660a</code>代表的是中文“骆昊”。运行下面的代码，看看输出了什么。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python">s1 = <span class="hljs-string">&#x27;\141\142\143\x61\x62\x63&#x27;</span><br>s2 = <span class="hljs-string">&#x27;\u9a86\u660a&#x27;</span><br>print(s1, s2)<br></code></pre></td></tr></table></figure><p>如果不希望字符串中的<code>\</code>表示转义，我们可以通过在字符串的最前面加上字母<code>r</code>来加以说明，再看看下面的代码又会输出什么。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python">s1 = <span class="hljs-string">r&#x27;\&#x27;hello, world!\&#x27;&#x27;</span><br>s2 = <span class="hljs-string">r&#x27;\n\\hello, world!\\\n&#x27;</span><br>print(s1, s2, end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>Python为字符串类型提供了非常丰富的运算符，我们可以使用<code>+</code>运算符来实现字符串的拼接，可以使用<code>*</code>运算符来重复一个字符串的内容，可以使用<code>in</code>和<code>not in</code>来判断一个字符串是否包含另外一个字符串（成员运算），我们也可以用<code>[]</code>和<code>[:]</code>运算符从字符串取出某个字符或某些字符（切片运算），代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python">s1 = <span class="hljs-string">&#x27;hello &#x27;</span> * <span class="hljs-number">3</span><br>print(s1) <span class="hljs-comment"># hello hello hello </span><br>s2 = <span class="hljs-string">&#x27;world&#x27;</span><br>s1 += s2<br>print(s1) <span class="hljs-comment"># hello hello hello world</span><br>print(<span class="hljs-string">&#x27;ll&#x27;</span> <span class="hljs-keyword">in</span> s1) <span class="hljs-comment"># True</span><br>print(<span class="hljs-string">&#x27;good&#x27;</span> <span class="hljs-keyword">in</span> s1) <span class="hljs-comment"># False</span><br>str2 = <span class="hljs-string">&#x27;abc123456&#x27;</span><br><span class="hljs-comment"># 从字符串中取出指定位置的字符(下标运算)</span><br>print(str2[<span class="hljs-number">2</span>]) <span class="hljs-comment"># c</span><br><span class="hljs-comment"># 字符串切片(从指定的开始索引到指定的结束索引)</span><br>print(str2[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>]) <span class="hljs-comment"># c12</span><br>print(str2[<span class="hljs-number">2</span>:]) <span class="hljs-comment"># c123456</span><br>print(str2[<span class="hljs-number">2</span>::<span class="hljs-number">2</span>]) <span class="hljs-comment"># c246</span><br>print(str2[::<span class="hljs-number">2</span>]) <span class="hljs-comment"># ac246</span><br>print(str2[::-<span class="hljs-number">1</span>]) <span class="hljs-comment"># 654321cba</span><br>print(str2[-<span class="hljs-number">3</span>:-<span class="hljs-number">1</span>]) <span class="hljs-comment"># 45</span><br></code></pre></td></tr></table></figure><p>在Python中，我们还可以通过一系列的方法来完成对字符串的处理，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Python">str1 = <span class="hljs-string">&#x27;hello, world!&#x27;</span><br><span class="hljs-comment"># 通过内置函数len计算字符串的长度</span><br>print(<span class="hljs-built_in">len</span>(str1)) <span class="hljs-comment"># 13</span><br><span class="hljs-comment"># 获得字符串首字母大写的拷贝</span><br>print(str1.capitalize()) <span class="hljs-comment"># Hello, world!</span><br><span class="hljs-comment"># 获得字符串每个单词首字母大写的拷贝</span><br>print(str1.title()) <span class="hljs-comment"># Hello, World!</span><br><span class="hljs-comment"># 获得字符串变大写后的拷贝</span><br>print(str1.upper()) <span class="hljs-comment"># HELLO, WORLD!</span><br><span class="hljs-comment"># 从字符串中查找子串所在位置</span><br>print(str1.find(<span class="hljs-string">&#x27;or&#x27;</span>)) <span class="hljs-comment"># 8</span><br>print(str1.find(<span class="hljs-string">&#x27;shit&#x27;</span>)) <span class="hljs-comment"># -1</span><br><span class="hljs-comment"># 与find类似但找不到子串时会引发异常</span><br><span class="hljs-comment"># print(str1.index(&#x27;or&#x27;))</span><br><span class="hljs-comment"># print(str1.index(&#x27;shit&#x27;))</span><br><span class="hljs-comment"># 检查字符串是否以指定的字符串开头</span><br>print(str1.startswith(<span class="hljs-string">&#x27;He&#x27;</span>)) <span class="hljs-comment"># False</span><br>print(str1.startswith(<span class="hljs-string">&#x27;hel&#x27;</span>)) <span class="hljs-comment"># True</span><br><span class="hljs-comment"># 检查字符串是否以指定的字符串结尾</span><br>print(str1.endswith(<span class="hljs-string">&#x27;!&#x27;</span>)) <span class="hljs-comment"># True</span><br><span class="hljs-comment"># 将字符串以指定的宽度居中并在两侧填充指定的字符</span><br>print(str1.center(<span class="hljs-number">50</span>, <span class="hljs-string">&#x27;*&#x27;</span>))<br><span class="hljs-comment"># 将字符串以指定的宽度靠右放置左侧填充指定的字符</span><br>print(str1.rjust(<span class="hljs-number">50</span>, <span class="hljs-string">&#x27; &#x27;</span>))<br>str2 = <span class="hljs-string">&#x27;abc123456&#x27;</span><br><span class="hljs-comment"># 检查字符串是否由数字构成</span><br>print(str2.isdigit())  <span class="hljs-comment"># False</span><br><span class="hljs-comment"># 检查字符串是否以字母构成</span><br>print(str2.isalpha())  <span class="hljs-comment"># False</span><br><span class="hljs-comment"># 检查字符串是否以数字和字母构成</span><br>print(str2.isalnum())  <span class="hljs-comment"># True</span><br>str3 = <span class="hljs-string">&#x27;  jackfrued@126.com &#x27;</span><br>print(str3)<br><span class="hljs-comment"># 获得字符串修剪左右两侧空格之后的拷贝</span><br>print(str3.strip())<br></code></pre></td></tr></table></figure><p>我们之前讲过，可以用下面的方式来格式化输出字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python">a, b = <span class="hljs-number">5</span>, <span class="hljs-number">10</span><br>print(<span class="hljs-string">&#x27;%d * %d = %d&#x27;</span> % (a, b, a * b))<br></code></pre></td></tr></table></figure><p>当然，我们也可以用字符串提供的方法来完成字符串的格式，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python">a, b = <span class="hljs-number">5</span>, <span class="hljs-number">10</span><br>print(<span class="hljs-string">&#x27;&#123;0&#125; * &#123;1&#125; = &#123;2&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(a, b, a * b))<br></code></pre></td></tr></table></figure><p>Python 3.6以后，格式化字符串还有更为简洁的书写方式，就是在字符串前加上字母<code>f</code>，我们可以使用下面的语法糖来简化上面的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python">a, b = <span class="hljs-number">5</span>, <span class="hljs-number">10</span><br>print(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;a&#125;</span> * <span class="hljs-subst">&#123;b&#125;</span> = <span class="hljs-subst">&#123;a * b&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>除了字符串，Python还内置了多种类型的数据结构，如果要在程序中保存和操作数据，绝大多数时候可以利用现有的数据结构来实现，最常用的包括列表、元组、集合和字典。</p><h3 id="使用列表"><a href="#使用列表" class="headerlink" title="使用列表"></a>使用列表</h3><p>不知道大家是否注意到，刚才我们讲到的字符串类型（<code>str</code>）和之前我们讲到的数值类型（<code>int</code>和<code>float</code>）有一些区别。数值类型是标量类型，也就是说这种类型的对象没有可以访问的内部结构；而字符串类型是一种结构化的、非标量类型，所以才会有一系列的属性和方法。接下来我们要介绍的列表（<code>list</code>），也是一种结构化的、非标量类型，它是值的有序序列，每个值都可以通过索引进行标识，定义列表可以将列表的元素放在<code>[]</code>中，多个元素用<code>,</code>进行分隔，可以使用<code>for</code>循环对列表元素进行遍历，也可以使用<code>[]</code>或<code>[:]</code>运算符取出列表中的一个或多个元素。</p><p>下面的代码演示了如何定义列表、如何遍历列表以及列表的下标运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Python">list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">100</span>]<br>print(list1) <span class="hljs-comment"># [1, 3, 5, 7, 100]</span><br><span class="hljs-comment"># 乘号表示列表元素的重复</span><br>list2 = [<span class="hljs-string">&#x27;hello&#x27;</span>] * <span class="hljs-number">3</span><br>print(list2) <span class="hljs-comment"># [&#x27;hello&#x27;, &#x27;hello&#x27;, &#x27;hello&#x27;]</span><br><span class="hljs-comment"># 计算列表长度(元素个数)</span><br>print(<span class="hljs-built_in">len</span>(list1)) <span class="hljs-comment"># 5</span><br><span class="hljs-comment"># 下标(索引)运算</span><br>print(list1[<span class="hljs-number">0</span>]) <span class="hljs-comment"># 1</span><br>print(list1[<span class="hljs-number">4</span>]) <span class="hljs-comment"># 100</span><br><span class="hljs-comment"># print(list1[5])  # IndexError: list index out of range</span><br>print(list1[-<span class="hljs-number">1</span>]) <span class="hljs-comment"># 100</span><br>print(list1[-<span class="hljs-number">3</span>]) <span class="hljs-comment"># 5</span><br>list1[<span class="hljs-number">2</span>] = <span class="hljs-number">300</span><br>print(list1) <span class="hljs-comment"># [1, 3, 300, 7, 100]</span><br><span class="hljs-comment"># 通过循环用下标遍历列表元素</span><br><span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(list1)):<br>    print(list1[index])<br><span class="hljs-comment"># 通过for循环遍历列表元素</span><br><span class="hljs-keyword">for</span> elem <span class="hljs-keyword">in</span> list1:<br>    print(elem)<br><span class="hljs-comment"># 通过enumerate函数处理列表之后再遍历可以同时获得元素索引和值</span><br><span class="hljs-keyword">for</span> index, elem <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(list1):<br>    print(index, elem)<br></code></pre></td></tr></table></figure><p>下面的代码演示了如何向列表中添加元素以及如何从列表中移除元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python">list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">100</span>]<br><span class="hljs-comment"># 添加元素</span><br>list1.append(<span class="hljs-number">200</span>)<br>list1.insert(<span class="hljs-number">1</span>, <span class="hljs-number">400</span>)<br><span class="hljs-comment"># 合并两个列表</span><br><span class="hljs-comment"># list1.extend([1000, 2000])</span><br>list1 += [<span class="hljs-number">1000</span>, <span class="hljs-number">2000</span>]<br>print(list1) <span class="hljs-comment"># [1, 400, 3, 5, 7, 100, 200, 1000, 2000]</span><br>print(<span class="hljs-built_in">len</span>(list1)) <span class="hljs-comment"># 9</span><br><span class="hljs-comment"># 先通过成员运算判断元素是否在列表中，如果存在就删除该元素</span><br><span class="hljs-keyword">if</span> <span class="hljs-number">3</span> <span class="hljs-keyword">in</span> list1:<br>list1.remove(<span class="hljs-number">3</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-number">1234</span> <span class="hljs-keyword">in</span> list1:<br>    list1.remove(<span class="hljs-number">1234</span>)<br>print(list1) <span class="hljs-comment"># [1, 400, 5, 7, 100, 200, 1000, 2000]</span><br><span class="hljs-comment"># 从指定的位置删除元素</span><br>list1.pop(<span class="hljs-number">0</span>)<br>list1.pop(<span class="hljs-built_in">len</span>(list1) - <span class="hljs-number">1</span>)<br>print(list1) <span class="hljs-comment"># [400, 5, 7, 100, 200, 1000]</span><br><span class="hljs-comment"># 清空列表元素</span><br>list1.clear()<br>print(list1) <span class="hljs-comment"># []</span><br></code></pre></td></tr></table></figure><p>和字符串一样，列表也可以做切片操作，通过切片操作我们可以实现对列表的复制或者将列表中的一部分取出来创建出新的列表，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python">fruits = [<span class="hljs-string">&#x27;grape&#x27;</span>, <span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;strawberry&#x27;</span>, <span class="hljs-string">&#x27;waxberry&#x27;</span>]<br>fruits += [<span class="hljs-string">&#x27;pitaya&#x27;</span>, <span class="hljs-string">&#x27;pear&#x27;</span>, <span class="hljs-string">&#x27;mango&#x27;</span>]<br><span class="hljs-comment"># 列表切片</span><br>fruits2 = fruits[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>]<br>print(fruits2) <span class="hljs-comment"># apple strawberry waxberry</span><br><span class="hljs-comment"># 可以通过完整切片操作来复制列表</span><br>fruits3 = fruits[:]<br>print(fruits3) <span class="hljs-comment"># [&#x27;grape&#x27;, &#x27;apple&#x27;, &#x27;strawberry&#x27;, &#x27;waxberry&#x27;, &#x27;pitaya&#x27;, &#x27;pear&#x27;, &#x27;mango&#x27;]</span><br>fruits4 = fruits[-<span class="hljs-number">3</span>:-<span class="hljs-number">1</span>]<br>print(fruits4) <span class="hljs-comment"># [&#x27;pitaya&#x27;, &#x27;pear&#x27;]</span><br><span class="hljs-comment"># 可以通过反向切片操作来获得倒转后的列表的拷贝</span><br>fruits5 = fruits[::-<span class="hljs-number">1</span>]<br>print(fruits5) <span class="hljs-comment"># [&#x27;mango&#x27;, &#x27;pear&#x27;, &#x27;pitaya&#x27;, &#x27;waxberry&#x27;, &#x27;strawberry&#x27;, &#x27;apple&#x27;, &#x27;grape&#x27;]</span><br></code></pre></td></tr></table></figure><p>下面的代码实现了对列表的排序操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python">list1 = [<span class="hljs-string">&#x27;orange&#x27;</span>, <span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;zoo&#x27;</span>, <span class="hljs-string">&#x27;internationalization&#x27;</span>, <span class="hljs-string">&#x27;blueberry&#x27;</span>]<br>list2 = <span class="hljs-built_in">sorted</span>(list1)<br><span class="hljs-comment"># sorted函数返回列表排序后的拷贝不会修改传入的列表</span><br><span class="hljs-comment"># 函数的设计就应该像sorted函数一样尽可能不产生副作用</span><br>list3 = <span class="hljs-built_in">sorted</span>(list1, reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># 通过key关键字参数指定根据字符串长度进行排序而不是默认的字母表顺序</span><br>list4 = <span class="hljs-built_in">sorted</span>(list1, key=<span class="hljs-built_in">len</span>)<br>print(list1)<br>print(list2)<br>print(list3)<br>print(list4)<br><span class="hljs-comment"># 给列表对象发出排序消息直接在列表对象上进行排序</span><br>list1.sort(reverse=<span class="hljs-literal">True</span>)<br>print(list1)<br></code></pre></td></tr></table></figure><h3 id="生成式和生成器"><a href="#生成式和生成器" class="headerlink" title="生成式和生成器"></a>生成式和生成器</h3><p>我们还可以使用列表的生成式语法来创建列表，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python">f = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)]<br>print(f)<br>f = [x + y <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;ABCDE&#x27;</span> <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;1234567&#x27;</span>]<br>print(f)<br><span class="hljs-comment"># 用列表的生成表达式语法创建列表容器</span><br><span class="hljs-comment"># 用这种语法创建列表之后元素已经准备就绪所以需要耗费较多的内存空间</span><br>f = [x ** <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1000</span>)]<br>print(sys.getsizeof(f))  <span class="hljs-comment"># 查看对象占用内存的字节数</span><br>print(f)<br><span class="hljs-comment"># 请注意下面的代码创建的不是一个列表而是一个生成器对象</span><br><span class="hljs-comment"># 通过生成器可以获取到数据但它不占用额外的空间存储数据</span><br><span class="hljs-comment"># 每次需要数据的时候就通过内部的运算得到数据(需要花费额外的时间)</span><br>f = (x ** <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1000</span>))<br>print(sys.getsizeof(f))  <span class="hljs-comment"># 相比生成式生成器不占用存储数据的空间</span><br>print(f)<br><span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> f:<br>    print(val)<br></code></pre></td></tr></table></figure><p>除了上面提到的生成器语法，Python中还有另外一种定义生成器的方式，就是通过<code>yield</code>关键字将一个普通函数改造成生成器函数。下面的代码演示了如何实现一个生成<a href="https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97">斐波拉切数列</a>的生成器。所谓斐波拉切数列可以通过下面<a href="https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92">递归</a>的方法来进行定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fib</span>(<span class="hljs-params">n</span>):</span><br>    a, b = <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        a, b = b, a + b<br>        <span class="hljs-keyword">yield</span> a<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> fib(<span class="hljs-number">20</span>):<br>        print(val)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="使用元组"><a href="#使用元组" class="headerlink" title="使用元组"></a>使用元组</h3><p>Python中的元组与列表类似也是一种容器数据类型，可以用一个变量（对象）来存储多个数据，不同之处在于元组的元素不能修改，在前面的代码中我们已经不止一次使用过元组了。顾名思义，我们把多个元素组合到一起就形成了一个元组，所以它和列表一样可以保存多条数据。下面的代码演示了如何定义和使用元组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 定义元组</span><br>t = (<span class="hljs-string">&#x27;hockel&#x27;</span>, <span class="hljs-number">38</span>, <span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;安徽淮南&#x27;</span>)<br>print(t)<br><span class="hljs-comment"># 获取元组中的元素</span><br>print(t[<span class="hljs-number">0</span>])<br>print(t[<span class="hljs-number">3</span>])<br><span class="hljs-comment"># 遍历元组中的值</span><br><span class="hljs-keyword">for</span> member <span class="hljs-keyword">in</span> t:<br>    print(member)<br><span class="hljs-comment"># 重新给元组赋值</span><br><span class="hljs-comment"># t[0] = &#x27;王大锤&#x27;  # TypeError</span><br><span class="hljs-comment"># 变量t重新引用了新的元组原来的元组将被垃圾回收</span><br>t = (<span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;云南昆明&#x27;</span>)<br>print(t)<br><span class="hljs-comment"># 将元组转换成列表</span><br>person = <span class="hljs-built_in">list</span>(t)<br>print(person)<br><span class="hljs-comment"># 列表是可以修改它的元素的</span><br>person[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;李小龙&#x27;</span><br>person[<span class="hljs-number">1</span>] = <span class="hljs-number">25</span><br>print(person)<br><span class="hljs-comment"># 将列表转换成元组</span><br>fruits_list = [<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>]<br>fruits_tuple = <span class="hljs-built_in">tuple</span>(fruits_list)<br>print(fruits_tuple)<br></code></pre></td></tr></table></figure><p>这里有一个非常值得探讨的问题，我们已经有了列表这种数据结构，为什么还需要元组这样的类型呢？</p><ol><li>元组中的元素是无法修改的，事实上我们在项目中尤其是<a href="https://zh.wikipedia.org/zh-hans/%E5%A4%9A%E7%BA%BF%E7%A8%8B">多线程</a>环境（后面会讲到）中可能更喜欢使用的是那些不变对象（一方面因为对象状态不能修改，所以可以避免由此引起的不必要的程序错误，简单的说就是一个不变的对象要比可变的对象更加容易维护；另一方面因为没有任何一个线程能够修改不变对象的内部状态，一个不变对象自动就是线程安全的，这样就可以省掉处理同步化的开销。一个不变对象可以方便的被共享访问）。所以结论就是：如果不需要对元素进行添加、删除、修改的时候，可以考虑使用元组，当然如果一个方法要返回多个值，使用元组也是不错的选择。</li><li>元组在创建时间和占用的空间上面都优于列表。我们可以使用sys模块的getsizeof函数来检查存储同样的元素的元组和列表各自占用了多少内存空间，这个很容易做到。我们也可以在ipython中使用魔法指令%timeit来分析创建同样内容的元组和列表所花费的时间</li></ol><h3 id="使用集合"><a href="#使用集合" class="headerlink" title="使用集合"></a>使用集合</h3><p>Python中的集合跟数学上的集合是一致的，不允许有重复元素，而且可以进行交集、并集、差集等运算</p><p>可以按照下面代码所示的方式来创建和使用集合。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 创建集合的字面量语法</span><br>set1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>&#125;<br>print(set1)<br>print(<span class="hljs-string">&#x27;Length =&#x27;</span>, <span class="hljs-built_in">len</span>(set1))<br><span class="hljs-comment"># 创建集合的构造器语法(面向对象部分会进行详细讲解)</span><br>set2 = <span class="hljs-built_in">set</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>))<br>set3 = <span class="hljs-built_in">set</span>((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>))<br>print(set2, set3)<br><span class="hljs-comment"># 创建集合的推导式语法(推导式也可以用于推导集合)</span><br>set4 = &#123;num <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>) <span class="hljs-keyword">if</span> num % <span class="hljs-number">3</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> num % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>&#125;<br>print(set4)<br></code></pre></td></tr></table></figure><p>向集合添加元素和从集合删除元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python">set1.add(<span class="hljs-number">4</span>)<br>set1.add(<span class="hljs-number">5</span>)<br>set2.update([<span class="hljs-number">11</span>, <span class="hljs-number">12</span>])<br>set2.discard(<span class="hljs-number">5</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-number">4</span> <span class="hljs-keyword">in</span> set2:<br>    set2.remove(<span class="hljs-number">4</span>)<br>print(set1, set2)<br>print(set3.pop())<br>print(set3)<br></code></pre></td></tr></table></figure><p>集合的成员、交集、并集、差集等运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 集合的交集、并集、差集、对称差运算</span><br>print(set1 &amp; set2)<br><span class="hljs-comment"># print(set1.intersection(set2))</span><br>print(set1 | set2)<br><span class="hljs-comment"># print(set1.union(set2))</span><br>print(set1 - set2)<br><span class="hljs-comment"># print(set1.difference(set2))</span><br>print(set1 ^ set2)<br><span class="hljs-comment"># print(set1.symmetric_difference(set2))</span><br><span class="hljs-comment"># 判断子集和超集</span><br>print(set2 &lt;= set1)<br><span class="hljs-comment"># print(set2.issubset(set1))</span><br>print(set3 &lt;= set1)<br><span class="hljs-comment"># print(set3.issubset(set1))</span><br>print(set1 &gt;= set2)<br><span class="hljs-comment"># print(set1.issuperset(set2))</span><br>print(set1 &gt;= set3)<br><span class="hljs-comment"># print(set1.issuperset(set3))</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> Python中允许通过一些特殊的方法来为某种类型或数据结构自定义运算符（后面的章节中会讲到），上面的代码中我们对集合进行运算的时候可以调用集合对象的方法，也可以直接使用对应的运算符，例如<code>&amp;</code>运算符跟intersection方法的作用就是一样的，但是使用运算符让代码更加直观。</p></blockquote><h3 id="使用字典"><a href="#使用字典" class="headerlink" title="使用字典"></a>使用字典</h3><p>字典是另一种可变容器模型，Python中的字典跟我们生活中使用的字典是一样一样的，它可以存储任意类型对象，与列表、集合不同的是，字典的每个元素都是由一个键和一个值组成的“键值对”，键和值通过冒号分开。下面的代码演示了如何定义和使用字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 创建字典的字面量语法</span><br>scores = &#123;<span class="hljs-string">&#x27;骆昊&#x27;</span>: <span class="hljs-number">95</span>, <span class="hljs-string">&#x27;白元芳&#x27;</span>: <span class="hljs-number">78</span>, <span class="hljs-string">&#x27;狄仁杰&#x27;</span>: <span class="hljs-number">82</span>&#125;<br>print(scores)<br><span class="hljs-comment"># 创建字典的构造器语法</span><br>items1 = <span class="hljs-built_in">dict</span>(one=<span class="hljs-number">1</span>, two=<span class="hljs-number">2</span>, three=<span class="hljs-number">3</span>, four=<span class="hljs-number">4</span>)<br><span class="hljs-comment"># 通过zip函数将两个序列压成字典</span><br>items2 = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">zip</span>([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>], <span class="hljs-string">&#x27;123&#x27;</span>))<br><span class="hljs-comment"># 创建字典的推导式语法</span><br>items3 = &#123;num: num ** <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)&#125;<br>print(items1, items2, items3)<br><span class="hljs-comment"># 通过键可以获取字典中对应的值</span><br>print(scores[<span class="hljs-string">&#x27;骆昊&#x27;</span>])<br>print(scores[<span class="hljs-string">&#x27;狄仁杰&#x27;</span>])<br><span class="hljs-comment"># 对字典中所有键值对进行遍历</span><br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> scores:<br>    print(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;key&#125;</span>: <span class="hljs-subst">&#123;scores[key]&#125;</span>&#x27;</span>)<br><span class="hljs-comment"># 更新字典中的元素</span><br>scores[<span class="hljs-string">&#x27;白元芳&#x27;</span>] = <span class="hljs-number">65</span><br>scores[<span class="hljs-string">&#x27;诸葛王朗&#x27;</span>] = <span class="hljs-number">71</span><br>scores.update(冷面=<span class="hljs-number">67</span>, 方启鹤=<span class="hljs-number">85</span>)<br>print(scores)<br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;武则天&#x27;</span> <span class="hljs-keyword">in</span> scores:<br>    print(scores[<span class="hljs-string">&#x27;武则天&#x27;</span>])<br>print(scores.get(<span class="hljs-string">&#x27;武则天&#x27;</span>))<br><span class="hljs-comment"># get方法也是通过键获取对应的值但是可以设置默认值</span><br>print(scores.get(<span class="hljs-string">&#x27;武则天&#x27;</span>, <span class="hljs-number">60</span>))<br><span class="hljs-comment"># 删除字典中的元素</span><br>print(scores.popitem())<br>print(scores.popitem())<br>print(scores.pop(<span class="hljs-string">&#x27;骆昊&#x27;</span>, <span class="hljs-number">100</span>))<br><span class="hljs-comment"># 清空字典</span><br>scores.clear()<br>print(scores)<br></code></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="练习1：在屏幕上显示跑马灯文字。"><a href="#练习1：在屏幕上显示跑马灯文字。" class="headerlink" title="练习1：在屏幕上显示跑马灯文字。"></a>练习1：在屏幕上显示跑马灯文字。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    content = <span class="hljs-string">&#x27;北京欢迎你为你开天辟地…………&#x27;</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-comment"># 清理屏幕上的输出</span><br>        os.system(<span class="hljs-string">&#x27;cls&#x27;</span>)  <span class="hljs-comment"># os.system(&#x27;clear&#x27;)</span><br>        print(content)<br>        <span class="hljs-comment"># 休眠200毫秒</span><br>        time.sleep(<span class="hljs-number">0.2</span>)<br>        content = content[<span class="hljs-number">1</span>:] + content[<span class="hljs-number">0</span>]<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h4 id="练习2：设计一个函数产生指定长度的验证码，验证码由大小写字母和数字构成。"><a href="#练习2：设计一个函数产生指定长度的验证码，验证码由大小写字母和数字构成。" class="headerlink" title="练习2：设计一个函数产生指定长度的验证码，验证码由大小写字母和数字构成。"></a>练习2：设计一个函数产生指定长度的验证码，验证码由大小写字母和数字构成。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> random<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">generate_code</span>(<span class="hljs-params">code_len=<span class="hljs-number">4</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    生成指定长度的验证码</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param code_len: 验证码的长度(默认4个字符)</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :return: 由大小写英文字母和数字构成的随机验证码</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    all_chars = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span><br>    last_pos = <span class="hljs-built_in">len</span>(all_chars) - <span class="hljs-number">1</span><br>    code = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(code_len):<br>        index = random.randint(<span class="hljs-number">0</span>, last_pos)<br>        code += all_chars[index]<br>    <span class="hljs-keyword">return</span> code<br></code></pre></td></tr></table></figure><h4 id="练习3：设计一个函数返回给定文件名的后缀名。"><a href="#练习3：设计一个函数返回给定文件名的后缀名。" class="headerlink" title="练习3：设计一个函数返回给定文件名的后缀名。"></a>练习3：设计一个函数返回给定文件名的后缀名。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_suffix</span>(<span class="hljs-params">filename, has_dot=<span class="hljs-literal">False</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    获取文件名的后缀名</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param filename: 文件名</span><br><span class="hljs-string">    :param has_dot: 返回的后缀名是否需要带点</span><br><span class="hljs-string">    :return: 文件的后缀名</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    pos = filename.rfind(<span class="hljs-string">&#x27;.&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt; pos &lt; <span class="hljs-built_in">len</span>(filename) - <span class="hljs-number">1</span>:<br>        index = pos <span class="hljs-keyword">if</span> has_dot <span class="hljs-keyword">else</span> pos + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> filename[index:]<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="练习4：设计一个函数返回传入的列表中最大和第二大的元素的值。"><a href="#练习4：设计一个函数返回传入的列表中最大和第二大的元素的值。" class="headerlink" title="练习4：设计一个函数返回传入的列表中最大和第二大的元素的值。"></a>练习4：设计一个函数返回传入的列表中最大和第二大的元素的值。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">max2</span>(<span class="hljs-params">x</span>):</span><br>    m1, m2 = (x[<span class="hljs-number">0</span>], x[<span class="hljs-number">1</span>]) <span class="hljs-keyword">if</span> x[<span class="hljs-number">0</span>] &gt; x[<span class="hljs-number">1</span>] <span class="hljs-keyword">else</span> (x[<span class="hljs-number">1</span>], x[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">len</span>(x)):<br>        <span class="hljs-keyword">if</span> x[index] &gt; m1:<br>            m2 = m1<br>            m1 = x[index]<br>        <span class="hljs-keyword">elif</span> x[index] &gt; m2:<br>            m2 = x[index]<br>    <span class="hljs-keyword">return</span> m1, m2<br></code></pre></td></tr></table></figure><h4 id="练习5：计算指定的年月日是这一年的第几天。"><a href="#练习5：计算指定的年月日是这一年的第几天。" class="headerlink" title="练习5：计算指定的年月日是这一年的第几天。"></a>练习5：计算指定的年月日是这一年的第几天。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_leap_year</span>(<span class="hljs-params">year</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    判断指定的年份是不是闰年</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param year: 年份</span><br><span class="hljs-string">    :return: 闰年返回True平年返回False</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">which_day</span>(<span class="hljs-params">year, month, date</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    计算传入的日期是这一年的第几天</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param year: 年</span><br><span class="hljs-string">    :param month: 月</span><br><span class="hljs-string">    :param date: 日</span><br><span class="hljs-string">    :return: 第几天</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    days_of_month = [<br>        [<span class="hljs-number">31</span>, <span class="hljs-number">28</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>],<br>        [<span class="hljs-number">31</span>, <span class="hljs-number">29</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>]<br>    ][is_leap_year(year)]<br>    total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(month - <span class="hljs-number">1</span>):<br>        total += days_of_month[index]<br>    <span class="hljs-keyword">return</span> total + date<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    print(which_day(<span class="hljs-number">1980</span>, <span class="hljs-number">11</span>, <span class="hljs-number">28</span>))<br>    print(which_day(<span class="hljs-number">1981</span>, <span class="hljs-number">12</span>, <span class="hljs-number">31</span>))<br>    print(which_day(<span class="hljs-number">2018</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<br>    print(which_day(<span class="hljs-number">2016</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h4 id="练习6：打印杨辉三角。"><a href="#练习6：打印杨辉三角。" class="headerlink" title="练习6：打印杨辉三角。"></a>练习6：打印<a href="https://zh.wikipedia.org/wiki/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92%E5%BD%A2">杨辉三角</a>。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    num = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Number of rows: &#x27;</span>))<br>    yh = [[]] * num<br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(yh)):<br>        yh[row] = [<span class="hljs-literal">None</span>] * (row + <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(yh[row])):<br>            <span class="hljs-keyword">if</span> col == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> col == row:<br>                yh[row][col] = <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                yh[row][col] = yh[row - <span class="hljs-number">1</span>][col] + yh[row - <span class="hljs-number">1</span>][col - <span class="hljs-number">1</span>]<br>            print(yh[row][col], end=<span class="hljs-string">&#x27;\t&#x27;</span>)<br>        print()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h3><h4 id="案例1：双色球选号。"><a href="#案例1：双色球选号。" class="headerlink" title="案例1：双色球选号。"></a>案例1：双色球选号。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randrange, randint, sample<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">display</span>(<span class="hljs-params">balls</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    输出列表中的双色球号码</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> index, ball <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(balls):<br>        <span class="hljs-keyword">if</span> index == <span class="hljs-built_in">len</span>(balls) - <span class="hljs-number">1</span>:<br>            print(<span class="hljs-string">&#x27;|&#x27;</span>, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>        print(<span class="hljs-string">&#x27;%02d&#x27;</span> % ball, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>    print()<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">random_select</span>():</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    随机选择一组号码</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    red_balls = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">34</span>)]<br>    selected_balls = []<br>    selected_balls = sample(red_balls, <span class="hljs-number">6</span>)<br>    selected_balls.sort()<br>    selected_balls.append(randint(<span class="hljs-number">1</span>, <span class="hljs-number">16</span>))<br>    <span class="hljs-keyword">return</span> selected_balls<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;机选几注: &#x27;</span>))<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        display(random_select())<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> 上面使用random模块的sample函数来实现从列表中选择不重复的n个元素。</p></blockquote><h4 id="综合案例2：约瑟夫环问题。"><a href="#综合案例2：约瑟夫环问题。" class="headerlink" title="综合案例2：约瑟夫环问题。"></a>综合案例2：<a href="https://zh.wikipedia.org/wiki/%E7%BA%A6%E7%91%9F%E5%A4%AB%E6%96%AF%E9%97%AE%E9%A2%98">约瑟夫环问题</a>。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">《幸运的基督徒》</span><br><span class="hljs-string">有15个基督徒和15个非基督徒在海上遇险，为了能让一部分人活下来不得不将其中15个人扔到海里面去，有个人想了个办法就是大家围成一个圈，由某个人开始从1报数，报到9的人就扔到海里面，他后面的人接着从1开始报数，报到9的人继续扔到海里面，直到扔掉15个人。由于上帝的保佑，15个基督徒都幸免于难，问这些人最开始是怎么站的，哪些位置是基督徒哪些位置是非基督徒。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    persons = [<span class="hljs-literal">True</span>] * <span class="hljs-number">30</span><br>    counter, index, number = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> counter &lt; <span class="hljs-number">15</span>:<br>        <span class="hljs-keyword">if</span> persons[index]:<br>            number += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> number == <span class="hljs-number">9</span>:<br>                persons[index] = <span class="hljs-literal">False</span><br>                counter += <span class="hljs-number">1</span><br>                number = <span class="hljs-number">0</span><br>        index += <span class="hljs-number">1</span><br>        index %= <span class="hljs-number">30</span><br>    <span class="hljs-keyword">for</span> person <span class="hljs-keyword">in</span> persons:<br>        print(<span class="hljs-string">&#x27;基&#x27;</span> <span class="hljs-keyword">if</span> person <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;非&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><h4 id="综合案例3：井字棋游戏。"><a href="#综合案例3：井字棋游戏。" class="headerlink" title="综合案例3：井字棋游戏。"></a>综合案例3：<a href="https://zh.wikipedia.org/wiki/%E4%BA%95%E5%AD%97%E6%A3%8B">井字棋</a>游戏。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> os<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_board</span>(<span class="hljs-params">board</span>):</span><br>    print(board[<span class="hljs-string">&#x27;TL&#x27;</span>] + <span class="hljs-string">&#x27;|&#x27;</span> + board[<span class="hljs-string">&#x27;TM&#x27;</span>] + <span class="hljs-string">&#x27;|&#x27;</span> + board[<span class="hljs-string">&#x27;TR&#x27;</span>])<br>    print(<span class="hljs-string">&#x27;-+-+-&#x27;</span>)<br>    print(board[<span class="hljs-string">&#x27;ML&#x27;</span>] + <span class="hljs-string">&#x27;|&#x27;</span> + board[<span class="hljs-string">&#x27;MM&#x27;</span>] + <span class="hljs-string">&#x27;|&#x27;</span> + board[<span class="hljs-string">&#x27;MR&#x27;</span>])<br>    print(<span class="hljs-string">&#x27;-+-+-&#x27;</span>)<br>    print(board[<span class="hljs-string">&#x27;BL&#x27;</span>] + <span class="hljs-string">&#x27;|&#x27;</span> + board[<span class="hljs-string">&#x27;BM&#x27;</span>] + <span class="hljs-string">&#x27;|&#x27;</span> + board[<span class="hljs-string">&#x27;BR&#x27;</span>])<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    init_board = &#123;<br>        <span class="hljs-string">&#x27;TL&#x27;</span>: <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;TM&#x27;</span>: <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;TR&#x27;</span>: <span class="hljs-string">&#x27; &#x27;</span>,<br>        <span class="hljs-string">&#x27;ML&#x27;</span>: <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;MM&#x27;</span>: <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;MR&#x27;</span>: <span class="hljs-string">&#x27; &#x27;</span>,<br>        <span class="hljs-string">&#x27;BL&#x27;</span>: <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;BM&#x27;</span>: <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;BR&#x27;</span>: <span class="hljs-string">&#x27; &#x27;</span><br>    &#125;<br>    begin = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">while</span> begin:<br>        curr_board = init_board.copy()<br>        begin = <span class="hljs-literal">False</span><br>        turn = <span class="hljs-string">&#x27;x&#x27;</span><br>        counter = <span class="hljs-number">0</span><br>        os.system(<span class="hljs-string">&#x27;clear&#x27;</span>)<br>        print_board(curr_board)<br>        <span class="hljs-keyword">while</span> counter &lt; <span class="hljs-number">9</span>:<br>            move = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;轮到%s走棋, 请输入位置: &#x27;</span> % turn)<br>            <span class="hljs-keyword">if</span> curr_board[move] == <span class="hljs-string">&#x27; &#x27;</span>:<br>                counter += <span class="hljs-number">1</span><br>                curr_board[move] = turn<br>                <span class="hljs-keyword">if</span> turn == <span class="hljs-string">&#x27;x&#x27;</span>:<br>                    turn = <span class="hljs-string">&#x27;o&#x27;</span><br>                <span class="hljs-keyword">else</span>:<br>                    turn = <span class="hljs-string">&#x27;x&#x27;</span><br>            os.system(<span class="hljs-string">&#x27;clear&#x27;</span>)<br>            print_board(curr_board)<br>        choice = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;再玩一局?(yes|no)&#x27;</span>)<br>        begin = choice == <span class="hljs-string">&#x27;yes&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> 最后这个案例来自<a href="https://item.jd.com/11943853.html">《Python编程快速上手:让繁琐工作自动化》</a>一书（这本书对有编程基础想迅速使用Python将日常工作自动化的人来说还是不错的选择），对代码做了一点点的调整。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【python学习】-函数和模块的使用</title>
    <link href="/post/33595.html"/>
    <url>/post/33595.html</url>
    
    <content type="html"><![CDATA[<h1 id="【python学习】-函数和模块的使用"><a href="#【python学习】-函数和模块的使用" class="headerlink" title="【python学习】-函数和模块的使用"></a>【python学习】-函数和模块的使用</h1><h2 id="函数和模块的使用"><a href="#函数和模块的使用" class="headerlink" title="函数和模块的使用"></a>函数和模块的使用</h2><p>在讲解本章节的内容之前，我们先来研究一道数学题，请说出下面的方程有多少组正整数解。</p><p>​                                                   <code>x1 + x2 + x3 + x4 = 8</code></p><p>事实上，上面的问题等同于将8个苹果分成四组每组至少一个苹果有多少种方案。想到这一点问题的答案就呼之欲出了。</p><p>可以用Python的程序来计算出这个值，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输入M和N计算C(M,N)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>m = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;m = &#x27;</span>))<br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;n = &#x27;</span>))<br>fm = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>):<br>    fm *= num<br>fn = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>    fn *= num<br>fm_n = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m - n + <span class="hljs-number">1</span>):<br>    fm_n *= num<br>print(fm // fn // fm_n)<br></code></pre></td></tr></table></figure><h3 id="函数的作用"><a href="#函数的作用" class="headerlink" title="函数的作用"></a>函数的作用</h3><p>不知道大家是否注意到，在上面的代码中，我们做了3次求阶乘，这样的代码实际上就是重复代码。编程大师<em>Martin Fowler</em>先生曾经说过：“<strong>代码有很多种坏味道，重复是最坏的一种！</strong>”，要写出高质量的代码首先要解决的就是重复代码的问题。对于上面的代码来说，我们可以将计算阶乘的功能封装到一个称之为“函数”的功能模块中，在需要计算阶乘的地方，我们只需要“调用”这个“函数”就可以了。</p><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p>在Python中可以使用<code>def</code>关键字来定义函数，和变量一样每个函数也有一个响亮的名字，而且命名规则跟变量的命名规则是一致的。在函数名后面的圆括号中可以放置传递给函数的参数，这一点和数学上的函数非常相似，程序中函数的参数就相当于是数学上说的函数的自变量，而函数执行完成后我们可以通过<code>return</code>关键字来返回一个值，这相当于数学上说的函数的因变量。</p><p>在了解了如何定义函数后，我们可以对上面的代码进行重构，所谓重构就是在不影响代码执行结果的前提下对代码的结构进行调整，重构之后的代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输入M和N计算C(M,N)</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fac</span>(<span class="hljs-params">num</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;求阶乘&quot;&quot;&quot;</span><br>    result = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, num + <span class="hljs-number">1</span>):<br>        result *= n<br>    <span class="hljs-keyword">return</span> result<br><br><br>m = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;m = &#x27;</span>))<br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;n = &#x27;</span>))<br><span class="hljs-comment"># 当需要计算阶乘的时候不用再写循环求阶乘而是直接调用已经定义好的函数</span><br>print(fac(m) // fac(n) // fac(m - n))<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> Python的<code>math</code>模块中其实已经有一个名为<code>factorial</code>函数实现了阶乘运算，事实上求阶乘并不用自己定义函数。下面的例子中，我们讲的函数在Python标准库已经实现过了，我们这里是为了讲解函数的定义和使用才把它们又实现了一遍，<strong>实际开发中并不建议做这种低级的重复劳动</strong>。</p></blockquote><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><p>函数是绝大多数编程语言中都支持的一个代码的&quot;构建块&quot;，但是Python中的函数与其他语言中的函数还是有很多不太相同的地方，其中一个显著的区别就是Python对函数参数的处理。在Python中，函数的参数可以有默认值，也支持使用可变参数，所以Python并不需要像其他语言一样支持<a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD">函数的重载</a>，因为我们在定义一个函数的时候可以让它有多种不同的使用方式，下面是两个小例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">roll_dice</span>(<span class="hljs-params">n=<span class="hljs-number">2</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;摇色子&quot;&quot;&quot;</span><br>    total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        total += randint(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>)<br>    <span class="hljs-keyword">return</span> total<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">a=<span class="hljs-number">0</span>, b=<span class="hljs-number">0</span>, c=<span class="hljs-number">0</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;三个数相加&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> a + b + c<br><br><br><span class="hljs-comment"># 如果没有指定参数那么使用默认值摇两颗色子</span><br>print(roll_dice())<br><span class="hljs-comment"># 摇三颗色子</span><br>print(roll_dice(<span class="hljs-number">3</span>))<br>print(add())<br>print(add(<span class="hljs-number">1</span>))<br>print(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br>print(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-comment"># 传递参数时可以不按照设定的顺序进行传递</span><br>print(add(c=<span class="hljs-number">50</span>, a=<span class="hljs-number">100</span>, b=<span class="hljs-number">200</span>))<br></code></pre></td></tr></table></figure><p>我们给上面两个函数的参数都设定了默认值，这也就意味着如果在调用函数的时候如果没有传入对应参数的值时将使用该参数的默认值，所以在上面的代码中我们可以用各种不同的方式去调用<code>add</code>函数，这跟其他很多语言中函数重载的效果是一致的。</p><p>其实上面的<code>add</code>函数还有更好的实现方案，因为我们可能会对0个或多个参数进行加法运算，而具体有多少个参数是由调用者来决定，我们作为函数的设计者对这一点是一无所知的，因此在不确定参数个数的时候，我们可以使用可变参数，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 在参数名前面的*表示args是一个可变参数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">*args</span>):</span><br>    total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> args:<br>        total += val<br>    <span class="hljs-keyword">return</span> total<br><br><br><span class="hljs-comment"># 在调用add函数时可以传入0个或多个参数</span><br>print(add())<br>print(add(<span class="hljs-number">1</span>))<br>print(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br>print(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br>print(add(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>))<br></code></pre></td></tr></table></figure><h3 id="用模块管理函数"><a href="#用模块管理函数" class="headerlink" title="用模块管理函数"></a>用模块管理函数</h3><p>对于任何一种编程语言来说，给变量、函数这样的标识符起名字都是一个让人头疼的问题，因为我们会遇到命名冲突这种尴尬的情况。最简单的场景就是在同一个.py文件中定义了两个同名函数，由于Python没有函数重载的概念，那么后面的定义会覆盖之前的定义，也就意味着两个函数同名函数实际上只有一个是存在的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span>():</span><br>    print(<span class="hljs-string">&#x27;hello, world!&#x27;</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span>():</span><br>    print(<span class="hljs-string">&#x27;goodbye, world!&#x27;</span>)<br><br><br><span class="hljs-comment"># 下面的代码会输出什么呢？</span><br>foo()<br></code></pre></td></tr></table></figure><p>当然上面的这种情况我们很容易就能避免，但是如果项目是由多人协作进行团队开发的时候，团队中可能有多个程序员都定义了名为<code>foo</code>的函数，那么怎么解决这种命名冲突呢？答案其实很简单，Python中每个文件就代表了一个模块（module），我们在不同的模块中可以有同名的函数，在使用函数的时候我们通过<code>import</code>关键字导入指定的模块就可以区分到底要使用的是哪个模块中的<code>foo</code>函数，代码如下所示。</p><p><code>module1.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span>():</span><br>    print(<span class="hljs-string">&#x27;hello, world!&#x27;</span>)<br></code></pre></td></tr></table></figure><p><code>module2.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span>():</span><br>    print(<span class="hljs-string">&#x27;goodbye, world!&#x27;</span>)<br></code></pre></td></tr></table></figure><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> module1 <span class="hljs-keyword">import</span> foo<br><br><span class="hljs-comment"># 输出hello, world!</span><br>foo()<br><br><span class="hljs-keyword">from</span> module2 <span class="hljs-keyword">import</span> foo<br><br><span class="hljs-comment"># 输出goodbye, world!</span><br>foo()<br></code></pre></td></tr></table></figure><p>也可以按照如下所示的方式来区分到底要使用哪一个<code>foo</code>函数。</p><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> module1 <span class="hljs-keyword">as</span> m1<br><span class="hljs-keyword">import</span> module2 <span class="hljs-keyword">as</span> m2<br><br>m1.foo()<br>m2.foo()<br></code></pre></td></tr></table></figure><p>但是如果将代码写成了下面的样子，那么程序中调用的是最后导入的那个<code>foo</code>，因为后导入的foo覆盖了之前导入的<code>foo</code>。</p><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> module1 <span class="hljs-keyword">import</span> foo<br><span class="hljs-keyword">from</span> module2 <span class="hljs-keyword">import</span> foo<br><br><span class="hljs-comment"># 输出goodbye, world!</span><br>foo()<br></code></pre></td></tr></table></figure><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> module2 <span class="hljs-keyword">import</span> foo<br><span class="hljs-keyword">from</span> module1 <span class="hljs-keyword">import</span> foo<br><br><span class="hljs-comment"># 输出hello, world!</span><br>foo()<br></code></pre></td></tr></table></figure><p>需要说明的是，如果我们导入的模块除了定义函数之外还中有可以执行代码，那么Python解释器在导入这个模块时就会执行这些代码，事实上我们可能并不希望如此，因此如果我们在模块中编写了执行代码，最好是将这些执行代码放入如下所示的条件中，这样的话除非直接运行该模块，if条件下的这些代码是不会执行的，因为只有直接执行的模块的名字才是&quot;__main__&quot;。</p><p><code>module3.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span>():</span><br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bar</span>():</span><br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-comment"># __name__是Python中一个隐含的变量它代表了模块的名字</span><br><span class="hljs-comment"># 只有被Python解释器直接执行的模块的名字才是__main__</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    print(<span class="hljs-string">&#x27;call foo()&#x27;</span>)<br>    foo()<br>    print(<span class="hljs-string">&#x27;call bar()&#x27;</span>)<br>    bar()<br></code></pre></td></tr></table></figure><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> module3<br><br><span class="hljs-comment"># 导入module3时 不会执行模块中if条件成立时的代码 因为模块的名字是module3而不是__main__</span><br></code></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="练习1：实现计算求最大公约数和最小公倍数的函数。"><a href="#练习1：实现计算求最大公约数和最小公倍数的函数。" class="headerlink" title="练习1：实现计算求最大公约数和最小公倍数的函数。"></a>练习1：实现计算求最大公约数和最小公倍数的函数。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gcd</span>(<span class="hljs-params">x, y</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;求最大公约数&quot;&quot;&quot;</span><br>    (x, y) = (y, x) <span class="hljs-keyword">if</span> x &gt; y <span class="hljs-keyword">else</span> (x, y)<br>    <span class="hljs-keyword">for</span> factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(x, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> x % factor == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> y % factor == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> factor<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lcm</span>(<span class="hljs-params">x, y</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;求最小公倍数&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> x * y // gcd(x, y)<br></code></pre></td></tr></table></figure><h4 id="练习2：实现判断一个数是不是回文数的函数。"><a href="#练习2：实现判断一个数是不是回文数的函数。" class="headerlink" title="练习2：实现判断一个数是不是回文数的函数。"></a>练习2：实现判断一个数是不是回文数的函数。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_palindrome</span>(<span class="hljs-params">num</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;判断一个数是不是回文数&quot;&quot;&quot;</span><br>    temp = num<br>    total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> temp &gt; <span class="hljs-number">0</span>:<br>        total = total * <span class="hljs-number">10</span> + temp % <span class="hljs-number">10</span><br>        temp //= <span class="hljs-number">10</span><br>    <span class="hljs-keyword">return</span> total == num<br></code></pre></td></tr></table></figure><h4 id="练习3：实现判断一个数是不是素数的函数。"><a href="#练习3：实现判断一个数是不是素数的函数。" class="headerlink" title="练习3：实现判断一个数是不是素数的函数。"></a>练习3：实现判断一个数是不是素数的函数。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_prime</span>(<span class="hljs-params">num</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;判断一个数是不是素数&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">int</span>(num ** <span class="hljs-number">0.5</span>) + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> num % factor == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span> <span class="hljs-keyword">if</span> num != <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h4 id="练习4：写一个程序判断输入的正整数是不是回文素数。"><a href="#练习4：写一个程序判断输入的正整数是不是回文素数。" class="headerlink" title="练习4：写一个程序判断输入的正整数是不是回文素数。"></a>练习4：写一个程序判断输入的正整数是不是回文素数。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    num = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入正整数: &#x27;</span>))<br>    <span class="hljs-keyword">if</span> is_palindrome(num) <span class="hljs-keyword">and</span> is_prime(num):<br>        print(<span class="hljs-string">&#x27;%d是回文素数&#x27;</span> % num)<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：通过上面的程序可以看出，当我们<strong>将代码中重复出现的和相对独立的功能抽取成函数</strong>后，我们可以<strong>组合使用这些函数</strong>来解决更为复杂的问题，这也是我们为什么要定义和使用函数的一个非常重要的原因。</p></blockquote><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><p>最后，我们来讨论一下Python中有关变量作用域的问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span>():</span><br>    b = <span class="hljs-string">&#x27;hello&#x27;</span><br><br>    <span class="hljs-comment"># Python中可以在函数内部再定义函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bar</span>():</span><br>        c = <span class="hljs-literal">True</span><br>        print(a)<br>        print(b)<br>        print(c)<br><br>    bar()<br>    <span class="hljs-comment"># print(c)  # NameError: name &#x27;c&#x27; is not defined</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    a = <span class="hljs-number">100</span><br>    <span class="hljs-comment"># print(b)  # NameError: name &#x27;b&#x27; is not defined</span><br>    foo()<br></code></pre></td></tr></table></figure><p>上面的代码能够顺利的执行并且打印出100、hello和True，但我们注意到了，在<code>bar</code>函数的内部并没有定义<code>a</code>和<code>b</code>两个变量，那么<code>a</code>和<code>b</code>是从哪里来的。我们在上面代码的<code>if</code>分支中定义了一个变量<code>a</code>，这是一个全局变量（global variable），属于全局作用域，因为它没有定义在任何一个函数中。在上面的<code>foo</code>函数中我们定义了变量<code>b</code>，这是一个定义在函数中的局部变量（local variable），属于局部作用域，在<code>foo</code>函数的外部并不能访问到它；但对于<code>foo</code>函数内部的<code>bar</code>函数来说，变量<code>b</code>属于嵌套作用域，在<code>bar</code>函数中我们是可以访问到它的。<code>bar</code>函数中的变量<code>c</code>属于局部作用域，在<code>bar</code>函数之外是无法访问的。事实上，Python查找一个变量时会按照“局部作用域”、“嵌套作用域”、“全局作用域”和“内置作用域”的顺序进行搜索，前三者我们在上面的代码中已经看到了，所谓的“内置作用域”就是Python内置的那些标识符，我们之前用过的<code>input</code>、<code>print</code>、<code>int</code>等都属于内置作用域。</p><p>再看看下面这段代码，我们希望通过函数调用修改全局变量<code>a</code>的值，但实际上下面的代码是做不到的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span>():</span><br>    a = <span class="hljs-number">200</span><br>    print(a)  <span class="hljs-comment"># 200</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    a = <span class="hljs-number">100</span><br>    foo()<br>    print(a)  <span class="hljs-comment"># 100</span><br></code></pre></td></tr></table></figure><p>在调用<code>foo</code>函数后，我们发现<code>a</code>的值仍然是100，这是因为当我们在函数<code>foo</code>中写<code>a = 200</code>的时候，是重新定义了一个名字为<code>a</code>的局部变量，它跟全局作用域的<code>a</code>并不是同一个变量，因为局部作用域中有了自己的变量<code>a</code>，因此<code>foo</code>函数不再搜索全局作用域中的<code>a</code>。如果我们希望在<code>foo</code>函数中修改全局作用域中的<code>a</code>，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span>():</span><br>    <span class="hljs-keyword">global</span> a<br>    a = <span class="hljs-number">200</span><br>    print(a)  <span class="hljs-comment"># 200</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    a = <span class="hljs-number">100</span><br>    foo()<br>    print(a)  <span class="hljs-comment"># 200</span><br></code></pre></td></tr></table></figure><p>我们可以使用<code>global</code>关键字来指示<code>foo</code>函数中的变量<code>a</code>来自于全局作用域，如果全局作用域中没有<code>a</code>，那么下面一行的代码就会定义变量<code>a</code>并将其置于全局作用域。同理，如果我们希望函数内部的函数能够修改嵌套作用域中的变量，可以使用<code>nonlocal</code>关键字来指示变量来自于嵌套作用域，请大家自行试验。</p><p>在实际开发中，我们应该尽量减少对全局变量的使用，因为全局变量的作用域和影响过于广泛，可能会发生意料之外的修改和使用，除此之外全局变量比局部变量拥有更长的生命周期，可能导致对象占用的内存长时间无法被<a href="https://zh.wikipedia.org/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)">垃圾回收</a>。事实上，减少对全局变量的使用，也是降低代码之间耦合度的一个重要举措，同时也是对<a href="https://zh.wikipedia.org/zh-hans/%E5%BE%97%E5%A2%A8%E5%BF%92%E8%80%B3%E5%AE%9A%E5%BE%8B">迪米特法则</a>的践行。减少全局变量的使用就意味着我们应该尽量让变量的作用域在函数的内部，但是如果我们希望将一个局部变量的生命周期延长，使其在定义它的函数调用结束后依然可以使用它的值，这时候就需要使用<a href="https://zh.wikipedia.org/wiki/%E9%97%AD%E5%8C%85_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">闭包</a>，这个我们在后续的内容中进行讲解。</p><blockquote><p><strong>说明：</strong> 很多人经常会将“闭包”和<a href="https://zh.wikipedia.org/wiki/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0">“匿名函数”</a>混为一谈，但实际上它们并不是一回事，如果想了解这个概念，可以看看<a href="https://zh.wikipedia.org/wiki/">维基百科</a>的解释或者<a href="https://www.zhihu.com/">知乎</a>上对这个概念的讨论。</p></blockquote><p>说了那么多，其实结论很简单，从现在开始我们可以将Python代码按照下面的格式进行书写，这一点点的改进其实就是在我们理解了函数和作用域的基础上跨出的巨大的一步。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-comment"># Todo: Add your code here</span><br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【python学习】-构造程序逻辑</title>
    <link href="/post/59153.html"/>
    <url>/post/59153.html</url>
    
    <content type="html"><![CDATA[<h1 id="【python学习】-构造程序逻辑"><a href="#【python学习】-构造程序逻辑" class="headerlink" title="【python学习】-构造程序逻辑"></a>【python学习】-构造程序逻辑</h1><h3 id="经典的例子"><a href="#经典的例子" class="headerlink" title="经典的例子"></a>经典的例子</h3><ol><li><p>寻找<strong>水仙花数</strong>。</p><blockquote><p><strong>说明</strong>：水仙花数也被称为超完全数字不变数、自恋数、自幂数、阿姆斯特朗数，它是一个3位数，该数字每个位上数字的立方之和正好等于它本身，例如：$1^3 + 5^3+ 3^3=153$。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">找出所有水仙花数</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>, <span class="hljs-number">1000</span>):<br>    low = num % <span class="hljs-number">10</span><br>    mid = num // <span class="hljs-number">10</span> % <span class="hljs-number">10</span><br>    high = num // <span class="hljs-number">100</span><br>    <span class="hljs-keyword">if</span> num == low ** <span class="hljs-number">3</span> + mid ** <span class="hljs-number">3</span> + high ** <span class="hljs-number">3</span>:<br>        print(num)<br></code></pre></td></tr></table></figure><p>在上面的代码中，我们通过整除和求模运算分别找出了一个三位数的个位、十位和百位，这种小技巧在实际开发中还是常用的。用类似的方法，我们还可以实现将一个正整数反转，例如：将12345变成54321，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">正整数的反转</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>num = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;num = &#x27;</span>))<br>reversed_num = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> num &gt; <span class="hljs-number">0</span>:<br>    reversed_num = reversed_num * <span class="hljs-number">10</span> + num % <span class="hljs-number">10</span><br>    num //= <span class="hljs-number">10</span><br>print(reversed_num)<br></code></pre></td></tr></table></figure></li><li><p><strong>百钱百鸡</strong>问题。</p><blockquote><p><strong>说明</strong>：百钱百鸡是我国古代数学家<a href="https://baike.baidu.com/item/%E5%BC%A0%E4%B8%98%E5%BB%BA/10246238">张丘建</a>在《算经》一书中提出的数学问题：鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。百钱买百鸡，问鸡翁、鸡母、鸡雏各几何？翻译成现代文是：公鸡5元一只，母鸡3元一只，小鸡1元三只，用100块钱买一百只鸡，问公鸡、母鸡、小鸡各有多少只？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">《百钱百鸡》问题</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">20</span>):<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">33</span>):<br>        z = <span class="hljs-number">100</span> - x - y<br>        <span class="hljs-keyword">if</span> <span class="hljs-number">5</span> * x + <span class="hljs-number">3</span> * y + z / <span class="hljs-number">3</span> == <span class="hljs-number">100</span>:<br>            print(<span class="hljs-string">&#x27;公鸡: %d只, 母鸡: %d只, 小鸡: %d只&#x27;</span> % (x, y, z))<br></code></pre></td></tr></table></figure><p>上面使用的方法叫做<strong>穷举法</strong>，也称为<strong>暴力搜索法</strong>，这种方法通过一项一项的列举备选解决方案中所有可能的候选项并检查每个候选项是否符合问题的描述，最终得到问题的解。这种方法看起来比较笨拙，但对于运算能力非常强大的计算机来说，通常都是一个可行的甚至是不错的选择，而且问题的解如果存在，这种方法一定能够找到它。</p></li><li><p><strong>CRAPS赌博游戏</strong>。</p><blockquote><p><strong>说明</strong>：CRAPS又称花旗骰，是美国拉斯维加斯非常受欢迎的一种的桌上赌博游戏。该游戏使用两粒骰子，玩家通过摇两粒骰子获得点数进行游戏。简单的规则是：玩家第一次摇骰子如果摇出了7点或11点，玩家胜；玩家第一次如果摇出2点、3点或12点，庄家胜；其他点数玩家继续摇骰子，如果玩家摇出了7点，庄家胜；如果玩家摇出了第一次摇的点数，玩家胜；其他点数，玩家继续要骰子，直到分出胜负。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Craps赌博游戏</span><br><span class="hljs-string">我们设定玩家开始游戏时有1000元的赌注</span><br><span class="hljs-string">游戏结束的条件是玩家输光所有的赌注</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><br>money = <span class="hljs-number">1000</span><br><span class="hljs-keyword">while</span> money &gt; <span class="hljs-number">0</span>:<br>    print(<span class="hljs-string">&#x27;你的总资产为:&#x27;</span>, money)<br>    needs_go_on = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        debt = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请下注: &#x27;</span>))<br>        <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt; debt &lt;= money:<br>            <span class="hljs-keyword">break</span><br>    first = randint(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>) + randint(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>)<br>    print(<span class="hljs-string">&#x27;玩家摇出了%d点&#x27;</span> % first)<br>    <span class="hljs-keyword">if</span> first == <span class="hljs-number">7</span> <span class="hljs-keyword">or</span> first == <span class="hljs-number">11</span>:<br>        print(<span class="hljs-string">&#x27;玩家胜!&#x27;</span>)<br>        money += debt<br>    <span class="hljs-keyword">elif</span> first == <span class="hljs-number">2</span> <span class="hljs-keyword">or</span> first == <span class="hljs-number">3</span> <span class="hljs-keyword">or</span> first == <span class="hljs-number">12</span>:<br>        print(<span class="hljs-string">&#x27;庄家胜!&#x27;</span>)<br>        money -= debt<br>    <span class="hljs-keyword">else</span>:<br>        needs_go_on = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">while</span> needs_go_on:<br>        needs_go_on = <span class="hljs-literal">False</span><br>        current = randint(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>) + randint(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>)<br>        print(<span class="hljs-string">&#x27;玩家摇出了%d点&#x27;</span> % current)<br>        <span class="hljs-keyword">if</span> current == <span class="hljs-number">7</span>:<br>            print(<span class="hljs-string">&#x27;庄家胜&#x27;</span>)<br>            money -= debt<br>        <span class="hljs-keyword">elif</span> current == first:<br>            print(<span class="hljs-string">&#x27;玩家胜&#x27;</span>)<br>            money += debt<br>        <span class="hljs-keyword">else</span>:<br>            needs_go_on = <span class="hljs-literal">True</span><br>print(<span class="hljs-string">&#x27;你破产了, 游戏结束!&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="有用的练习"><a href="#有用的练习" class="headerlink" title="有用的练习"></a>有用的练习</h3></li><li><p>生成<strong>斐波那契数列</strong>的前20个数。</p><blockquote><p><strong>说明</strong>：斐波那契数列（Fibonacci sequence），又称黄金分割数列，是意大利数学家莱昂纳多·斐波那契（Leonardoda Fibonacci）在《计算之书》中提出一个在理想假设条件下兔子成长率的问题而引入的数列，所以这个数列也被戏称为&quot;兔子数列&quot;。斐波那契数列的特点是数列的前两个数都是1，从第三个数开始，每个数都是它前面两个数的和，形如：1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, …。斐波那契数列在现代物理、准晶体结构、化学等领域都有直接的应用。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输出斐波那契数列的前20个数</span><br><span class="hljs-string">1 1 2 3 5 8 13 21 ...</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>a = <span class="hljs-number">0</span><br>b = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>    a, b = b, a + b<br>    print(a, end=<span class="hljs-string">&#x27; &#x27;</span>)<br></code></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>找出10000以内的<strong>完美数</strong>。</p><blockquote><p><strong>说明</strong>：完美数又称为完全数或完备数，它的所有的真因子（即除了自身以外的因子）的和（即因子函数）恰好等于它本身。例如：6（$6=1+2+3$）和28（$28=1+2+4+7+14$）就是完美数。完美数有很多神奇的特性，有兴趣的可以自行了解。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">找出1~9999之间的所有完美数</span><br><span class="hljs-string">完美数是除自身外其他所有因子的和正好等于这个数本身的数</span><br><span class="hljs-string">例如: 6 = 1 + 2 + 3, 28 = 1 + 2 + 4 + 7 + 14</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10000</span>):<br>    result = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">int</span>(math.sqrt(num)) + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> num % factor == <span class="hljs-number">0</span>:<br>            result += factor<br>            <span class="hljs-keyword">if</span> factor &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> num // factor != factor:<br>                result += num // factor<br>    <span class="hljs-keyword">if</span> result == num:<br>        print(num)<br></code></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>输出<strong>100以内所有的素数</strong>。</p><blockquote><p><strong>说明</strong>：素数指的是只能被1和自身整除的正整数（不包括1）。</p></blockquote></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输出2~99之间的素数</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">100</span>):<br>    is_prime = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">for</span> factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">int</span>(math.sqrt(num)) + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> num % factor == <span class="hljs-number">0</span>:<br>            is_prime = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> is_prime:<br>        print(num, end=<span class="hljs-string">&#x27; &#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>慧编程：光环板--MQTT扩展使用说明</title>
    <link href="/post/27196.html"/>
    <url>/post/27196.html</url>
    
    <content type="html"><![CDATA[<h1 id="慧编程：光环板–MQTT扩展使用说明"><a href="#慧编程：光环板–MQTT扩展使用说明" class="headerlink" title="慧编程：光环板–MQTT扩展使用说明"></a>慧编程：光环板–MQTT扩展使用说明</h1><p><img src="https://s1.ax1x.com/2020/03/31/GQW30P.png" alt="logo"></p><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>前几天为光环板写了一个MQTT的扩展（ps:不得不说：慧编程（mblock)的开发者平台真的很不错（<a href="https://ext.makeblock.com/">https://ext.makeblock.com</a>）：简单，方便，入手快！👍👍👍）。今天从慧编程的产品那里得知：有很多用户对光环板的MQTT协议还不知道如何使用！为了让更多的用户能够学会使用MQTT扩展，于是写下了这篇MQTT的教程！</p><h1 id="二、加载MQTT协议"><a href="#二、加载MQTT协议" class="headerlink" title="二、加载MQTT协议"></a>二、加载MQTT协议</h1><p>首先，先添加我们的光环板设备，然后在指令栏中-添加扩展-MQTT</p><p><img src="https://s1.ax1x.com/2020/03/31/GQHchq.jpg" alt="加载设备"></p><p><img src="https://s1.ax1x.com/2020/03/31/GQq0oj.jpg" alt="MQTT扩展"></p><p>在用到我们的MQTT功能之前首先你要有一个物联网平台的账户，扩展默认的物联网平台是（<a href="iot.dfrobot.com.cn">iot.dfrobot.com.cn</a>）当然也可以使用本地物联网平台。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">登录IoT网站，注册账号。进入工作间。新建一个设备，默认名字“设备一”。<br><br>一个账号，默认一共有10000条信息的储存容量。这些容量共所有设备共享。例如，图中设备上方显示“0/1000”，那么此设备最大可储存1000条信息，已使用0条信息的储存空间。如果此设备收发的信息超过1000条，新信息将不再存入。<br><br>每个设备默认每隔1s储存一次消息。<br>观察到设备唯一识别码Topic以及左侧的用户信息，点击眼睛图标可以将隐藏的Iot_id和Iot_<span class="hljs-keyword">pwd</span>显示出来。<br></code></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/31/GQXmQ0.jpg"></p><p><img src="https://s1.ax1x.com/2020/03/31/GQXtQx.jpg" alt="iot_id,iot_pwd"></p><p><strong><em>为了稍后编程需要，记下相关账号</em></strong>：</p><p>iot_id: <del>Skv3zKyNb</del></p><p>iot_pwd: <del>r1lD3ztJ4b</del></p><p>topic: <del>BJpHJt1VW</del> </p><h1 id="三、mqtt积木块的使用说明"><a href="#三、mqtt积木块的使用说明" class="headerlink" title="三、mqtt积木块的使用说明"></a>三、mqtt积木块的使用说明</h1><p><u><strong>mqtt扩展必须在光环板联网的情况请款下才能使用！</strong></u></p><p><img src="https://s1.ax1x.com/2020/03/31/Gl94KA.jpg"></p><h2 id="1、mqtt初始化设置"><a href="#1、mqtt初始化设置" class="headerlink" title="1、mqtt初始化设置"></a>1、mqtt初始化设置</h2><p><img src="https://s1.ax1x.com/2020/03/31/GlFBRO.jpg" alt="初始化"></p><p>​                     <code>mqtt = MQTTClient(&#39;0805e3d04f3b34e7&#39;, &#39;182.254.130.180&#39;, 1883, &#39;&#39;, &#39;&#39;, keepalive=0)</code></p><p>​        这里的clientID和server 是确定的（当然可以跟你自己连接不同的服务器进行更改），iot_id和iot_pwd是我们自己的物联网用户明和密码（也就是我们刚才需要记下的那串字符）。</p><h2 id="2、发布消息到主题上"><a href="#2、发布消息到主题上" class="headerlink" title="2、发布消息到主题上"></a>2、发布消息到主题上</h2><p><img src="https://s1.ax1x.com/2020/03/31/GlA1u4.jpg"></p><p>​                                                                 <code>mqtt.publish(&#39;topic&#39;, &#39;hello&#39;)</code></p><p>​        向物联网设备(topic)发送消息(eg可以把语音识别的内容发送到我们的物联网平台，字符串、变量值)!</p><h2 id="3、连接mqtt"><a href="#3、连接mqtt" class="headerlink" title="3、连接mqtt"></a>3、连接mqtt</h2><p><img src="https://s1.ax1x.com/2020/03/31/GlA3DJ.jpg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>        mqtt.connect()<br>        print(<span class="hljs-string">&#x27;Connected&#x27;</span>)<br>    <span class="hljs-keyword">except</span>:<br>        print(<span class="hljs-string">&#x27;Disconnected&#x27;</span>)<br></code></pre></td></tr></table></figure><p>​        通过mqtt协议连接到物联网平台。</p><h2 id="4、订阅主题"><a href="#4、订阅主题" class="headerlink" title="4、订阅主题"></a>4、订阅主题</h2><p><img src="https://s1.ax1x.com/2020/03/31/GlAt4x.jpg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mqtt_callback</span>(<span class="hljs-params">topic, msg</span>):</span><br>        <span class="hljs-string">&#x27;message&#x27;</span> = msg.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>, <span class="hljs-string">&#x27;ignore&#x27;</span>)<br>        <span class="hljs-keyword">pass</span><br><br>mqtt.set_callback(mqtt_callback)<br>mqtt.subscribe(<span class="hljs-string">&#x27;topic&#x27;</span>)<br></code></pre></td></tr></table></figure><p>​        订阅的消息通过回调传递。这是为了避免对已订阅的消息使用队列，否则可能随时收到消息（包括客户端期望其他类型的服务器响应时，因此有两种选择：要么通过回调立即传递它们，要么一直排队直到“预期”响应到达）。请注意，不需要队列是一种迷惑：在这种情况下，运行时调用堆栈形成一个隐式队列。而且与显式队列不同，它很难控制。之所以选择这种设计，是因为在通常情况下，处理订阅的消息是最有效的。但是，如果在订阅回调中发布了QoS&gt; 0的新消息，则可能导致深度递归或无限递归（后者意味着应用程序将以<code>RuntimeException</code>终止）。</p><p>​        我们在使用此积木块时，可以设置一个变量来代替订阅的消息。然后用逻辑判断不同的消息值来做相应的想要操作</p><h2 id="5、等待服务器状态"><a href="#5、等待服务器状态" class="headerlink" title="5、等待服务器状态"></a>5、等待服务器状态</h2><p><img src="https://s1.ax1x.com/2020/03/31/GlArbd.jpg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">mqtt.wait_msg()<br>mqtt.check_msg()<br></code></pre></td></tr></table></figure><p>​        <code>    wait_msg（）</code> -等待服务器消息。订阅消息将传递到使用set_callback（）设置的回调中，其他任何消息将在内部进行处理。</p><p>​        <code>    check_msg（）</code> -检查是否有来自服务器的待处理消息。如果是，则以与wait_msg（）相同的方式处理，否则，立即返回。</p><p>​        <code>    wait_msg（）</code>和<code>check_msg（）</code>是“主循环迭代”方法，有阻塞和无阻塞版本。应该在循环中定期调用它们；如果您没有其他要执行的前台任务（即，您的应用程序仅对已订阅的MQTT消息做出反应），则应调用<code>wait_msg（）；</code>如果您也要处理其他前台任务，则应调用 <code>check_msg（）</code> 。</p><p>​        请注意，如果您仅发布消息，而无需<code>订阅</code>，则无需调用<code>wait_msg（）</code> / <code>check_msg（）</code>。</p><h2 id="6、断开连接"><a href="#6、断开连接" class="headerlink" title="6、断开连接"></a>6、断开连接</h2><p><img src="https://s1.ax1x.com/2020/03/31/GlAfxS.jpg"></p><p>​                                                                               <code>  mtqq.disconnect()</code></p><p>​        断开与服务器的连接，释放资源。</p><h2 id="7、设置主线的离线消息"><a href="#7、设置主线的离线消息" class="headerlink" title="7、设置主线的离线消息"></a>7、设置主线的离线消息</h2><p><img src="https://s1.ax1x.com/2020/03/31/GlAqP0.jpg"></p><p>​                                                                      <code>mqtt.set_last_will(&#39;&#39;, &#39;&#39;)</code></p><p>​        设置MQTT“最后的意愿”消息。应该<em>在</em> connect（）<em>之前</em>调用 。</p><h1 id="四、样例程序"><a href="#四、样例程序" class="headerlink" title="四、样例程序"></a>四、样例程序</h1><h2 id="一、发送消息到服务器端"><a href="#一、发送消息到服务器端" class="headerlink" title="一、发送消息到服务器端"></a>一、发送消息到服务器端</h2><p><img src="https://s1.ax1x.com/2020/04/02/GGIbVg.jpg"></p><p>在样例一的程序中，当我们给光环板供电时，它先连接wifi，通过mqtt协议来连接到我们的物联网平台（mqtt_server）最后发送消息（hello）到物联网平台。我们打开物联网平台选择相应的设备就可以看到我们刚才发送过来的消息了，效果如下图所示：</p><p><img src="https://s1.ax1x.com/2020/04/05/GD1Qvd.gif"></p><h2 id="二、从服务器端订阅消息"><a href="#二、从服务器端订阅消息" class="headerlink" title="二、从服务器端订阅消息"></a>二、从服务器端订阅消息</h2><p><img src="https://s1.ax1x.com/2020/04/02/GGIv2q.jpg"></p><p>在样例二中，通过mqtt平台给光环板发送消息，光环板订阅服务器端发来的消息，然后来做开灯关灯相关操作，演示效果如下：</p><iframe height=498 width=510 src="https://attachment.makeblock.com/1151362/4b4109b0771a11ea9af38dae454cb116">]]></content>
    
    
    <categories>
      
      <category>mqtt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mqtt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【python学习】-循环结构</title>
    <link href="/post/19094.html"/>
    <url>/post/19094.html</url>
    
    <content type="html"><![CDATA[<h1 id="【python学习】-循环结构"><a href="#【python学习】-循环结构" class="headerlink" title="【python学习】-循环结构"></a>【python学习】-循环结构</h1><p>循环结构就是程序中控制某条或某些指令重复执行的结构。在Python中构造循环结构有两种做法，一种是<code>for-in</code>循环，一种是<code>while</code>循环。</p><h3 id="for-in循环"><a href="#for-in循环" class="headerlink" title="for-in循环"></a>for-in循环</h3><p>如果明确的知道循环执行的次数或者要对一个容器进行迭代（后面会讲到），那么我们推荐使用<code>for-in</code>循环，例如下面代码中计算1~100求和的结果（$\displaystyle \sum \limits_{n=1}^{100}n$）。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">用for循环实现1~100求和</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">101</span>):<br>    <span class="hljs-built_in">sum</span> += x<br>print(<span class="hljs-built_in">sum</span>)<br></code></pre></td></tr></table></figure><p>需要说明的是上面代码中的<code>range(1, 101)</code>可以用来构造一个从1到100的范围，当我们把这样一个范围放到<code>for-in</code>循环中，就可以通过前面的循环变量<code>x</code>依次取出从1到100的整数。当然，<code>range</code>的用法非常灵活，下面给出了一个例子：</p><ul><li><code>range(101)</code>：可以用来产生0到100范围的整数，需要注意的是取不到101。</li><li><code>range(1, 101)</code>：可以用来产生1到100范围的整数，相当于前面是闭区间后面是开区间。</li><li><code>range(1, 101, 2)</code>：可以用来产生1到100的奇数，其中2是步长，即每次数值递增的值。</li><li><code>range(100, 0, -2)</code>：可以用来产生100到1的偶数，其中-2是步长，即每次数字递减的值。</li></ul><p>知道了这一点，我们可以用下面的代码来实现1~100之间的偶数求和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">用for循环实现1~100之间的偶数求和</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">101</span>, <span class="hljs-number">2</span>):<br>    <span class="hljs-built_in">sum</span> += x<br>print(<span class="hljs-built_in">sum</span>)<br></code></pre></td></tr></table></figure><p>当然，也可以通过在循环中使用分支结构的方式来实现相同的功能，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">用for循环实现1~100之间的偶数求和</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">101</span>):<br>    <span class="hljs-keyword">if</span> x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">sum</span> += x<br>print(<span class="hljs-built_in">sum</span>)<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：相较于上面直接跳过奇数的做法，下面这种做法很明显并不是很好的选择。</p></blockquote><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>如果要构造不知道具体循环次数的循环结构，我们推荐使用<code>while</code>循环。<code>while</code>循环通过一个能够产生或转换出<code>bool</code>值的表达式来控制循环，表达式的值为<code>True</code>则继续循环；表达式的值为<code>False</code>则结束循环。</p><p>下面我们通过一个“猜数字”的小游戏来看看如何使用<code>while</code>循环。猜数字游戏的规则是：计算机出一个1到100之间的随机数，玩家输入自己猜的数字，计算机给出对应的提示信息（大一点、小一点或猜对了），如果玩家猜中了数字，计算机提示用户一共猜了多少次，游戏结束，否则游戏继续。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">猜数字游戏</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> random<br><br>answer = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>)<br>counter = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    counter += <span class="hljs-number">1</span><br>    number = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入: &#x27;</span>))<br>    <span class="hljs-keyword">if</span> number &lt; answer:<br>        print(<span class="hljs-string">&#x27;大一点&#x27;</span>)<br>    <span class="hljs-keyword">elif</span> number &gt; answer:<br>        print(<span class="hljs-string">&#x27;小一点&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        print(<span class="hljs-string">&#x27;恭喜你猜对了!&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>print(<span class="hljs-string">&#x27;你总共猜了%d次&#x27;</span> % counter)<br><span class="hljs-keyword">if</span> counter &gt; <span class="hljs-number">7</span>:<br>    print(<span class="hljs-string">&#x27;你的智商余额明显不足&#x27;</span>)<br></code></pre></td></tr></table></figure><p>上面的代码中使用了<code>break</code>关键字来提前终止循环，需要注意的是<code>break</code>只能终止它所在的那个循环，这一点在使用嵌套的循环结构（下面会讲到）需要引起注意。除了<code>break</code>之外，还有另一个关键字是<code>continue</code>，它可以用来放弃本次循环后续的代码直接让循环进入下一轮。</p><p>和分支结构一样，循环结构也是可以嵌套的，也就是说在循环中还可以构造循环结构。下面的例子演示了如何通过嵌套的循环来输出一个九九乘法表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输出乘法口诀表(九九表)</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>):<br>        print(<span class="hljs-string">&#x27;%d*%d=%d&#x27;</span> % (i, j, i * j), end=<span class="hljs-string">&#x27;\t&#x27;</span>)<br>    print()<br></code></pre></td></tr></table></figure><h4 id="练习1：输入一个正整数判断是不是素数。"><a href="#练习1：输入一个正整数判断是不是素数。" class="headerlink" title="练习1：输入一个正整数判断是不是素数。"></a>练习1：输入一个正整数判断是不是素数。</h4><blockquote><p><strong>提示</strong>：素数指的是只能被1和自身整除的大于1的整数。</p></blockquote><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输入一个正整数判断它是不是素数</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sqrt<br><br>num = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入一个正整数: &#x27;</span>))<br>end = <span class="hljs-built_in">int</span>(sqrt(num))<br>is_prime = <span class="hljs-literal">True</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, end + <span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> num % x == <span class="hljs-number">0</span>:<br>        is_prime = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">break</span><br><span class="hljs-keyword">if</span> is_prime <span class="hljs-keyword">and</span> num != <span class="hljs-number">1</span>:<br>    print(<span class="hljs-string">&#x27;%d是素数&#x27;</span> % num)<br><span class="hljs-keyword">else</span>:<br>    print(<span class="hljs-string">&#x27;%d不是素数&#x27;</span> % num)<br></code></pre></td></tr></table></figure><h4 id="练习2：输入两个正整数，计算它们的最大公约数和最小公倍数。"><a href="#练习2：输入两个正整数，计算它们的最大公约数和最小公倍数。" class="headerlink" title="练习2：输入两个正整数，计算它们的最大公约数和最小公倍数。"></a>练习2：输入两个正整数，计算它们的最大公约数和最小公倍数。</h4><blockquote><p><strong>提示</strong>：两个数的最大公约数是两个数的公共因子中最大的那个数；两个数的最小公倍数则是能够同时被两个数整除的最小的那个数。</p></blockquote><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输入两个正整数计算它们的最大公约数和最小公倍数</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>x = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;x = &#x27;</span>))<br>y = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;y = &#x27;</span>))<br><span class="hljs-comment"># 如果x大于y就交换x和y的值</span><br><span class="hljs-keyword">if</span> x &gt; y:<br>    <span class="hljs-comment"># 通过下面的操作将y的值赋给x, 将x的值赋给y</span><br>    x, y = y, x<br><span class="hljs-comment"># 从两个数中较的数开始做递减的循环</span><br><span class="hljs-keyword">for</span> factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(x, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> x % factor == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> y % factor == <span class="hljs-number">0</span>:<br>        print(<span class="hljs-string">&#x27;%d和%d的最大公约数是%d&#x27;</span> % (x, y, factor))<br>        print(<span class="hljs-string">&#x27;%d和%d的最小公倍数是%d&#x27;</span> % (x, y, x * y // factor))<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h4 id="练习3：打印如下所示的三角形图案。"><a href="#练习3：打印如下所示的三角形图案。" class="headerlink" title="练习3：打印如下所示的三角形图案。"></a>练习3：打印如下所示的三角形图案。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">打印三角形图案</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">*</span><br><span class="hljs-string">**</span><br><span class="hljs-string">***</span><br><span class="hljs-string">****</span><br><span class="hljs-string">*****</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>row = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入行数: &#x27;</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(row):<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>):<br>        print(<span class="hljs-string">&#x27;*&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    print()<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    *</span><br><span class="hljs-string">   **</span><br><span class="hljs-string">  ***</span><br><span class="hljs-string"> ****</span><br><span class="hljs-string">*****</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(row):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(row):<br>        <span class="hljs-keyword">if</span> j &lt; row - i - <span class="hljs-number">1</span>:<br>            print(<span class="hljs-string">&#x27; &#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            print(<span class="hljs-string">&#x27;*&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    print()<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    *</span><br><span class="hljs-string">   ***</span><br><span class="hljs-string">  *****</span><br><span class="hljs-string"> *******</span><br><span class="hljs-string">*********</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(row):<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(row - i - <span class="hljs-number">1</span>):<br>        print(<span class="hljs-string">&#x27; &#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>):<br>        print(<span class="hljs-string">&#x27;*&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    print()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【python学习】-语言元素</title>
    <link href="/post/9190.html"/>
    <url>/post/9190.html</url>
    
    <content type="html"><![CDATA[<h1 id="【python学习】-语言元素"><a href="#【python学习】-语言元素" class="headerlink" title="【python学习】-语言元素"></a>【python学习】-语言元素</h1><h2 id="变量和类型"><a href="#变量和类型" class="headerlink" title="变量和类型"></a>变量和类型</h2><p>在程序设计中，变量是一种存储数据的载体。计算机中的变量是实际存在的数据或说是存储数据的一块内存空间，变量的值可以被读取和修改，这是所有计算和控制的基础。计算机能处理的数据有很多种类型，除了数值之外还可以处理文本、图形、音频、视频等各种各样的数据，那么不同的数据就需要定义不同的存储类型。Python中的数据类型很多，而且也允许我们自定义新的数据类型（这一点在后面会讲到），我们先介绍几种常用的数据类型。</p><ul><li><p>整型：python中可以处理任意的整数（Python 2.x中有int和long两种类型的整数，但这种区分对Python来说意义不大，因此在Python 3.x中整数只有int这一种了），而且支持二进制（如<code>0b100</code>，换算成十进制是4）、八进制（如<code>0o100</code>，换算成十进制是64）、十进制（<code>100</code>）和十六进制（<code>0x100</code>，换算成十进制是256）的表示法。</p></li><li><p>浮点型：浮点数也就是小数，之所以成为浮点数，是因为按照科学基数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如<code>123.456</code>）之外还支持科学计数法（如<code>1.23456e2</code>）。</p></li><li><p>字符串型：字符串是以单引号或双引号括起来的任意文本，比如：’hello‘和“hello”，字符串还有原始字符串表示法、、字节字符串表示法、Unicode字符串表示法，而且可以书写成多行的形式（用三个单引号或三个双引号开头，三个单引号或三个双引号结尾）。</p></li><li><p>布尔型：布尔值只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>，在Python中，可以直接用<code>True</code>、<code>False</code>表示布尔值（请注意大小写），也可以通过布尔运算计算出来（例如<code>3 &lt; 5</code>会产生布尔值<code>True</code>，而<code>2 == 1</code>会产生布尔值<code>False</code>）。</p></li><li><p>复数型：形如<code>3+5j</code>，跟数学上的复数表示一样，唯一不同的是虚部的<code>i</code>换成了<code>j</code>。实际上，这个类型并不能算作常用类型，大家了解下就可以了。</p></li></ul><h4 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h4><p>  对于每个变量我们需要给它取一个名字，就如同我们每个人都有属于自己的响亮的名字一样。在Python中，变量命名需要遵循以下这些必须遵守硬性规则和强烈建议遵守的非硬性规则。</p><ul><li><p>硬性规则：</p><ul><li>变量名由字母（广义的Unicode字符，不包括特殊字符）、数字和下划线构成，数字不能开头。</li><li>大小写敏感（大写的<code>a</code>和小写的<code>A</code>是两个不同的变量）。</li><li>不要跟关键字（有特殊含义的单词，后面会讲到）和系统保留字（如函数、模块等的名字）冲突。</li></ul></li><li><p>PEP 8要求：</p><ul><li>用小写字母拼写，多个单词用下划线连接。</li><li>受保护的实例属性用单个下划线开头（后面会讲到）。</li><li>私有的实例属性用两个下划线开头（后面会讲到）。</li></ul><p>当然，作为一个专业的程序员，给变量（事实上应该是所有的标识符）命名时做到见名知意也是非常重要的。</p><h4 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h4><p>下面通过几个例子来说明变量的类型和变量使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">使用变量保存数据并进行加减乘除运算</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>a = <span class="hljs-number">321</span><br>b = <span class="hljs-number">12</span><br>print(a + b)    <span class="hljs-comment"># 333</span><br>print(a - b)    <span class="hljs-comment"># 309</span><br>print(a * b)    <span class="hljs-comment"># 3852</span><br>print(a / b)    <span class="hljs-comment"># 26.75</span><br></code></pre></td></tr></table></figure><p>在Python中可以使用<code>type</code>函数对变量的类型进行检查。程序设计中函数的概念跟数学上函数的概念是一致的，数学上的函数相信大家并不陌生，它包括了函数名、自变量和因变量。如果暂时不理解这个概念也不要紧，我们会在后续的章节中专门讲解函数的定义和使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">使用type()检查变量的类型</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>a = <span class="hljs-number">100</span><br>b = <span class="hljs-number">12.345</span><br>c = <span class="hljs-number">1</span> + <span class="hljs-number">5j</span><br>d = <span class="hljs-string">&#x27;hello, world&#x27;</span><br>e = <span class="hljs-literal">True</span><br>print(<span class="hljs-built_in">type</span>(a))    <span class="hljs-comment"># &lt;class &#x27;int&#x27;&gt;</span><br>print(<span class="hljs-built_in">type</span>(b))    <span class="hljs-comment"># &lt;class &#x27;float&#x27;&gt;</span><br>print(<span class="hljs-built_in">type</span>(c))    <span class="hljs-comment"># &lt;class &#x27;complex&#x27;&gt;</span><br>print(<span class="hljs-built_in">type</span>(d))    <span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt;</span><br>print(<span class="hljs-built_in">type</span>(e))    <span class="hljs-comment"># &lt;class &#x27;bool&#x27;&gt;</span><br></code></pre></td></tr></table></figure><p>可以使用Python中内置的函数对变量类型进行转换。</p></li><li><p><code>int()</code>：将一个数值或字符串转换成整数，可以指定进制。</p></li><li><p><code>float()</code>：将一个字符串转换成浮点数。</p></li><li><p><code>str()</code>：将指定的对象转换成字符串形式，可以指定编码。</p></li><li><p><code>chr()</code>：将整数转换成该编码对应的字符串（一个字符）。</p></li><li><p><code>ord()</code>：将字符串（一个字符）转换成对应的编码（整数）。</p><p>下面的代码通过键盘输入两个整数来实现对两个整数的算术运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">使用input()函数获取键盘输入(字符串)</span><br><span class="hljs-string">使用int()函数将输入的字符串转换成整数</span><br><span class="hljs-string">使用print()函数输出带占位符的字符串</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>a = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;a = &#x27;</span>))<br>b = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;b = &#x27;</span>))<br>print(<span class="hljs-string">&#x27;%d + %d = %d&#x27;</span> % (a, b, a + b))<br>print(<span class="hljs-string">&#x27;%d - %d = %d&#x27;</span> % (a, b, a - b))<br>print(<span class="hljs-string">&#x27;%d * %d = %d&#x27;</span> % (a, b, a * b))<br>print(<span class="hljs-string">&#x27;%d / %d = %f&#x27;</span> % (a, b, a / b))<br>print(<span class="hljs-string">&#x27;%d // %d = %d&#x27;</span> % (a, b, a // b))<br>print(<span class="hljs-string">&#x27;%d %% %d = %d&#x27;</span> % (a, b, a % b))<br>print(<span class="hljs-string">&#x27;%d ** %d = %d&#x27;</span> % (a, b, a ** b))<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：上面的print函数中输出的字符串使用了占位符语法，其中<code>%d</code>是整数的占位符，<code>%f</code>是小数的占位符，<code>%%</code>表示百分号（因为百分号代表了占位符，所以带占位符的字符串中要表示百分号必须写成<code>%%</code>），字符串之后的<code>%</code>后面跟的变量值会替换掉占位符然后输出到终端中，运行上面的程序，看看程序执行结果就明白啦。</p></blockquote><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>Python支持多种运算符，下表大致按照优先级从高到低的顺序列出了所有的运算符，运算符的优先级指的是多个运算符同时出现时，先做什么运算然后再做什么运算。除了我们之前已经用过的赋值运算符和算术运算符，我们稍后会陆续讲到其他运算符的使用。</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>[]</code> <code>[:]</code></td><td>下标，切片</td></tr><tr><td><code>**</code></td><td>指数</td></tr><tr><td><code>~</code> <code>+</code> <code>-</code></td><td>按位取反, 正负号</td></tr><tr><td><code>*</code> <code>/</code> <code>%</code> <code>//</code></td><td>乘，除，模，整除</td></tr><tr><td><code>+</code> <code>-</code></td><td>加，减</td></tr><tr><td><code>&gt;&gt;</code> <code>&lt;&lt;</code></td><td>右移，左移</td></tr><tr><td><code>&amp;</code></td><td>按位与</td></tr><tr><td><code>^</code> <code>|</code></td><td>按位异或，按位或</td></tr><tr><td><code>&lt;=</code> <code>&lt;</code> <code>&gt;</code> <code>&gt;=</code></td><td>小于等于，小于，大于，大于等于</td></tr><tr><td><code>==</code> <code>!=</code></td><td>等于，不等于</td></tr><tr><td><code>is</code>  <code>is not</code></td><td>身份运算符</td></tr><tr><td><code>in</code> <code>not in</code></td><td>成员运算符</td></tr><tr><td><code>not</code> <code>or</code> <code>and</code></td><td>逻辑运算符</td></tr><tr><td><code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code> <code>//=</code> <code>**=</code> <code>&amp;=</code> `</td><td>=<code> </code>^=<code> </code>&gt;&gt;=<code> </code>&lt;&lt;=`</td></tr></tbody></table><blockquote><p><strong>说明：</strong> 在实际开发中，如果搞不清楚运算符的优先级，可以使用括号来确保运算的执行顺序。</p></blockquote><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><p>赋值运算符应该是最为常见的运算符，它的作用是将右边的值赋给左边的变量。下面的例子演示了赋值运算符和复合赋值运算符的使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">赋值运算符和复合赋值运算符</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>a = <span class="hljs-number">10</span><br>b = <span class="hljs-number">3</span><br>a += b        <span class="hljs-comment"># 相当于：a = a + b</span><br>a *= a + <span class="hljs-number">2</span>    <span class="hljs-comment"># 相当于：a = a * (a + 2)</span><br>print(a)      <span class="hljs-comment"># 算一下这里会输出什么</span><br></code></pre></td></tr></table></figure><h3 id="比较运算符和逻辑运算符"><a href="#比较运算符和逻辑运算符" class="headerlink" title="比较运算符和逻辑运算符"></a>比较运算符和逻辑运算符</h3><p>比较运算符有的地方也称为关系运算符，包括<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code>，我相信没有什么好解释的，大家一看就能懂，唯一需要提醒的是比较相等用的是<code>==</code>，请注意这个地方是两个等号，因为<code>=</code>是赋值运算符，我们在上面刚刚讲到过，<code>==</code>才是比较相等的比较运算符。比较运算符会产生布尔值，要么是<code>True</code>要么是<code>False</code>。</p><p>逻辑运算符有三个，分别是<code>and</code>、<code>or</code>和<code>not</code>。<code>and</code>字面意思是“而且”，所以<code>and</code>运算符会连接两个布尔值，如果两个布尔值都是<code>True</code>，那么运算的结果就是<code>True</code>；左右两边的布尔值有一个是<code>False</code>，最终的运算结果就是<code>False</code>。相信大家已经想到了，如果<code>and</code>左边的布尔值是<code>False</code>，不管右边的布尔值是什么，最终的结果都是<code>False</code>，所以在做运算的时候右边的值会被跳过（短路处理），这也就意味着在<code>and</code>运算符左边为<code>False</code>的情况下，右边的表达式根本不会执行。<code>or</code>字面意思是“或者”，所以<code>or</code>运算符也会连接两个布尔值，如果两个布尔值有任意一个是<code>True</code>，那么最终的结果就是<code>True</code>。当然，<code>or</code>运算符也是有短路功能的，在它左边的布尔值为<code>True</code>的情况下，右边的表达式根本不会执行。<code>not</code>运算符的后面会跟上一个布尔值，它的作用是得到与该布尔值相反的值，也就是说，后面的布尔值如果是<code>True</code>运算结果就是<code>False</code>，而后面的布尔值如果是<code>False</code>则运算结果就是<code>True</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">比较运算符和逻辑运算符的使用</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>flag0 = <span class="hljs-number">1</span> == <span class="hljs-number">1</span><br>flag1 = <span class="hljs-number">3</span> &gt; <span class="hljs-number">2</span><br>flag2 = <span class="hljs-number">2</span> &lt; <span class="hljs-number">1</span><br>flag3 = flag1 <span class="hljs-keyword">and</span> flag2<br>flag4 = flag1 <span class="hljs-keyword">or</span> flag2<br>flag5 = <span class="hljs-keyword">not</span> (<span class="hljs-number">1</span> != <span class="hljs-number">2</span>)<br>print(<span class="hljs-string">&#x27;flag0 =&#x27;</span>, flag0)    <span class="hljs-comment"># flag0 = True</span><br>print(<span class="hljs-string">&#x27;flag1 =&#x27;</span>, flag1)    <span class="hljs-comment"># flag1 = True</span><br>print(<span class="hljs-string">&#x27;flag2 =&#x27;</span>, flag2)    <span class="hljs-comment"># flag2 = False</span><br>print(<span class="hljs-string">&#x27;flag3 =&#x27;</span>, flag3)    <span class="hljs-comment"># flag3 = False</span><br>print(<span class="hljs-string">&#x27;flag4 =&#x27;</span>, flag4)    <span class="hljs-comment"># flag4 = True</span><br>print(<span class="hljs-string">&#x27;flag5 =&#x27;</span>, flag5)    <span class="hljs-comment"># flag5 = False</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：比较运算符的优先级高于赋值运算符，所以<code>flag0 = 1 == 1</code>先做<code>1 == 1</code>产生布尔值<code>True</code>，再将这个值赋值给变量<code>flag0</code>。<code>print</code>函数可以输出多个值，多个值之间可以用<code>,</code>进行分隔，输出的内容之间默认以空格分开。</p></blockquote><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="练习1：华氏温度转换为摄氏温度。"><a href="#练习1：华氏温度转换为摄氏温度。" class="headerlink" title="练习1：华氏温度转换为摄氏温度。"></a>练习1：华氏温度转换为摄氏温度。</h4><blockquote><p>提示：华氏温度到摄氏温度的转换公式为：$C=(F - 32) \div 1.8$。</p></blockquote><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">将华氏温度转换为摄氏温度</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>f = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入华氏温度: &#x27;</span>))<br>c = (f - <span class="hljs-number">32</span>) / <span class="hljs-number">1.8</span><br>print(<span class="hljs-string">&#x27;%.1f华氏度 = %.1f摄氏度&#x27;</span> % (f, c))<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：在使用<code>print</code>函数输出时，也可以对字符串内容进行格式化处理，上面<code>print</code>函数中的字符串<code>%1.f</code>是一个占位符，稍后会由一个<code>float</code>类型的变量值替换掉它。同理，如果字符串中有<code>%d</code>，后面可以用一个<code>int</code>类型的变量值替换掉它，而<code>%s</code>会被字符串的值替换掉。除了这种格式化字符串的方式外，还可以用下面的方式来格式化字符串，其中<code>&#123;f:.1f&#125;</code>和<code>&#123;c:.1f&#125;</code>可以先看成是<code>&#123;f&#125;</code>和<code>&#123;c&#125;</code>，表示输出时会用变量<code>f</code>和变量<code>c</code>的值替换掉这两个占位符，后面的<code>:.1f</code>表示这是一个浮点数，小数点后保留1位有效数字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">print(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;f:<span class="hljs-number">.1</span>f&#125;</span>华氏度 = <span class="hljs-subst">&#123;c:<span class="hljs-number">.1</span>f&#125;</span>摄氏度&#x27;</span>)<br></code></pre></td></tr></table></figure></blockquote><h4 id="练习2：输入圆的半径计算计算周长和面积。"><a href="#练习2：输入圆的半径计算计算周长和面积。" class="headerlink" title="练习2：输入圆的半径计算计算周长和面积。"></a>练习2：输入圆的半径计算计算周长和面积。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输入半径计算圆的周长和面积</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>radius = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入圆的半径: &#x27;</span>))<br>perimeter = <span class="hljs-number">2</span> * <span class="hljs-number">3.1416</span> * radius<br>area = <span class="hljs-number">3.1416</span> * radius * radius<br>print(<span class="hljs-string">&#x27;周长: %.2f&#x27;</span> % perimeter)<br>print(<span class="hljs-string">&#x27;面积: %.2f&#x27;</span> % area)<br></code></pre></td></tr></table></figure><h4 id="练习3：输入年份判断是不是闰年。"><a href="#练习3：输入年份判断是不是闰年。" class="headerlink" title="练习3：输入年份判断是不是闰年。"></a>练习3：输入年份判断是不是闰年。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输入年份 如果是闰年输出True 否则输出False</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>year = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入年份: &#x27;</span>))<br><span class="hljs-comment"># 如果代码太长写成一行不便于阅读 可以使用\对代码进行折行</span><br>is_leap = year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> \<br>          year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span><br>print(is_leap)<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：比较运算符会产生布尔值，而逻辑运算符<code>and</code>和<code>or</code>会对这些布尔值进行组合，最终也是得到一个布尔值，闰年输出<code>True</code>，平年输出<code>False</code>。</p></blockquote></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01掌控板Blynk——点亮板载RGB灯</title>
    <link href="/post/16365.html"/>
    <url>/post/16365.html</url>
    
    <content type="html"><![CDATA[<h1 id="第一章：掌控板Blynk-——点亮板载RGB灯"><a href="#第一章：掌控板Blynk-——点亮板载RGB灯" class="headerlink" title="第一章：掌控板Blynk ——点亮板载RGB灯"></a>第一章：掌控板Blynk ——点亮板载RGB灯</h1><h2 id="一、认识我们的mpython"><a href="#一、认识我们的mpython" class="headerlink" title="一、认识我们的mpython"></a>一、认识我们的mpython</h2><h3 id="1、什么是mPython？"><a href="#1、什么是mPython？" class="headerlink" title="1、什么是mPython？"></a>1、什么是mPython？</h3><p><strong><em>它是为掌控板而生</em></strong></p><p><strong><em>改变传统Python教学</em></strong></p><p>mPython是一款专用于掌控板的编程教育软件，给掌控板“注入”你想实现的功能，它可以让你从图像化编程入手，进而轻松掌握Python编程语言。<a href="https://mpythonsoftware.readthedocs.io/zh/latest/mPython.html#">具体的详细介绍可以查看官网mPython使用说明文档</a></p><p>这里我就不详细介绍了！</p><h3 id="2、下载mPython"><a href="#2、下载mPython" class="headerlink" title="2、下载mPython"></a>2、下载mPython</h3><p><a href="https://www.labplus.cn/software">点击下载链接</a>选择mPyhton下载即可，如下图所示：</p><p><img src="https://i.loli.net/2019/11/29/gADfyBCtHPaOXKV.png"></p><p>点击我们的下载的mPython软件,傻瓜式安装，一直下一步即可。</p><p><img src="https://i.loli.net/2019/11/29/PN2mGlrKM4ueUsL.png"></p><p>打开我们的mPython,可以看到我们的界面：</p><p><img src="https://i.loli.net/2019/11/29/DlToqvxcp2X3wGJ.png"></p><h2 id="二、认识我们的Blynk"><a href="#二、认识我们的Blynk" class="headerlink" title="二、认识我们的Blynk"></a>二、认识我们的Blynk</h2><h3 id="1、什么是Blynk？"><a href="#1、什么是Blynk？" class="headerlink" title="1、什么是Blynk？"></a>1、什么是Blynk？</h3><p>Blynk是一个与硬件无关的物联网平台，具有可定制的移动应用程序、私有云、规则引擎和设备管理分析仪表盘。</p><p>在blynk平台中，通过可视化拖拽，你就能创建一个可发布到Google play或App Store的应用。blynk开源了若干项目，开源地址在 github.com/blynkkk，如果担心自己的数据安全，可以自行搭建server。blynk默认支持400多款硬件，其中很多是开源硬件，所有的硬件驱动，blynk都开源出来了！</p><p>blynk几乎一条龙服务，帮助你构建自己的物联网产品。</p><h3 id="2、安装并配置我们的Blynk程序"><a href="#2、安装并配置我们的Blynk程序" class="headerlink" title="2、安装并配置我们的Blynk程序"></a>2、安装并配置我们的Blynk程序</h3><p>安卓用户可以点击下方链接进行下载，（链接: <a href="https://pan.baidu.com/s/1GHZeUCZvjnzntSsdZmd3Hw">https://pan.baidu.com/s/1GHZeUCZvjnzntSsdZmd3Hw</a> 提取码: ewcs ），iOS用户可以在App Store 中搜索Blynk并安装。</p><p>我们现在打开blynk点击创建一个新的账号（Create New Account）如下图所示：</p><p><img src="https://i.loli.net/2019/11/29/hnyzI4dC73giZc9.png"></p><p>输入自己的邮箱(Email)和密码(Password),如下图所示：</p><p><img src="https://i.loli.net/2019/11/29/4R5PpNUw9SiTugl.png"></p><p>由于这个app是国外开发的默认是国外服务器（网络状态与电池能力不是很OK）！所以我们选择国内的服务器（116.62.49.166 端口：9443）如下图所示：</p><p><img src="https://i.loli.net/2019/11/29/H4Aw2ZKoVxBYDRE.png"></p><p>点击登录（Sign up）就可以登录我们的主界面啦！</p><p><img src="https://i.loli.net/2019/11/29/RwZpdKP4e57F2vo.png"></p><h2 id="三、新建一个项目（new-Project"><a href="#三、新建一个项目（new-Project" class="headerlink" title="三、新建一个项目（new Project)"></a>三、新建一个项目（new Project)</h2><p>我们在blynk app注册好我们的账号后，点击新建项目（New Project）如下图所示：</p><p><img src="https://i.loli.net/2019/11/29/QaCt9JwNlhkr6oI.png"></p><p>选择主控板（choose Device）:ESP32 Dev Board</p><p><img src="https://i.loli.net/2019/11/29/qPj54aMXfuxh7k6.png"></p><p>选择连接类型（connection type）:这里面有有六种连接方式，默认是WiFi，根据自己需求选择相应的连接方式这里我们的掌控板选择的是WiFi连接：</p><p><img src="https://i.loli.net/2019/11/29/f4UFuJ9cdeans1g.png"></p><p>主题（theme）：黑色（dark）根据个人喜好选择自己喜欢的主题。</p><p>点击创建（Create）我们的项目就创建好了，我们的blynk服务器就会发一条授权码给我们的邮箱。这个时候我们登陆我们的邮箱就可以看到有一封新的邮件：</p><p><img src="https://i.loli.net/2019/11/29/torpSQhW612Txab.png"></p><p>这个时候我们点击查看我们邮件就可以看到第一条的授权码，我们复制一下（后面会有用到的）：</p><p><img src="https://i.loli.net/2019/11/29/tySvj7lBmEgKOZp.png"></p><h2 id="四、创建设备"><a href="#四、创建设备" class="headerlink" title="四、创建设备"></a>四、创建设备</h2><p>这个时候我们进入我们的点亮板载RGB灯上面有一栏菜单栏分别是：退出，项目名称，设置，添加组件，运行项目。具体如下图所示：</p><p><img src="https://i.loli.net/2019/11/29/UwiCIZ8VWQhJLdm.png"></p><p>把我们之前邮箱的授权码手机复制一下，然后点击菜单栏中的设置，选择auth tokens中的Copyall:</p><p><img src="https://i.loli.net/2019/11/29/T7E6mw8iRDtZhPu.png"></p><p>我们点击菜单栏中的添加组件，可以看到有很多的组件，我们选择按钮（Button）组件。（ps:这里每一个组件都是需要能量的，因为我们用力国内的服务器，所以会有20000的电量，如果选择官方的只有2000电量。)</p><p><img src="https://i.loli.net/2019/11/29/GB1m2i63ovJRnkM.png"></p><p>选择按钮后，我们的项目界面中就会出现一个按钮的组件，如下图：</p><p><img src="https://i.loli.net/2019/11/29/E8UWYIahGsOrmw1.png"></p><p>这个时候我们点击一下我们的按钮组件，就可以按钮组件进行编辑可以设置button的名称：开关，输出方式（output）：选择虚拟引脚VO，模式（MODE）选择（switch）具体操作如下图所示：</p><p><img src="https://i.loli.net/2019/11/29/TxFmAKjGnlevhIf.png"></p><p>这个我们的按钮组件就设置完成啦，点击运行就OK啦！</p><h2 id="五、程序编写"><a href="#五、程序编写" class="headerlink" title="五、程序编写"></a>五、程序编写</h2><p>现在我们来编写一下我们的m程序，首先需要添加扩展–&gt;应用扩展–&gt;Blynk</p><p><img src="https://i.loli.net/2019/11/29/jEaMbhl6vywdOpo.png"></p><p>在WiFi指令中选择连接wifi名称积木块，这个积木块可以让我们的掌控板连接到我们的WiFi。</p><p><img src="https://i.loli.net/2019/11/29/wSBeT5No8l1fs2I.png"></p><p>在扩展指令选择我们新添加的blynk指令中的设置和虚拟管教等积木块。</p><p>Blynk服务器填写：116.62.49.166，端口：8080（不需要更改）。授权码写我们邮箱中的授权码。</p><p><img src="https://s1.ax1x.com/2020/03/31/GQy2pn.png" alt="程序代码"></p><p>上传我们的程序到我们的掌控板上，我们控制台也会显示我们的WiFi、Blynk连接情况</p><p><img src="https://s1.ax1x.com/2020/03/31/GQyvnK.png" alt="上传步骤"></p><h1 id="六、实验效果"><a href="#六、实验效果" class="headerlink" title="六、实验效果"></a>六、实验效果</h1><p>1、按一下我们的blynk button,掌控板灯亮。</p><p><img src="https://s1.ax1x.com/2020/03/31/GQcsRs.png" alt="实验效果"></p><p>2、再一次按blynk中的button，掌控板灯灭</p><p><img src="https://s1.ax1x.com/2020/03/31/GQgSWd.png" alt="实验效果二"></p>]]></content>
    
    
    <categories>
      
      <category>掌控板</category>
      
      <category>Blynk</category>
      
    </categories>
    
    
    <tags>
      
      <tag>掌控板</tag>
      
      <tag>Blynk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>00-掌控板Blynk-——写在前面的话</title>
    <link href="/post/11662.html"/>
    <url>/post/11662.html</url>
    
    <content type="html"><![CDATA[<h1 id="00掌控板Blynk——写在前面的话"><a href="#00掌控板Blynk——写在前面的话" class="headerlink" title="00掌控板Blynk——写在前面的话"></a>00掌控板Blynk——写在前面的话</h1><h2 id="写作原由"><a href="#写作原由" class="headerlink" title="写作原由"></a>写作原由</h2><p>大学毕业半年，自己接触创客这个圈子也有大半年的时间了。在这短短的半年时间内，自己感触也是颇多：从一开始用arduino点亮一盏led学习打开了我进入创客的大门，慢慢自己也在开始接触了很多的开源硬件：树莓派、microbit、esp8266、esp32再到后来的掌控板。创客圈子里的东西能玩的太多了，每天自己都要保持一个学习的心，如果你哪天不学习了，随着技术的发展慢慢你也被创客圈子所抛弃。</p><p>一开始接触物联网还是通过dfrobot的 obloq物联网传感器通过mqtt协议连接到easy iot物联网平台，通过easy iot 物联网平台收发各种传感器的数据。在有一次带学生参加第五届全国青少年创意编程与智能设计大赛中，制作了一个智能信箱，自己想用手机端来查看我们的数据，可惜没有相关app,自己又要用appinventor做一智能信箱的手机端。发现好费事。</p><p>知道有一天看到了裘炯涛和陈众贤（铁熊）老师们的《物联网，So Easy！》这才茅塞顿开。这本是围绕着ESP8266与Blynk物联网平台所讲授的，用mixly图形化编程。对于小朋友们来说还算是很好入门教程。</p><p><img src="https://i.loli.net/2019/11/28/j7kAtZ9b1Nu8vhs.jpg" alt="物联网 So Easy"></p><p>但是书中的物联网开发板还需要购买，自己尝试着用其他的板子来代替它，一开始用的是乐鑫esp8266(nodeMCU)编程比较复杂，对学生来说入手来说还是比较困难的，于是自己又尝试着用其他的开发板，最终找了它！**——掌控板 **</p><p><img src="https://mpythonsoftware.readthedocs.io/zh/latest/_images/%E6%8E%8C%E6%8E%A7-%E5%8A%A8%E6%80%81.gif"></p><p><strong>什么是掌控板呢？它可以做什么呢？大家可以下面的这个视屏介绍，或许对它有一点的了解！</strong></p><p><video id="video" controls="" preload="none" poster=""> <source id="mp4" src="https://cdn.makeymonkey.com/labplus/handPy.mp4" type="video/mp4"> </video></p><p><img src="https://i.loli.net/2019/11/28/EjqGCpw64FAdSsJ.png"></p><p>因为它内置的esp32芯片，以及mpyton平台的加持，让我们用掌控板做物联网开发就如行云流水般。</p><p>在接下来的教学中，我会结合裘老师的书《物联网So easy》和掌控板带领大家一起开启万物互联的大门。</p><p><em>Are you ready ?</em> </p><p><em>Let’s go!</em></p><p>​                                                                                                                    时间：2019-11-28</p><p>​                                                                                                                    tony书</p>]]></content>
    
    
    <categories>
      
      <category>掌控板</category>
      
      <category>Blynk</category>
      
    </categories>
    
    
    <tags>
      
      <tag>掌控板</tag>
      
      <tag>Blynk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lesson 01 --基础知识驱动安装及安装</title>
    <link href="/post/26358.html"/>
    <url>/post/26358.html</url>
    
    <content type="html"><![CDATA[<h1 id="什么是arduino？"><a href="#什么是arduino？" class="headerlink" title="什么是arduino？"></a>什么是arduino？</h1><p>Arduino是一款便捷灵活、方便上手的开源电子原型平台。包含硬件（各种型号的Arduino板）和软件（Arduino IDE)。由一个欧洲开发团队于2005年冬季开发。其成员包括Massimo Banzi、David Cuartielles、Tom Igoe、Gianluca Martino、David Mellis和Nicholas Zambetti等。<br>它构建于开放原始码simple I/O介面版，并且具有使用类似Java、C语言的Processing/Wiring开发环境。主要包含两个的部分：硬件部分是可以用来做电路连接的Arduino电路板；另外一个则是Arduino IDE，你的计算机中的程序开发环境。你只要在IDE中编写程序代码，将程序上传到Arduino电路板后，程序便会告诉Arduino电路板要做些什么了。</p><h1 id="我们可以用arduino做什么？"><a href="#我们可以用arduino做什么？" class="headerlink" title="我们可以用arduino做什么？"></a>我们可以用arduino做什么？</h1><p>可以快速使用Arduino与Adobe Flash, Processing, Max/MSP, Pure Data, SuperCollider等软件结合，作出互动作品。 Arduino可以使用现有的电子元件例如开关或者传感器或者其他控制器件、LED、步进马达或其他输出装置。 Arduino也可以独立运行，并与软件进行交互，例如： Macromedia Flash, Processing, Max/MSP, Pure Data, VVVV或其他互动软件。 Arduino的IDE界面基于开放源代码，可以免费下载使用，开发出更多令人惊艳的互动作品。</p><h1 id="初次使用Arduino"><a href="#初次使用Arduino" class="headerlink" title="初次使用Arduino"></a>初次使用Arduino</h1><h2 id="STEP-1：-下载Arduino-IDE"><a href="#STEP-1：-下载Arduino-IDE" class="headerlink" title="STEP 1： 下载Arduino IDE"></a>STEP 1： 下载Arduino IDE</h2><p>打开网页输入网址<a href="http://arduino.cc/en/Main/Software">http://arduino.cc/en/Main/Software</a></p><p>Arduino IDE老版本下载链接：<a href="http://arduino.cc/en/Main/OldSoftwareReleases">http://arduino.cc/en/Main/OldSoftwareReleases</a></p><p>进入到页面后，找到下图显示部分<br>![avator]{}</p>]]></content>
    
    
    <categories>
      
      <category>Arduino基础入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Arduino</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何把自己的项目上传到GitHub上去</title>
    <link href="/post/9705.html"/>
    <url>/post/9705.html</url>
    
    <content type="html"><![CDATA[<h1 id="如何把自己的项目上传到GitHub上去"><a href="#如何把自己的项目上传到GitHub上去" class="headerlink" title="如何把自己的项目上传到GitHub上去"></a>如何把自己的项目上传到GitHub上去</h1><p>首先呢自己要有一个github账号！GitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。点击这个网址 <a href="http://www.github.com/">www.github.com</a> 就这可以注册啦！界面如下：<br><img src="http://plvbo5cha.bkt.clouddn.com/image/git/00.png" alt="avator"><br>注册完成后，登录自己的账号！选择屏幕右上方的“加号”按钮-new repository<br><img src="http://plvbo5cha.bkt.clouddn.com/image/git/0.png" alt="avator"><br>接下开始创建一个项目库名称，描述等<br><img src="http://plvbo5cha.bkt.clouddn.com/image/git/01.png" alt="avator"><br>创建完成之后，下面红框中的网址要记住，在后面上传代码的时候需要使用<br><img src="http://plvbo5cha.bkt.clouddn.com/image/git/000.png" alt="avator"><br>接下来，我们需要先下载Git，这里最好下载最新版本的Git，这里附上我下载的Git2.6.2的网址：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a> ，安装时如果没有特殊需求，一直下一步就可以了，安装完成之后,在自己的项目文件右击打开Git Bash<br><img src="http://plvbo5cha.bkt.clouddn.com/image/git/02.png" alt="avator"><br>第一步在终端输入<code>echo &quot;# Bank-Automated-Drawing-System&quot; &gt;&gt; README.md</code>创建一个README.md文件，并把项目描述写入README.md文件去<br><img src="http://plvbo5cha.bkt.clouddn.com/image/git/1.png" alt="avator"><br>第二步在终端上输入<br><code>git init</code>如下图所示，这个意思是在当前项目的目录中生成本地的git管理（会发现在当前目录下多了一个.git文件夹）<br><img src="http://plvbo5cha.bkt.clouddn.com/image/git/2.png" alt="avator"><br>第三步输入<code>git add README.md</code>这句话的意思是说把当前文件夹下的README.md都上传到git库中去，如果要把所有文件上传到git库中可以把<code>README.md</code>换成<code>.</code><br><img src="http://plvbo5cha.bkt.clouddn.com/image/git/4.png" alt="avator"><br>第四步：输入<code>git commit -m &quot;first commit&quot;</code>“first commit”表示你对这次提交的注释,可以根据自己的需求更改。<br>这里如果出现以下内容，则需要你输入自己的账号或名字，根据上面的提示来写自己的邮箱和密码</p><p><img src="http://plvbo5cha.bkt.clouddn.com/image/git/5.png" alt="avator"><br>第五步：输入：<code>git remote add origin https://自己的仓库url地址（上面有说到）</code>将本地的仓库关联到github上<br><img src="http://plvbo5cha.bkt.clouddn.com/image/git/7.png" alt="avator"><br>第六步：输入<code>git push -u origin master</code>这个意思是说：把代码上传到github仓库<br><img src="http://plvbo5cha.bkt.clouddn.com/image/git/6.png" alt="avator"><br>最后我们在刷新我们的github库看自己的项目代码有没有上传成功！<br><img src="http://plvbo5cha.bkt.clouddn.com/8.png" alt="avator"><br>我的已经显示上传成功了，是不是很简单呢，赶快行动起来，上传自己的第一个GitHub项目库把！</p>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu18.04在终端下安装jdk</title>
    <link href="/post/32394.html"/>
    <url>/post/32394.html</url>
    
    <content type="html"><![CDATA[<h1 id="如何在Ubuntu18-04用终端命令行安装jdk8"><a href="#如何在Ubuntu18-04用终端命令行安装jdk8" class="headerlink" title="如何在Ubuntu18.04用终端命令行安装jdk8"></a>如何在Ubuntu18.04用终端命令行安装jdk8</h1><p>今天在网上百度Ubuntu如何安装jdk时发现步骤繁琐，然后看来有用ppa库安装的发现安装简单，没有那么多繁琐的步骤。下面就让我开始吧：</p><h2 id="使用下面的命令添加ppa库，按-enter-继续"><a href="#使用下面的命令添加ppa库，按-enter-继续" class="headerlink" title="使用下面的命令添加ppa库，按[enter]继续"></a>使用下面的命令添加ppa库，按[enter]继续</h2><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">sudo<span class="hljs-built_in"> add-apt-repository </span>ppa:webupd8team/java<br></code></pre></td></tr></table></figure><p><img src="http://plvbo5cha.bkt.clouddn.com//image/linux/1.png" alt="avator">  </p><h1 id="输入下面的命令接下来我们更新一下"><a href="#输入下面的命令接下来我们更新一下" class="headerlink" title="输入下面的命令接下来我们更新一下"></a>输入下面的命令接下来我们更新一下</h1><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sudo apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">update</span><br></code></pre></td></tr></table></figure><p><img src="http://plvbo5cha.bkt.clouddn.com//image/linux/2.png" alt="avator">  </p><h1 id="现在输入下面的命令就安装软件吧，如果跳出窗口就按确定（yes-就可以了-我们这边显示安装过了就不演示了"><a href="#现在输入下面的命令就安装软件吧，如果跳出窗口就按确定（yes-就可以了-我们这边显示安装过了就不演示了" class="headerlink" title="现在输入下面的命令就安装软件吧，如果跳出窗口就按确定（yes)就可以了.我们这边显示安装过了就不演示了"></a>现在输入下面的命令就安装软件吧，如果跳出窗口就按确定（yes)就可以了.我们这边显示安装过了就不演示了</h1>   <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> install oracle-java8-installer<br></code></pre></td></tr></table></figure><p><img src="http://plvbo5cha.bkt.clouddn.com//image/linux/3.png" alt="avatoer"></p><h2 id="现在我们输入下面的命令看是否安装成功"><a href="#现在我们输入下面的命令看是否安装成功" class="headerlink" title="现在我们输入下面的命令看是否安装成功"></a>现在我们输入下面的命令看是否安装成功</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">java -<span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p><img src="http://plvbo5cha.bkt.clouddn.com//image/linux/4.png" alt="avatoer"><br>大功告成了，有没有很简单啊！</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用python实现发送邮件</title>
    <link href="/post/16250.html"/>
    <url>/post/16250.html</url>
    
    <content type="html"><![CDATA[<h1 id="利用python实现发送邮件"><a href="#利用python实现发送邮件" class="headerlink" title="利用python实现发送邮件"></a>利用python实现发送邮件</h1><p>今天跟着视频学了一个小的知识点，如何利用python写一个小程序实现自动发送邮件。<br>首先我们需要有一个163邮箱（什么邮箱都可以）然后我们登录自己的邮箱，点击设置-&gt;POP3/SMTP/IMAP出现下图：<br><img src="http://plvbo5cha.bkt.clouddn.com/image/sendMail/1.png" alt="avater"><br>默认画红框里的选项是没有勾选上的，这就要我们选择客户端授权密码–》开启如下图<br><img src="http://plvbo5cha.bkt.clouddn.com/image/sendMail/2.png" alt="avater"><br>我这边可以开启了，如果点击开启时，会跳出这个窗口<br><img src="http://plvbo5cha.bkt.clouddn.com/image/sendMail/3.png" alt="avater"><br>然后发送短信设置自己的授权密码（！注意：不能和自己的登录密码一致）<br>再回到我们的 POP3/SMTP/IMAP页面<br><img src="http://plvbo5cha.bkt.clouddn.com/image/sendMail/5.png" alt="avater"><br>我们等等会用到图中划线的部分<br><em>前期准备工作已经好了下面就让我们开始写代码吧</em><br>首先我们要<br>导入一个发邮件的库</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">import</span> smtplib<br></code></pre></td></tr></table></figure><p>邮箱文本库</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> email.mime.text <span class="hljs-keyword">import</span> MIMEText<br></code></pre></td></tr></table></figure><p>然后配置自己的SMTP服务器,这里我们用的是163的SMIP服务，如果你们用其他的邮箱的SMTP服务器也是可以的</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">SMTPServer</span> =<span class="hljs-string">&quot;smtp.163.com&quot;</span><br></code></pre></td></tr></table></figure><p>接着写发送邮箱的地址，也就是我们自己的163邮箱账号</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">Sender</span> = <span class="hljs-string">&quot;hockel@163.com&quot;</span><br></code></pre></td></tr></table></figure><p>再写发送者邮箱的密码，也就是我们刚才配置好的授权邮箱密码</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">passwd</span> = <span class="hljs-string">&quot;123456a&quot;</span><br></code></pre></td></tr></table></figure><p>我们在设置自己要发送的邮件的内容，这里我就随便输入了一个了。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">message</span> = <span class="hljs-string">&quot;hockel is a good men &quot;</span><br></code></pre></td></tr></table></figure><p>然后我们要把我们发送的邮件内容转成邮件文本，这里我们要用了开头导入的邮件文本库MIMEText</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">msg</span> = MIMEText(message)<br></code></pre></td></tr></table></figure><p>我们可以给我发送邮件设置一个标题，操作如下。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">msg[<span class="hljs-string">&quot;Subject&quot;</span>] = <span class="hljs-string">&quot;来自帅哥的问候&quot;</span><br></code></pre></td></tr></table></figure><p>创建SMTP服务器smtplib.SMTP(SMTP服务, 端口号)</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">mailServer</span> = smtplib.SMTP(SMTPServer, <span class="hljs-number">25</span>)<br></code></pre></td></tr></table></figure><p>写登录邮箱login(邮箱账户，授权密码)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">mailServer</span><span class="hljs-selector-class">.login</span>(<span class="hljs-selector-tag">Sender</span>, <span class="hljs-selector-tag">passwd</span>)<br></code></pre></td></tr></table></figure><p>发送邮件的代码sendmail(发送者，接受者（这里有列表，可以有多人接受者），msg：发送消息：邮件内容。一般是msg.as_string():as_string()是将msg(MIMEText对象或者MIMEMultipart对象)变为str。</p><p>)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">mailServer</span><span class="hljs-selector-class">.sendmail</span>(<span class="hljs-selector-tag">Sender</span>, <span class="hljs-selector-attr">[<span class="hljs-string">&quot;837316354@qq.com&quot;</span>]</span>,<span class="hljs-selector-tag">msg</span><span class="hljs-selector-class">.as_string</span>())<br></code></pre></td></tr></table></figure><p>退出邮箱</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">mailServer.<span class="hljs-keyword">quit</span>()<br></code></pre></td></tr></table></figure><p>下面就是见证奇迹的时刻了，我们运行一下程序，然后打开接受者的邮箱如下如<br><img src="http://plvbo5cha.bkt.clouddn.com/image/sendMail/4.png" alt="avater"><br>发送邮箱的具体代码如下，欢迎讨论：</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># 发邮件的库</span><br>import smtplib<br><span class="hljs-meta">#邮件文本</span><br>from email.mime.text import MIMEText<br><br><span class="hljs-meta"># smtp服务器</span><br>SMTPServer =<span class="hljs-string">&quot;smtp.163.com&quot;</span><br><br><span class="hljs-meta"># 发邮件的地址</span><br>Sender = <span class="hljs-string">&quot;自己的邮箱地址&quot;</span><br><br><span class="hljs-meta">#发送者邮箱的密码</span><br>passwd = <span class="hljs-string">&quot;123456a&quot;</span><br><br><span class="hljs-meta"># 设置发送的内容</span><br>message = <span class="hljs-string">&quot;hockel is a good men &quot;</span><br><br><span class="hljs-meta"># 转换成邮件文本</span><br>msg = MIMEText(message)<br><br><span class="hljs-meta"># 标题</span><br>msg[<span class="hljs-string">&quot;Subject&quot;</span>] = <span class="hljs-string">&quot;来自帅哥的问候&quot;</span><br><br><span class="hljs-meta">#发送者</span><br>msg[<span class="hljs-string">&quot;From&quot;</span>] = Sender<br><br><span class="hljs-meta">#    创建SMTP服务器       服务器    端口号</span><br>mailServer = smtplib.SMTP(SMTPServer, <span class="hljs-number">25</span>)<br><br><span class="hljs-meta">#登录邮箱</span><br>mailServer.login(Sender, passwd)<br><br><span class="hljs-meta"># 发送邮件</span><br><span class="hljs-keyword">for</span> x in range(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>):<br>    mailServer.sendmail(Sender, [<span class="hljs-string">&quot;837316354@qq.com&quot;</span>],msg.as_string())<br>    x += <span class="hljs-number">1</span><br><span class="hljs-meta"># 退出邮箱</span><br>mailServer.quit()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python对xlsx文件的一个测试题目</title>
    <link href="/post/11082.html"/>
    <url>/post/11082.html</url>
    
    <content type="html"><![CDATA[<h1 id="python对xlsx文件的一个测试题目的操作"><a href="#python对xlsx文件的一个测试题目的操作" class="headerlink" title="python对xlsx文件的一个测试题目的操作"></a>python对xlsx文件的一个测试题目的操作</h1><p>说来也偶然今天打开邮箱的时候发现上海某家公司的HR给我发了一个招聘测试题目，邮件内容如下：</p><blockquote><p>你好,<br>感谢应聘我司(上海仑动科技有限公司)的开发工程师职位。<br>由于申请人数比较多，我们希望你能参与一个技术测试来帮助我们选取最合适的候选人。<br>如果你愿意参加此次技术测试，请看以下横线中的要求<br>准备工作: 请下载安装免费的WPS 2019或者2016版的Office软件，保存附件中的开发测试.xlsx文件到你本地电脑。<br>注意我们此次测试只允许用WPS, 不接受使用微软的Office软件所做出的结果!<br>程序要求: 可以使用任何你熟悉的开发语言，将xlsx文件用WPS office文件打开后，接着运行你的程序，程序会在A1单元格填入“测试”两字，接着将读取B1单元格里的值，再拷贝C1单元格中。</p></blockquote><p>其实吧，自己现阶段还没有学到这里，正好今天有这样的一会就来来练手吧！说不多少上代码：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">@File  : test1.py</span><br><span class="hljs-string">@Author: Hocker</span><br><span class="hljs-string">@Date  : 2019/1/23 22:46</span><br><span class="hljs-string">@Emial :hockel@foxmail.com</span><br><span class="hljs-string">&#x27;</span><span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">from</span> openpyxl import load_workbook<br><br><span class="hljs-comment">#打开一个workbook</span><br>try:<br>    wb = load_workbook(<span class="hljs-attribute">filename</span>=<span class="hljs-string">&quot;开发测试.xlsx&quot;</span>)<br>finally:<br>    pass<br><span class="hljs-comment">#获取当前活跃的worksheet,默认就是第一个worksheet</span><br>ws = wb.active<br><span class="hljs-comment">#设置单元格的值，A1赋值 测试</span><br>ws.cell(<span class="hljs-attribute">row</span>=1, <span class="hljs-attribute">column</span>=1).value = <span class="hljs-string">&quot;测试&quot;</span><br><span class="hljs-comment">#获取表格所有行和列，两者都是可迭代的</span><br>rows = ws.rows<br>columns = ws.columns<br><span class="hljs-comment">#迭代所有的行</span><br><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> rows:<br>    line = [col.value <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> row]<br>    <span class="hljs-builtin-name">print</span>(line)<br><span class="hljs-comment">#通过坐标读取值</span><br><span class="hljs-builtin-name">print</span>(ws.cell(<span class="hljs-attribute">row</span>=1,column=2).value)<br><br>ws.cell(<span class="hljs-attribute">row</span>=1,column=3).value = ws.cell(<span class="hljs-attribute">row</span>=1, <span class="hljs-attribute">column</span>=2).value<br><br>wb.save(<span class="hljs-attribute">filename</span>=<span class="hljs-string">&quot;开发测试.xlsx&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>一开始打开xlsx文件事这样的<br>|  A |  B  |  C |<br>| :- | :-: | -: |<br>|    | 123 |    |</p><p>运行结果如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">[<span class="hljs-string">&#x27;测试&#x27;</span>, <span class="hljs-number">123</span>, <span class="hljs-number">123</span>]<br><span class="hljs-number">123</span><br><br>Process finished with <span class="hljs-keyword">exit</span> code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>然后你会我们在点击xlsx文件显示<br>| A  |  B  | C |<br>| :- | :-: | -:|<br>|测试| 123 |123|<br>通过自己的自学，终于把这个题目给做出来了，顿时增加自己的学习python的信心！路漫漫其修远兮，吾将上下而求索。</p>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python新手常见错误和异常</title>
    <link href="/post/42637.html"/>
    <url>/post/42637.html</url>
    
    <content type="html"><![CDATA[<h1 id="python新手常见的错误和异常"><a href="#python新手常见的错误和异常" class="headerlink" title="python新手常见的错误和异常"></a>python新手常见的错误和异常</h1><p>在python编程中，新手最常见的错入和异常如下</p><h2 id="1-缺少冒号引起的错误"><a href="#1-缺少冒号引起的错误" class="headerlink" title="1.缺少冒号引起的错误"></a>1.缺少冒号引起的错误</h2><p>在if,elif,for,while,class,def声明末尾需要添加冒号（：），如果忘记添加，将会提示：“SyntaxError: invalid syntax”语法错误。例如：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stata">&gt;&gt;&gt; <span class="hljs-keyword">if</span> x &gt; 3<br>            <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;x &gt; 3 is ture&quot;</span>)<br>  <span class="hljs-keyword">File</span> <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, <span class="hljs-keyword">line</span> 2<br>    <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;x &gt; 3 is ture&quot;</span>)<br>        ^<br>SyntaxError: invalid <span class="hljs-keyword">syntax</span><br></code></pre></td></tr></table></figure><h2 id="2-将赋值运算符（-）和比较运算符（-）混淆"><a href="#2-将赋值运算符（-）和比较运算符（-）混淆" class="headerlink" title="2.将赋值运算符（=）和比较运算符（==）混淆"></a>2.将赋值运算符（=）和比较运算符（==）混淆</h2><p>如果误将=号用作==号，将会提示“SyntaxError: invalid syntax”语法错误，列如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&gt;&gt;&gt; <span class="hljs-keyword">if</span> x = <span class="hljs-number">3</span>:<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> x = <span class="hljs-number">3</span>:<br>         ^<br><span class="hljs-built_in">SyntaxError</span>: invalid syntax<br></code></pre></td></tr></table></figure><h2 id="3-代码结构缩进错误"><a href="#3-代码结构缩进错误" class="headerlink" title="3.代码结构缩进错误"></a>3.代码结构缩进错误</h2><p>这是比较常见的错误。当代码结构的缩进不正确时，常常会提示错误信息如：IndentationError: expected an indented block 例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>x = <span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">3</span> :<br><span class="hljs-meta">... </span>print(<span class="hljs-string">&quot; x &gt; 3 is ture&quot;</span>)<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">2</span><br>    print(<span class="hljs-string">&quot; x &gt; 3 is ture&quot;</span>)<br>        ^<br>IndentationError: expected an indented block<br></code></pre></td></tr></table></figure><h2 id="4-修改元组和字符串的值报错"><a href="#4-修改元组和字符串的值报错" class="headerlink" title="4.修改元组和字符串的值报错"></a>4.修改元组和字符串的值报错</h2><p>元组和字符串的值是不能修改的，如果修改他们的元素值将会提示错误信息。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>tup1 = (<span class="hljs-number">12</span>,<span class="hljs-number">13</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment">#以下修改元组元素操作是非法的</span><br><span class="hljs-meta">... </span>tup1[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">2</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>TypeError: <span class="hljs-string">&#x27;tuple&#x27;</span> <span class="hljs-built_in">object</span> does <span class="hljs-keyword">not</span> support item assignment<br></code></pre></td></tr></table></figure><h2 id="5-连接字符串和非字符串"><a href="#5-连接字符串和非字符串" class="headerlink" title="5.连接字符串和非字符串"></a>5.连接字符串和非字符串</h2><p>如果将字符串和非字符串连接，将会提示错误“TypeError: can only concatenate str (not “int”) to str”</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim">&gt;&gt;&gt; s =  <span class="hljs-string">&quot;I love Pyhton&quot;</span><br>&gt;&gt;&gt; <span class="hljs-keyword">m</span> = <span class="hljs-number">18</span><br>&gt;&gt;&gt; <span class="hljs-keyword">print</span>(s + <span class="hljs-keyword">m</span>)<br>Traceback (most recent <span class="hljs-keyword">call</span> <span class="hljs-keyword">last</span>):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, <span class="hljs-built_in">line</span> <span class="hljs-number">1</span>, in <span class="hljs-symbol">&lt;module&gt;</span><br>TypeError: can <span class="hljs-keyword">only</span> concatenate str (not <span class="hljs-string">&quot;int&quot;</span>) <span class="hljs-keyword">to</span> str<br></code></pre></td></tr></table></figure><h2 id="6-在字符串首尾忘记加引号"><a href="#6-在字符串首尾忘记加引号" class="headerlink" title="6.在字符串首尾忘记加引号"></a>6.在字符串首尾忘记加引号</h2><p>字符串的首尾必须添加引号，如果没有添加，或者没有成对出现，则会提示错误“SyntaxError: EOL while scanning string literal”例如：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">&gt;&gt;&gt; <span class="hljs-keyword">print</span>(<span class="hljs-comment">&quot;I love Python)</span><br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, <span class="hljs-built_in">line</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">print</span>(<span class="hljs-comment">&quot;I love Python)</span><br>                        ^<br>SyntaxError: EOL <span class="hljs-keyword">while</span> scanning <span class="hljs-built_in">string</span> literal<br></code></pre></td></tr></table></figure><h2 id="7-变量或者函数名拼写错误"><a href="#7-变量或者函数名拼写错误" class="headerlink" title="7.变量或者函数名拼写错误"></a>7.变量或者函数名拼写错误</h2><p>如果函数和变量拼写错误，则会提示错误“NameError: name ‘ab’ is not defined”</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">&gt;&gt;&gt; aa = <span class="hljs-string">&quot;Learn Python&quot;</span><br>&gt;&gt;&gt; <span class="hljs-keyword">print</span>(<span class="hljs-keyword">ab</span>)<br>Traceback (most recent <span class="hljs-keyword">call</span> <span class="hljs-keyword">last</span>):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, <span class="hljs-built_in">line</span> <span class="hljs-number">1</span>, in <span class="hljs-symbol">&lt;module&gt;</span><br>NameError: name <span class="hljs-string">&#x27;ab&#x27;</span> <span class="hljs-keyword">is</span> not defined<br></code></pre></td></tr></table></figure><h2 id="8-应用超过列表的最大索引值"><a href="#8-应用超过列表的最大索引值" class="headerlink" title="8. 应用超过列表的最大索引值"></a>8. 应用超过列表的最大索引值</h2><p>如果引用超过列表的最大索引值，则会提示“IndexError: list index out of range”</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">&gt;&gt;&gt; aa = [<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">45</span> ]<br>&gt;&gt;&gt; <span class="hljs-keyword">print</span>(aa[<span class="hljs-number">4</span>])<br>Traceback (most recent <span class="hljs-keyword">call</span> <span class="hljs-keyword">last</span>):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, <span class="hljs-built_in">line</span> <span class="hljs-number">1</span>, in <span class="hljs-symbol">&lt;module&gt;</span><br>IndexError: <span class="hljs-keyword">list</span> <span class="hljs-built_in">index</span> out of <span class="hljs-built_in">range</span><br></code></pre></td></tr></table></figure><h2 id="9-使用关键字作为变量名"><a href="#9-使用关键字作为变量名" class="headerlink" title="9.使用关键字作为变量名"></a>9.使用关键字作为变量名</h2><p>Python 关键字不能用作变量名。Python3 的关键字有：[‘False’, ‘None’, ‘True’, ‘and’, ‘as’,<br> ‘assert’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘finally’,’for’, ‘from’, ‘global’, ‘if’, ‘import’,’in’, ‘is’, ‘lambda’, ‘nonlocal’, ‘not’, ‘or’, ‘pass’, ‘raise’, ‘return’, ‘try’,’while’, ‘with’, ‘yield’]当使用这些关键字作为变量时，将会提示错误“SyntaxError: invalid syntax”例如：<br> <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"> &gt;&gt;&gt; <span class="hljs-keyword">except</span> = [<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>]<br> File &quot;&lt;stdin&gt;&quot;, <span class="hljs-type">line</span> <span class="hljs-number">1</span><br>   <span class="hljs-keyword">except</span> = [<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>]<br>        ^<br>SyntaxError: invalid syntax<br></code></pre></td></tr></table></figure></p><h2 id="10-变量没有初始值就使用增值操作符"><a href="#10-变量没有初始值就使用增值操作符" class="headerlink" title="10.变量没有初始值就使用增值操作符"></a>10.变量没有初始值就使用增值操作符</h2><p> 如果变量没有指定一个有效的初始值就使用自增操作符，则会提示错误“NameError: name ‘obj’ is not defined”例如：<br> <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim"> &gt;&gt;&gt; obj += <span class="hljs-number">15</span><br>Traceback (most recent <span class="hljs-keyword">call</span> <span class="hljs-keyword">last</span>):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, <span class="hljs-built_in">line</span> <span class="hljs-number">1</span>, in <span class="hljs-symbol">&lt;module&gt;</span><br>NameError: name <span class="hljs-string">&#x27;obj&#x27;</span> <span class="hljs-keyword">is</span> not defined<br></code></pre></td></tr></table></figure></p><h2 id="11-误用自增和自减运算符"><a href="#11-误用自增和自减运算符" class="headerlink" title="11.误用自增和自减运算符"></a>11.误用自增和自减运算符</h2><p> 在python编程语言中，没有自增（++）或者自减（–）运算符。如果误用，则会提示错误“SyntaxError: invalid syntax”例如：<br> <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"> &gt;&gt;&gt; <span class="hljs-keyword">jj </span>= <span class="hljs-number">10</span><br>&gt;&gt;&gt; <span class="hljs-keyword">jj </span>++<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span><br>    <span class="hljs-keyword">jj </span>++<br>        ^<br><span class="hljs-symbol">SyntaxError:</span> invalid syntax<br></code></pre></td></tr></table></figure></p><h2 id="12-忘记为方法的第一个参数添加self参数"><a href="#12-忘记为方法的第一个参数添加self参数" class="headerlink" title="12.忘记为方法的第一个参数添加self参数"></a>12.忘记为方法的第一个参数添加self参数</h2><p> 在定义方法时，第一个参数必须是self。如果忘记添加self参数，则会提示错误“TypeError: myMethod() takes 0 positional arguments but 1 was given”例如：<br> <figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"> &gt;&gt;&gt; class myClass():<br><span class="hljs-meta">...</span> <span class="python">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">myMethod</span>():</span></span><br><span class="hljs-meta">...</span> <span class="python">            print(<span class="hljs-string">&quot;this is a good method&quot;</span>)</span><br><span class="hljs-meta">...</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">dd = myClass()</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">dd.myMethod()</span><br>Traceback (most recent call last):<br>  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;<br>TypeError: myMethod() takes 0 positional arguments but 1 was given<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
